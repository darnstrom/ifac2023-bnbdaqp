
bnb_invpend_STM32F11RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  00022d08  2**0
                  CONTENTS
  4 .ARM          00000008  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003864  08003864  00022d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002d08  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20002d08  08006574  00022d08  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ff8  08006574  00023ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022d08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b7b  00000000  00000000  00022d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291c  00000000  00000000  000368b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000118fa  00000000  00000000  000391cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0004aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018f8  00000000  00000000  0004b438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001591f  00000000  00000000  0004cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143dc  00000000  00000000  0006264f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a83e  00000000  00000000  00076a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00101269  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002020  00000000  00000000  001012bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20002d08 	.word	0x20002d08
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003824 	.word	0x08003824

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20002d0c 	.word	0x20002d0c
 80001d4:	08003824 	.word	0x08003824

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <compute_primal_and_fval>:

    // Pivot for improved numerics
    pivot_last(work);
}

void compute_primal_and_fval(DAQPWorkspace *work){
 80004dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i,j,disp;
    c_float fval=0;
    // Reset u & soft slack
    for(j=0;j<NX;j++)
 80004e0:	6845      	ldr	r5, [r0, #4]
 80004e2:	2d00      	cmp	r5, #0
void compute_primal_and_fval(DAQPWorkspace *work){
 80004e4:	b083      	sub	sp, #12
 80004e6:	4604      	mov	r4, r0
    for(j=0;j<NX;j++)
 80004e8:	dd04      	ble.n	80004f4 <compute_primal_and_fval+0x18>
        work->u[j]=0;
 80004ea:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80004ec:	00aa      	lsls	r2, r5, #2
 80004ee:	2100      	movs	r1, #0
 80004f0:	f003 f990 	bl	8003814 <memset>
    work->soft_slack = 0;
    //u[m] <-- Mk'*lam_star (zero if empty set)
    for(i=0;i<work->n_active;i++){
 80004f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    work->soft_slack = 0;
 80004f6:	eddf 7a53 	vldr	s15, [pc, #332]	; 8000644 <compute_primal_and_fval+0x168>
    for(i=0;i<work->n_active;i++){
 80004fa:	2a00      	cmp	r2, #0
    work->soft_slack = 0;
 80004fc:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
    c_float fval=0;
 8000500:	bfd8      	it	le
 8000502:	eeb0 6a67 	vmovle.f32	s12, s15
    for(i=0;i<work->n_active;i++){
 8000506:	f340 8086 	ble.w	8000616 <compute_primal_and_fval+0x13a>
        if(IS_SIMPLE(work->WS[i])){
 800050a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800050c:	68e6      	ldr	r6, [r4, #12]
        }
        else{ // General constraint
            for(j=0,disp=NX*(work->WS[i]-N_SIMPLE);j<NX;j++)
                work->u[j]-=work->M[disp++]*work->lam_star[i];
        }
        if(IS_SOFT(work->WS[i])){
 800050e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8000510:	1f0b      	subs	r3, r1, #4
 8000512:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8000516:	00aa      	lsls	r2, r5, #2
    c_float fval=0;
 8000518:	eeb0 6a67 	vmov.f32	s12, s15
 800051c:	f1c1 0e04 	rsb	lr, r1, #4
                for(j=work->WS[i], disp=R_OFFSET(work->WS[i],NX);j<NX;++j)
 8000520:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8000524:	9201      	str	r2, [sp, #4]
 8000526:	e024      	b.n	8000572 <compute_primal_and_fval+0x96>
            else work->u[work->WS[i]]-=work->lam_star[i]; // Hessian is identity
 8000528:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800052a:	ea4f 0980 	mov.w	r9, r0, lsl #2
 800052e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000532:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000534:	edd2 7a00 	vldr	s15, [r2]
 8000538:	4408      	add	r0, r1
 800053a:	ed90 7a00 	vldr	s14, [r0]
 800053e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000542:	edc2 7a00 	vstr	s15, [r2]
        if(IS_SOFT(work->WS[i])){
 8000546:	f857 2009 	ldr.w	r2, [r7, r9]
 800054a:	0712      	lsls	r2, r2, #28
 800054c:	d50f      	bpl.n	800056e <compute_primal_and_fval+0x92>
            if(IS_LOWER(work->WS[i]))
                fval+=SQUARE(work->lam_star[i])*work->rho_ls[work->WS[i]];
            else
                fval+=SQUARE(work->lam_star[i])*work->rho_us[work->WS[i]];
#else
            fval+= SQUARE(work->lam_star[i])/SQUARE(work->scaling[work->WS[i]]);
 800054e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000550:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000552:	440a      	add	r2, r1
 8000554:	4448      	add	r0, r9
 8000556:	ed92 7a00 	vldr	s14, [r2]
 800055a:	edd0 7a00 	vldr	s15, [r0]
 800055e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8000562:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000566:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800056a:	ee36 6a26 	vadd.f32	s12, s12, s13
    for(i=0;i<work->n_active;i++){
 800056e:	459c      	cmp	ip, r3
 8000570:	d051      	beq.n	8000616 <compute_primal_and_fval+0x13a>
        if(IS_SIMPLE(work->WS[i])){
 8000572:	eb0e 0103 	add.w	r1, lr, r3
 8000576:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800057a:	42b0      	cmp	r0, r6
 800057c:	da2a      	bge.n	80005d4 <compute_primal_and_fval+0xf8>
            if(work->Rinv!=NULL){ // Hessian is not identity
 800057e:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d0cf      	beq.n	8000528 <compute_primal_and_fval+0x4c>
                for(j=work->WS[i], disp=R_OFFSET(work->WS[i],NX);j<NX;++j)
 8000588:	eba8 0200 	sub.w	r2, r8, r0
 800058c:	3a01      	subs	r2, #1
 800058e:	fb00 f202 	mul.w	r2, r0, r2
 8000592:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000596:	42a8      	cmp	r0, r5
 8000598:	ea4f 0262 	mov.w	r2, r2, asr #1
 800059c:	da38      	bge.n	8000610 <compute_primal_and_fval+0x134>
 800059e:	4402      	add	r2, r0
 80005a0:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
                    work->u[j]-=work->Rinv[disp+j]*work->lam_star[i];
 80005a4:	e9d4 2b0e 	ldrd	r2, fp, [r4, #56]	; 0x38
 80005a8:	440a      	add	r2, r1
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9a01      	ldr	r2, [sp, #4]
 80005ae:	ea4f 0980 	mov.w	r9, r0, lsl #2
 80005b2:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
 80005b6:	4493      	add	fp, r2
 80005b8:	9a00      	ldr	r2, [sp, #0]
 80005ba:	edd0 7a00 	vldr	s15, [r0]
 80005be:	ecfa 6a01 	vldmia	sl!, {s13}
 80005c2:	ed92 7a00 	vldr	s14, [r2]
 80005c6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80005ca:	ece0 7a01 	vstmia	r0!, {s15}
                for(j=work->WS[i], disp=R_OFFSET(work->WS[i],NX);j<NX;++j)
 80005ce:	4583      	cmp	fp, r0
 80005d0:	d1f3      	bne.n	80005ba <compute_primal_and_fval+0xde>
 80005d2:	e7b8      	b.n	8000546 <compute_primal_and_fval+0x6a>
            for(j=0,disp=NX*(work->WS[i]-N_SIMPLE);j<NX;j++)
 80005d4:	eba0 0906 	sub.w	r9, r0, r6
 80005d8:	2d00      	cmp	r5, #0
 80005da:	fb05 f909 	mul.w	r9, r5, r9
 80005de:	dd17      	ble.n	8000610 <compute_primal_and_fval+0x134>
                work->u[j]-=work->M[disp++]*work->lam_star[i];
 80005e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80005e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80005e6:	eb05 0b09 	add.w	fp, r5, r9
 80005ea:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 80005ee:	eb0a 0a8b 	add.w	sl, sl, fp, lsl #2
 80005f2:	f8d4 b03c 	ldr.w	fp, [r4, #60]	; 0x3c
 80005f6:	440a      	add	r2, r1
 80005f8:	ecf9 6a01 	vldmia	r9!, {s13}
 80005fc:	eddb 7a00 	vldr	s15, [fp]
 8000600:	ed92 7a00 	vldr	s14, [r2]
 8000604:	eee6 7ac7 	vfms.f32	s15, s13, s14
            for(j=0,disp=NX*(work->WS[i]-N_SIMPLE);j<NX;j++)
 8000608:	45ca      	cmp	sl, r9
                work->u[j]-=work->M[disp++]*work->lam_star[i];
 800060a:	eceb 7a01 	vstmia	fp!, {s15}
            for(j=0,disp=NX*(work->WS[i]-N_SIMPLE);j<NX;j++)
 800060e:	d1f3      	bne.n	80005f8 <compute_primal_and_fval+0x11c>
            else work->u[work->WS[i]]-=work->lam_star[i]; // Hessian is identity
 8000610:	ea4f 0980 	mov.w	r9, r0, lsl #2
 8000614:	e797      	b.n	8000546 <compute_primal_and_fval+0x6a>
#endif
        }
    }
    // Check for progress 
#ifndef SOFT_WEIGHTS
    fval=fval*work->settings->rho_soft;
 8000616:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000618:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800061c:	ee66 7a27 	vmul.f32	s15, s12, s15
#endif
    work->soft_slack=fval;// XXX: keep this for now to return SOFT_OPTIMAL
    for(j=0;j<NX;j++)
 8000620:	2d00      	cmp	r5, #0
    work->soft_slack=fval;// XXX: keep this for now to return SOFT_OPTIMAL
 8000622:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
    for(j=0;j<NX;j++)
 8000626:	dd08      	ble.n	800063a <compute_primal_and_fval+0x15e>
 8000628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800062a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        fval+=work->u[j]*work->u[j];
 800062e:	ecb3 7a01 	vldmia	r3!, {s14}
    for(j=0;j<NX;j++)
 8000632:	42ab      	cmp	r3, r5
        fval+=work->u[j]*work->u[j];
 8000634:	eee7 7a07 	vfma.f32	s15, s14, s14
    for(j=0;j<NX;j++)
 8000638:	d1f9      	bne.n	800062e <compute_primal_and_fval+0x152>
    work->fval = fval;
 800063a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
}
 800063e:	b003      	add	sp, #12
 8000640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000644:	00000000 	.word	0x00000000

08000648 <compute_CSP>:
    remove_constraint(work,rm_ind);
    return 1;
}
#endif // SOFT_WEIGHTS

void compute_CSP(DAQPWorkspace *work){
 8000648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i,j,disp,start_disp;
    c_float sum;
    // Forward substitution (xi <-- L\d)
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 800064c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800064e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8000650:	fb04 4204 	mla	r2, r4, r4, r4
 8000654:	42ac      	cmp	r4, r5
void compute_CSP(DAQPWorkspace *work){
 8000656:	b085      	sub	sp, #20
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 8000658:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800065c:	f280 80c7 	bge.w	80007ee <compute_CSP+0x1a6>
        // Setup RHS
        if(IS_LOWER(work->WS[i])){
 8000660:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000662:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
#endif
        }
        for(j=0; j<i; j++)
            sum -= work->L[disp++]*work->xldl[j];
        disp++; //Skip 1 in L 
        work->xldl[i] = sum;
 8000666:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
        if(IS_LOWER(work->WS[i])){
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	2c00      	cmp	r4, #0
 800066c:	ea4f 0262 	mov.w	r2, r2, asr #1
 8000670:	f300 808a 	bgt.w	8000788 <compute_CSP+0x140>
 8000674:	f104 4c80 	add.w	ip, r4, #1073741824	; 0x40000000
 8000678:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800067c:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8000680:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8000684:	f1c4 0e01 	rsb	lr, r4, #1
 8000688:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800068c:	3704      	adds	r7, #4
 800068e:	4496      	add	lr, r2
 8000690:	ea09 7ae9 	and.w	sl, r9, r9, asr #31
        work->xldl[i] = sum;
 8000694:	4623      	mov	r3, r4
 8000696:	9403      	str	r4, [sp, #12]
        if(IS_LOWER(work->WS[i])){
 8000698:	f85c 1f04 	ldr.w	r1, [ip, #4]!
 800069c:	f858 b021 	ldr.w	fp, [r8, r1, lsl #2]
 80006a0:	eb0e 0203 	add.w	r2, lr, r3
 80006a4:	f01b 0f02 	tst.w	fp, #2
 80006a8:	9201      	str	r2, [sp, #4]
 80006aa:	ea4f 0181 	mov.w	r1, r1, lsl #2
 80006ae:	d05c      	beq.n	800076a <compute_CSP+0x122>
            sum = -work->dlower[work->WS[i]];
 80006b0:	6982      	ldr	r2, [r0, #24]
 80006b2:	440a      	add	r2, r1
 80006b4:	edd2 7a00 	vldr	s15, [r2]
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 80006b8:	3301      	adds	r3, #1
            sum = -work->dlower[work->WS[i]];
 80006ba:	eef1 7a67 	vneg.f32	s15, s15
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 80006be:	4553      	cmp	r3, sl
        work->xldl[i] = sum;
 80006c0:	ece7 7a01 	vstmia	r7!, {s15}
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 80006c4:	dde8      	ble.n	8000698 <compute_CSP+0x50>
 80006c6:	429d      	cmp	r5, r3
 80006c8:	9c03      	ldr	r4, [sp, #12]
        disp++; //Skip 1 in L 
 80006ca:	9a01      	ldr	r2, [sp, #4]
 80006cc:	dc5f      	bgt.n	800078e <compute_CSP+0x146>
 80006ce:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80006d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80006d2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80006d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80006da:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80006de:	eb06 0685 	add.w	r6, r6, r5, lsl #2
    }
    // Scale with D  (zi = xi/di)
    for(i=work->reuse_ind; i<work->n_active; i++)
        work->zldl[i] = work->xldl[i]/work->D[i];
 80006e2:	ecf4 6a01 	vldmia	r4!, {s13}
 80006e6:	ecb2 7a01 	vldmia	r2!, {s14}
 80006ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
    for(i=work->reuse_ind; i<work->n_active; i++)
 80006ee:	42b4      	cmp	r4, r6
        work->zldl[i] = work->xldl[i]/work->D[i];
 80006f0:	ece3 7a01 	vstmia	r3!, {s15}
    for(i=work->reuse_ind; i<work->n_active; i++)
 80006f4:	d1f5      	bne.n	80006e2 <compute_CSP+0x9a>
    //Backward substitution  (lam_star <-- L'\z)
    start_disp = ARSUM(work->n_active)-1;
 80006f6:	fb05 5305 	mla	r3, r5, r5, r5
 80006fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    for(i = work->n_active-1;i>=0;i--){
 80006fe:	f1b9 0f00 	cmp.w	r9, #0
    start_disp = ARSUM(work->n_active)-1;
 8000702:	ea4f 0863 	mov.w	r8, r3, asr #1
    for(i = work->n_active-1;i>=0;i--){
 8000706:	db2c      	blt.n	8000762 <compute_CSP+0x11a>
        sum=work->zldl[i];
 8000708:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800070a:	eb03 0c89 	add.w	ip, r3, r9, lsl #2
        disp = start_disp--;
        for(j=work->n_active-1;j>i;j--){
            sum-=work->lam_star[j]*work->L[disp];
            disp-=j;
        } 
        work->lam_star[i] = sum;
 800070e:	6b83      	ldr	r3, [r0, #56]	; 0x38
        sum=work->zldl[i];
 8000710:	f8dc 2000 	ldr.w	r2, [ip]
        work->lam_star[i] = sum;
 8000714:	eb03 0e89 	add.w	lr, r3, r9, lsl #2
    for(i = work->n_active-1;i>=0;i--){
 8000718:	2d01      	cmp	r5, #1
        work->lam_star[i] = sum;
 800071a:	f8ce 2000 	str.w	r2, [lr]
    for(i = work->n_active-1;i>=0;i--){
 800071e:	f1a5 0602 	sub.w	r6, r5, #2
 8000722:	d01e      	beq.n	8000762 <compute_CSP+0x11a>
 8000724:	eb03 0a85 	add.w	sl, r3, r5, lsl #2
 8000728:	eba8 0805 	sub.w	r8, r8, r5
        for(j=work->n_active-1;j>i;j--){
 800072c:	1c73      	adds	r3, r6, #1
 800072e:	429d      	cmp	r5, r3
        sum=work->zldl[i];
 8000730:	ed7c 7a01 	vldmdb	ip!, {s15}
 8000734:	eb08 0206 	add.w	r2, r8, r6
        for(j=work->n_active-1;j>i;j--){
 8000738:	dd0e      	ble.n	8000758 <compute_CSP+0x110>
            sum-=work->lam_star[j]*work->L[disp];
 800073a:	6c47      	ldr	r7, [r0, #68]	; 0x44
 800073c:	4651      	mov	r1, sl
 800073e:	464b      	mov	r3, r9
 8000740:	eb07 0482 	add.w	r4, r7, r2, lsl #2
 8000744:	ed71 6a01 	vldmdb	r1!, {s13}
 8000748:	ed94 7a00 	vldr	s14, [r4]
            disp-=j;
 800074c:	1ad2      	subs	r2, r2, r3
        for(j=work->n_active-1;j>i;j--){
 800074e:	3b01      	subs	r3, #1
 8000750:	42b3      	cmp	r3, r6
            sum-=work->lam_star[j]*work->L[disp];
 8000752:	eee6 7ac7 	vfms.f32	s15, s13, s14
        for(j=work->n_active-1;j>i;j--){
 8000756:	d1f3      	bne.n	8000740 <compute_CSP+0xf8>
    for(i = work->n_active-1;i>=0;i--){
 8000758:	3e01      	subs	r6, #1
 800075a:	1c73      	adds	r3, r6, #1
        work->lam_star[i] = sum;
 800075c:	ed6e 7a01 	vstmdb	lr!, {s15}
    for(i = work->n_active-1;i>=0;i--){
 8000760:	d1e4      	bne.n	800072c <compute_CSP+0xe4>
    }
    work->reuse_ind = work->n_active; // Save forward substitution information 
 8000762:	6545      	str	r5, [r0, #84]	; 0x54
}
 8000764:	b005      	add	sp, #20
 8000766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            sum = -work->dupper[work->WS[i]];
 800076a:	6944      	ldr	r4, [r0, #20]
 800076c:	4421      	add	r1, r4
 800076e:	edd1 7a00 	vldr	s15, [r1]
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 8000772:	3301      	adds	r3, #1
            sum = -work->dupper[work->WS[i]];
 8000774:	eef1 7a67 	vneg.f32	s15, s15
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 8000778:	4553      	cmp	r3, sl
        work->xldl[i] = sum;
 800077a:	ece7 7a01 	vstmia	r7!, {s15}
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 800077e:	dd8b      	ble.n	8000698 <compute_CSP+0x50>
 8000780:	429d      	cmp	r5, r3
 8000782:	9c03      	ldr	r4, [sp, #12]
 8000784:	dc03      	bgt.n	800078e <compute_CSP+0x146>
 8000786:	e7a2      	b.n	80006ce <compute_CSP+0x86>
        work->xldl[i] = sum;
 8000788:	4623      	mov	r3, r4
 800078a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800078e:	9f02      	ldr	r7, [sp, #8]
            sum -= work->L[disp++]*work->xldl[j];
 8000790:	f8d0 b044 	ldr.w	fp, [r0, #68]	; 0x44
 8000794:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8000798:	3901      	subs	r1, #1
 800079a:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 800079e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80007a2:	1d0f      	adds	r7, r1, #4
        if(IS_LOWER(work->WS[i])){
 80007a4:	f85c 1f04 	ldr.w	r1, [ip, #4]!
 80007a8:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 80007ac:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80007b0:	0789      	lsls	r1, r1, #30
            sum = -work->dlower[work->WS[i]];
 80007b2:	bf4c      	ite	mi
 80007b4:	6981      	ldrmi	r1, [r0, #24]
            sum = -work->dupper[work->WS[i]];
 80007b6:	6941      	ldrpl	r1, [r0, #20]
 80007b8:	4471      	add	r1, lr
 80007ba:	edd1 7a00 	vldr	s15, [r1]
 80007be:	eb0b 0a82 	add.w	sl, fp, r2, lsl #2
 80007c2:	eef1 7a67 	vneg.f32	s15, s15
        for(j=0; j<i; j++)
 80007c6:	46b6      	mov	lr, r6
        work->xldl[i] = sum;
 80007c8:	2100      	movs	r1, #0
            sum -= work->L[disp++]*work->xldl[j];
 80007ca:	ecba 7a01 	vldmia	sl!, {s14}
 80007ce:	ecfe 6a01 	vldmia	lr!, {s13}
        for(j=0; j<i; j++)
 80007d2:	3101      	adds	r1, #1
 80007d4:	4299      	cmp	r1, r3
            sum -= work->L[disp++]*work->xldl[j];
 80007d6:	eee6 7ac7 	vfms.f32	s15, s13, s14
        for(j=0; j<i; j++)
 80007da:	dbf6      	blt.n	80007ca <compute_CSP+0x182>
            sum -= work->L[disp++]*work->xldl[j];
 80007dc:	441a      	add	r2, r3
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 80007de:	3301      	adds	r3, #1
 80007e0:	429d      	cmp	r5, r3
        work->xldl[i] = sum;
 80007e2:	ece7 7a01 	vstmia	r7!, {s15}
        disp++; //Skip 1 in L 
 80007e6:	f102 0201 	add.w	r2, r2, #1
    for(i=work->reuse_ind,disp=ARSUM(work->reuse_ind); i<work->n_active; i++){
 80007ea:	dcdb      	bgt.n	80007a4 <compute_CSP+0x15c>
 80007ec:	e76f      	b.n	80006ce <compute_CSP+0x86>
 80007ee:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80007f2:	e780      	b.n	80006f6 <compute_CSP+0xae>

080007f4 <compute_singular_direction>:

//TODO this could probably be directly calculated in L
void compute_singular_direction(DAQPWorkspace *work){
 80007f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Step direction is stored in lam_star
    int i,j,disp,offset_L= ARSUM(work->sing_ind);
 80007f8:	6e47      	ldr	r7, [r0, #100]	; 0x64
 80007fa:	fb07 7907 	mla	r9, r7, r7, r7
    int start_disp= offset_L-1;

    // Backwards substitution (p_tidle <-- L'\(-l))
    for(i = work->sing_ind-1;i>=0;i--){
 80007fe:	f1b7 0a01 	subs.w	sl, r7, #1
void compute_singular_direction(DAQPWorkspace *work){
 8000802:	b083      	sub	sp, #12
    int i,j,disp,offset_L= ARSUM(work->sing_ind);
 8000804:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    for(i = work->sing_ind-1;i>=0;i--){
 8000808:	d45b      	bmi.n	80008c2 <compute_singular_direction+0xce>
        work->lam_star[i] = -work->L[offset_L+i];
 800080a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800080c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800080e:	ea4f 0969 	mov.w	r9, r9, asr #1
 8000812:	eb09 030a 	add.w	r3, r9, sl
 8000816:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800081a:	edd3 7a00 	vldr	s15, [r3]
 800081e:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 8000822:	eef1 7a67 	vneg.f32	s15, s15
    for(i = work->sing_ind-1;i>=0;i--){
 8000826:	2f01      	cmp	r7, #1
 8000828:	f1a7 0e02 	sub.w	lr, r7, #2
        work->lam_star[i] = -work->L[offset_L+i];
 800082c:	edc4 7a00 	vstr	s15, [r4]
    for(i = work->sing_ind-1;i>=0;i--){
 8000830:	d04b      	beq.n	80008ca <compute_singular_direction+0xd6>
 8000832:	eb0e 0809 	add.w	r8, lr, r9
 8000836:	f108 0801 	add.w	r8, r8, #1
 800083a:	00bb      	lsls	r3, r7, #2
 800083c:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8000840:	eba9 0907 	sub.w	r9, r9, r7
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	eb06 0b87 	add.w	fp, r6, r7, lsl #2
        work->lam_star[i] = -work->L[offset_L+i];
 800084a:	ed78 7a01 	vldmdb	r8!, {s15}
        disp = start_disp--;
        for(j=work->sing_ind-1;j>i;j--){
 800084e:	f10e 0301 	add.w	r3, lr, #1
        work->lam_star[i] = -work->L[offset_L+i];
 8000852:	eef1 7a67 	vneg.f32	s15, s15
        for(j=work->sing_ind-1;j>i;j--){
 8000856:	429f      	cmp	r7, r3
        work->lam_star[i] = -work->L[offset_L+i];
 8000858:	ed64 7a01 	vstmdb	r4!, {s15}
 800085c:	eb09 020e 	add.w	r2, r9, lr
        for(j=work->sing_ind-1;j>i;j--){
 8000860:	dd0f      	ble.n	8000882 <compute_singular_direction+0x8e>
 8000862:	4659      	mov	r1, fp
 8000864:	4653      	mov	r3, sl
            work->lam_star[i]-=work->lam_star[j]*work->L[disp];
 8000866:	eb05 0c82 	add.w	ip, r5, r2, lsl #2
 800086a:	ed71 6a01 	vldmdb	r1!, {s13}
 800086e:	ed9c 7a00 	vldr	s14, [ip]
 8000872:	eee6 7ac7 	vfms.f32	s15, s13, s14
            disp-=j;
 8000876:	1ad2      	subs	r2, r2, r3
        for(j=work->sing_ind-1;j>i;j--){
 8000878:	3b01      	subs	r3, #1
 800087a:	4573      	cmp	r3, lr
            work->lam_star[i]-=work->lam_star[j]*work->L[disp];
 800087c:	edc4 7a00 	vstr	s15, [r4]
        for(j=work->sing_ind-1;j>i;j--){
 8000880:	d1f1      	bne.n	8000866 <compute_singular_direction+0x72>
    for(i = work->sing_ind-1;i>=0;i--){
 8000882:	f1be 0e01 	subs.w	lr, lr, #1
 8000886:	d2e0      	bcs.n	800084a <compute_singular_direction+0x56>
        } 
    }
    work->lam_star[work->sing_ind]=1;

    if(IS_LOWER(work->WS[work->sing_ind])) //Flip to ensure descent direction 
 8000888:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800088a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800088c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    work->lam_star[work->sing_ind]=1;
 8000890:	9c01      	ldr	r4, [sp, #4]
    if(IS_LOWER(work->WS[work->sing_ind])) //Flip to ensure descent direction 
 8000892:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    work->lam_star[work->sing_ind]=1;
 8000896:	1933      	adds	r3, r6, r4
 8000898:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800089c:	6019      	str	r1, [r3, #0]
    if(IS_LOWER(work->WS[work->sing_ind])) //Flip to ensure descent direction 
 800089e:	0793      	lsls	r3, r2, #30
 80008a0:	d50c      	bpl.n	80008bc <compute_singular_direction+0xc8>
        for(i=0;i<=work->sing_ind;i++)
 80008a2:	2f00      	cmp	r7, #0
 80008a4:	db0a      	blt.n	80008bc <compute_singular_direction+0xc8>
 80008a6:	4623      	mov	r3, r4
 80008a8:	3304      	adds	r3, #4
 80008aa:	4433      	add	r3, r6
            work->lam_star[i] =-work->lam_star[i];
 80008ac:	edd6 7a00 	vldr	s15, [r6]
 80008b0:	eef1 7a67 	vneg.f32	s15, s15
 80008b4:	ece6 7a01 	vstmia	r6!, {s15}
        for(i=0;i<=work->sing_ind;i++)
 80008b8:	429e      	cmp	r6, r3
 80008ba:	d1f7      	bne.n	80008ac <compute_singular_direction+0xb8>
}
 80008bc:	b003      	add	sp, #12
 80008be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008c2:	00bb      	lsls	r3, r7, #2
    work->lam_star[work->sing_ind]=1;
 80008c4:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	e7de      	b.n	8000888 <compute_singular_direction+0x94>
 80008ca:	00bb      	lsls	r3, r7, #2
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	e7db      	b.n	8000888 <compute_singular_direction+0x94>

080008d0 <pivot_last>:
        }
    }
}

void pivot_last(DAQPWorkspace *work){
    const int rm_ind = work->n_active-2; 
 80008d0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    if(work->n_active > 1 && 
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	dd41      	ble.n	800095a <pivot_last+0x8a>
void pivot_last(DAQPWorkspace *work){
 80008d6:	b570      	push	{r4, r5, r6, lr}
            work->D[rm_ind] < work->settings->pivot_tol && // element in D small enough
 80008d8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if(work->n_active > 1 && 
 80008da:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    const int rm_ind = work->n_active-2; 
 80008dc:	1e99      	subs	r1, r3, #2
            work->D[rm_ind] < work->settings->pivot_tol && // element in D small enough
 80008de:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
    if(work->n_active > 1 && 
 80008e2:	ed94 7a03 	vldr	s14, [r4, #12]
            work->D[rm_ind] < work->settings->pivot_tol && // element in D small enough
 80008e6:	eddc 7a00 	vldr	s15, [ip]
void pivot_last(DAQPWorkspace *work){
 80008ea:	ed2d 8b02 	vpush	{d8}
    if(work->n_active > 1 && 
 80008ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void pivot_last(DAQPWorkspace *work){
 80008f6:	b082      	sub	sp, #8
            work->D[rm_ind] < work->settings->pivot_tol && // element in D small enough
 80008f8:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    if(work->n_active > 1 && 
 80008fc:	d529      	bpl.n	8000952 <pivot_last+0x82>
            work->D[rm_ind] < work->D[work->n_active-1]){ // element in D smallar than neighbor
 80008fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000902:	3b01      	subs	r3, #1
 8000904:	eb02 0283 	add.w	r2, r2, r3, lsl #2
            work->D[rm_ind] < work->settings->pivot_tol && // element in D small enough
 8000908:	ed92 7a00 	vldr	s14, [r2]
 800090c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000914:	d51d      	bpl.n	8000952 <pivot_last+0x82>
        const int ind_old = work->WS[rm_ind];
 8000916:	6d84      	ldr	r4, [r0, #88]	; 0x58
        // Ensure that binaries never swap order (since this order is exploited) 
        if(IS_BINARY(ind_old) && IS_BINARY(work->WS[work->n_active-1])) return; 
 8000918:	6a42      	ldr	r2, [r0, #36]	; 0x24
        const int ind_old = work->WS[rm_ind];
 800091a:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
        if(IS_BINARY(ind_old) && IS_BINARY(work->WS[work->n_active-1])) return; 
 800091e:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8000922:	06f6      	lsls	r6, r6, #27
 8000924:	d505      	bpl.n	8000932 <pivot_last+0x62>
 8000926:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800092a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092e:	06db      	lsls	r3, r3, #27
 8000930:	d40f      	bmi.n	8000952 <pivot_last+0x82>
        if(work->bnb != NULL && rm_ind < work->bnb->n_clean) return;
 8000932:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000934:	b113      	cbz	r3, 800093c <pivot_last+0x6c>
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	428b      	cmp	r3, r1
 800093a:	dc0a      	bgt.n	8000952 <pivot_last+0x82>

        c_float lam_old = work->lam[rm_ind];
 800093c:	6b43      	ldr	r3, [r0, #52]	; 0x34
        remove_constraint(work,rm_ind); // pivot_last might be recursively called here 
 800093e:	9001      	str	r0, [sp, #4]
        c_float lam_old = work->lam[rm_ind];
 8000940:	4473      	add	r3, lr
 8000942:	ed93 8a00 	vldr	s16, [r3]
        remove_constraint(work,rm_ind); // pivot_last might be recursively called here 
 8000946:	f000 f813 	bl	8000970 <remove_constraint>

        if(work->sing_ind!=EMPTY_IND) return; // Abort if D becomes singular
 800094a:	9801      	ldr	r0, [sp, #4]
 800094c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800094e:	3301      	adds	r3, #1
 8000950:	d004      	beq.n	800095c <pivot_last+0x8c>

        add_constraint(work,ind_old,lam_old);
    }	
}
 8000952:	b002      	add	sp, #8
 8000954:	ecbd 8b02 	vpop	{d8}
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	4770      	bx	lr
        add_constraint(work,ind_old,lam_old);
 800095c:	eeb0 0a48 	vmov.f32	s0, s16
 8000960:	4629      	mov	r1, r5
}
 8000962:	b002      	add	sp, #8
 8000964:	ecbd 8b02 	vpop	{d8}
 8000968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        add_constraint(work,ind_old,lam_old);
 800096c:	f000 b8a4 	b.w	8000ab8 <add_constraint>

08000970 <remove_constraint>:
void remove_constraint(DAQPWorkspace* work, const int rm_ind){
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SET_INACTIVE(work->WS[rm_ind]); 
 8000972:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000974:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 8000978:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800097a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
void remove_constraint(DAQPWorkspace* work, const int rm_ind){
 800097e:	4604      	mov	r4, r0
    SET_INACTIVE(work->WS[rm_ind]); 
 8000980:	f022 0201 	bic.w	r2, r2, #1
 8000984:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
void remove_constraint(DAQPWorkspace* work, const int rm_ind){
 8000988:	460d      	mov	r5, r1
    SET_INACTIVE(work->WS[rm_ind]); 
 800098a:	008e      	lsls	r6, r1, #2
    update_LDL_remove(work,rm_ind);
 800098c:	f000 ff9a 	bl	80018c4 <update_LDL_remove>
    (work->n_active)--;
 8000990:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000992:	3a01      	subs	r2, #1
    for(i=rm_ind;i<work->n_active;i++){
 8000994:	42aa      	cmp	r2, r5
    (work->n_active)--;
 8000996:	65e2      	str	r2, [r4, #92]	; 0x5c
    for(i=rm_ind;i<work->n_active;i++){
 8000998:	dd10      	ble.n	80009bc <remove_constraint+0x4c>
 800099a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800099c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800099e:	4432      	add	r2, r6
 80009a0:	4433      	add	r3, r6
        work->lam[i] = work->lam[i+1]; 
 80009a2:	46ac      	mov	ip, r5
        work->WS[i] = work->WS[i+1]; 
 80009a4:	6850      	ldr	r0, [r2, #4]
 80009a6:	f842 0b04 	str.w	r0, [r2], #4
    for(i=rm_ind;i<work->n_active;i++){
 80009aa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        work->lam[i] = work->lam[i+1]; 
 80009ac:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80009b0:	f843 eb04 	str.w	lr, [r3], #4
    for(i=rm_ind;i<work->n_active;i++){
 80009b4:	f10c 0c01 	add.w	ip, ip, #1
 80009b8:	4560      	cmp	r0, ip
 80009ba:	dcf3      	bgt.n	80009a4 <remove_constraint+0x34>
    if(rm_ind < work->reuse_ind)
 80009bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009be:	42ab      	cmp	r3, r5
        work->reuse_ind = rm_ind;
 80009c0:	bfc8      	it	gt
 80009c2:	6565      	strgt	r5, [r4, #84]	; 0x54
    pivot_last(work);
 80009c4:	4620      	mov	r0, r4
}
 80009c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    pivot_last(work);
 80009ca:	f7ff bf81 	b.w	80008d0 <pivot_last>
 80009ce:	bf00      	nop

080009d0 <remove_blocking>:
int remove_blocking(DAQPWorkspace *work){
 80009d0:	b538      	push	{r3, r4, r5, lr}
    for(int i=0;i<work->n_active;i++){
 80009d2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    const c_float dual_tol = work->settings->dual_tol;
 80009d4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    for(int i=0;i<work->n_active;i++){
 80009d6:	2c00      	cmp	r4, #0
    const c_float dual_tol = work->settings->dual_tol;
 80009d8:	edd3 5a01 	vldr	s11, [r3, #4]
    for(int i=0;i<work->n_active;i++){
 80009dc:	dd67      	ble.n	8000aae <remove_blocking+0xde>
 80009de:	6d83      	ldr	r3, [r0, #88]	; 0x58
        if(IS_IMMUTABLE(work->WS[i])) continue;
 80009e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c_float alpha=DAQP_INF;
 80009e2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000ab4 <remove_blocking+0xe4>
 80009e6:	f1a3 0c04 	sub.w	ip, r3, #4
        else if(work->lam_star[i]>-dual_tol) continue; //lam* >= 0 for upper-> dual feasible
 80009ea:	eeb1 5a65 	vneg.f32	s10, s11
    for(int i=0;i<work->n_active;i++){
 80009ee:	2300      	movs	r3, #0
    int i,rm_ind = EMPTY_IND; 
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f4:	e01c      	b.n	8000a30 <remove_blocking+0x60>
            if(work->lam_star[i]<dual_tol) continue; //lam <= 0 for lower -> dual feasible
 80009f6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80009fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fe:	d414      	bmi.n	8000a2a <remove_blocking+0x5a>
        if(work->sing_ind == EMPTY_IND)
 8000a00:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000a02:	3201      	adds	r2, #1
            alpha_cand= -work->lam[i]/(work->lam_star[i]-work->lam[i]);
 8000a04:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000a06:	4472      	add	r2, lr
 8000a08:	edd2 6a00 	vldr	s13, [r2]
 8000a0c:	bf08      	it	eq
 8000a0e:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
            alpha_cand= -work->lam[i]/work->lam_star[i];
 8000a12:	eef1 6a66 	vneg.f32	s13, s13
 8000a16:	ee86 6aa7 	vdiv.f32	s12, s13, s15
        if(alpha_cand < alpha){
 8000a1a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8000a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            alpha = alpha_cand; 
 8000a22:	bf44      	itt	mi
 8000a24:	eeb0 7a46 	vmovmi.f32	s14, s12
        if(alpha_cand < alpha){
 8000a28:	4619      	movmi	r1, r3
    for(int i=0;i<work->n_active;i++){
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	42a3      	cmp	r3, r4
 8000a2e:	d017      	beq.n	8000a60 <remove_blocking+0x90>
        if(IS_IMMUTABLE(work->WS[i])) continue;
 8000a30:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 8000a34:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8000a38:	f012 0f04 	tst.w	r2, #4
 8000a3c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8000a40:	d1f3      	bne.n	8000a2a <remove_blocking+0x5a>
        if(IS_LOWER(work->WS[i])){
 8000a42:	f012 0f02 	tst.w	r2, #2
            if(work->lam_star[i]<dual_tol) continue; //lam <= 0 for lower -> dual feasible
 8000a46:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a48:	4472      	add	r2, lr
 8000a4a:	edd2 7a00 	vldr	s15, [r2]
        if(IS_LOWER(work->WS[i])){
 8000a4e:	d1d2      	bne.n	80009f6 <remove_blocking+0x26>
        else if(work->lam_star[i]>-dual_tol) continue; //lam* >= 0 for upper-> dual feasible
 8000a50:	eef4 7ac5 	vcmpe.f32	s15, s10
 8000a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a58:	ddd2      	ble.n	8000a00 <remove_blocking+0x30>
    for(int i=0;i<work->n_active;i++){
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	42a3      	cmp	r3, r4
 8000a5e:	d1e7      	bne.n	8000a30 <remove_blocking+0x60>
    if(rm_ind == EMPTY_IND) return 0; // Either dual feasible or primal infeasible
 8000a60:	1c4a      	adds	r2, r1, #1
 8000a62:	d024      	beq.n	8000aae <remove_blocking+0xde>
    if(work->sing_ind == EMPTY_IND)
 8000a64:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000a66:	3201      	adds	r2, #1
 8000a68:	e9d0 240d 	ldrd	r2, r4, [r0, #52]	; 0x34
 8000a6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000a70:	d010      	beq.n	8000a94 <remove_blocking+0xc4>
            work->lam[i]+=alpha*work->lam_star[i];
 8000a72:	edd2 7a00 	vldr	s15, [r2]
 8000a76:	ecf4 6a01 	vldmia	r4!, {s13}
 8000a7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000a7e:	ece2 7a01 	vstmia	r2!, {s15}
        for(i=0;i<work->n_active;i++)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d1f5      	bne.n	8000a72 <remove_blocking+0xa2>
    work->sing_ind=EMPTY_IND;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a8a:	6643      	str	r3, [r0, #100]	; 0x64
    remove_constraint(work,rm_ind);
 8000a8c:	f7ff ff70 	bl	8000970 <remove_constraint>
    return 1;
 8000a90:	2001      	movs	r0, #1
}
 8000a92:	bd38      	pop	{r3, r4, r5, pc}
            work->lam[i]+=alpha*(work->lam_star[i]-work->lam[i]);
 8000a94:	edd2 7a00 	vldr	s15, [r2]
 8000a98:	ecf4 6a01 	vldmia	r4!, {s13}
 8000a9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000aa0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000aa4:	ece2 7a01 	vstmia	r2!, {s15}
        for(i=0;i<work->n_active;i++)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d1f3      	bne.n	8000a94 <remove_blocking+0xc4>
 8000aac:	e7eb      	b.n	8000a86 <remove_blocking+0xb6>
    if(rm_ind == EMPTY_IND) return 0; // Either dual feasible or primal infeasible
 8000aae:	2000      	movs	r0, #0
}
 8000ab0:	bd38      	pop	{r3, r4, r5, pc}
 8000ab2:	bf00      	nop
 8000ab4:	7149f2ca 	.word	0x7149f2ca

08000ab8 <add_constraint>:
void add_constraint(DAQPWorkspace *work, const int add_ind, c_float lam){
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aba:	4604      	mov	r4, r0
 8000abc:	ed2d 8b02 	vpush	{d8}
 8000ac0:	460d      	mov	r5, r1
 8000ac2:	eeb0 8a40 	vmov.f32	s16, s0
    SET_ACTIVE(add_ind);
 8000ac6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ac8:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    update_LDL_add(work, add_ind);
 8000ad4:	4629      	mov	r1, r5
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	f000 fdc2 	bl	8001660 <update_LDL_add>
    work->WS[work->n_active] = add_ind;
 8000adc:	e9d4 6316 	ldrd	r6, r3, [r4, #88]	; 0x58
 8000ae0:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
    work->lam[work->n_active] = lam;
 8000ae4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000ae6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000ae8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8000aec:	ed81 8a00 	vstr	s16, [r1]
    work->n_active++;
 8000af0:	1c59      	adds	r1, r3, #1
    work->lam[work->n_active] = lam;
 8000af2:	009a      	lsls	r2, r3, #2
    if(work->n_active > 1 && 
 8000af4:	2901      	cmp	r1, #1
    const int rm_ind = work->n_active-2; 
 8000af6:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
            work->D[rm_ind] < work->settings->pivot_tol && // element in D small enough
 8000afa:	f1a2 0204 	sub.w	r2, r2, #4
    work->n_active++;
 8000afe:	65e1      	str	r1, [r4, #92]	; 0x5c
    if(work->n_active > 1 && 
 8000b00:	dd32      	ble.n	8000b68 <add_constraint+0xb0>
            work->D[rm_ind] < work->settings->pivot_tol && // element in D small enough
 8000b02:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000b04:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
    if(work->n_active > 1 && 
 8000b06:	ed95 7a03 	vldr	s14, [r5, #12]
            work->D[rm_ind] < work->settings->pivot_tol && // element in D small enough
 8000b0a:	188d      	adds	r5, r1, r2
 8000b0c:	edd5 7a00 	vldr	s15, [r5]
    if(work->n_active > 1 && 
 8000b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            work->D[rm_ind] < work->D[work->n_active-1]){ // element in D smallar than neighbor
 8000b18:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8000b1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    if(work->n_active > 1 && 
 8000b20:	d522      	bpl.n	8000b68 <add_constraint+0xb0>
            work->D[rm_ind] < work->settings->pivot_tol && // element in D small enough
 8000b22:	ed91 7a00 	vldr	s14, [r1]
 8000b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2e:	d51b      	bpl.n	8000b68 <add_constraint+0xb0>
        const int ind_old = work->WS[rm_ind];
 8000b30:	58b5      	ldr	r5, [r6, r2]
        if(IS_BINARY(ind_old) && IS_BINARY(work->WS[work->n_active-1])) return; 
 8000b32:	6a67      	ldr	r7, [r4, #36]	; 0x24
        c_float lam_old = work->lam[rm_ind];
 8000b34:	eb00 0e02 	add.w	lr, r0, r2
        if(IS_BINARY(ind_old) && IS_BINARY(work->WS[work->n_active-1])) return; 
 8000b38:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8000b3c:	06d2      	lsls	r2, r2, #27
        remove_constraint(work,rm_ind); // pivot_last might be recursively called here 
 8000b3e:	4661      	mov	r1, ip
 8000b40:	4620      	mov	r0, r4
        if(IS_BINARY(ind_old) && IS_BINARY(work->WS[work->n_active-1])) return; 
 8000b42:	d505      	bpl.n	8000b50 <add_constraint+0x98>
 8000b44:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8000b48:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8000b4c:	06db      	lsls	r3, r3, #27
 8000b4e:	d40b      	bmi.n	8000b68 <add_constraint+0xb0>
        if(work->bnb != NULL && rm_ind < work->bnb->n_clean) return;
 8000b50:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000b52:	b113      	cbz	r3, 8000b5a <add_constraint+0xa2>
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	459c      	cmp	ip, r3
 8000b58:	db06      	blt.n	8000b68 <add_constraint+0xb0>
        c_float lam_old = work->lam[rm_ind];
 8000b5a:	ed9e 8a00 	vldr	s16, [lr]
        remove_constraint(work,rm_ind); // pivot_last might be recursively called here 
 8000b5e:	f7ff ff07 	bl	8000970 <remove_constraint>
        if(work->sing_ind!=EMPTY_IND) return; // Abort if D becomes singular
 8000b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b64:	3301      	adds	r3, #1
 8000b66:	d0ae      	beq.n	8000ac6 <add_constraint+0xe>
}
 8000b68:	ecbd 8b02 	vpop	{d8}
 8000b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b6e:	bf00      	nop

08000b70 <add_infeasible>:
int add_infeasible(DAQPWorkspace *work){
 8000b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c_float min_val = -work->settings->primal_tol;
 8000b74:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    for(j=0, disp=0;j<N_SIMPLE;j++){
 8000b76:	68c2      	ldr	r2, [r0, #12]
    c_float min_val = -work->settings->primal_tol;
 8000b78:	ed93 6a00 	vldr	s12, [r3]
    for(j=0, disp=0;j<N_SIMPLE;j++){
 8000b7c:	2a00      	cmp	r2, #0
int add_infeasible(DAQPWorkspace *work){
 8000b7e:	4604      	mov	r4, r0
    c_float min_val = -work->settings->primal_tol;
 8000b80:	eeb1 6a46 	vneg.f32	s12, s12
    for(j=0, disp=0;j<N_SIMPLE;j++){
 8000b84:	f340 8102 	ble.w	8000d8c <add_infeasible+0x21c>
        if(work->sense[j]&(ACTIVE+IMMUTABLE)){ 
 8000b88:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8000b8c:	6865      	ldr	r5, [r4, #4]
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f1ac 0804 	sub.w	r8, ip, #4
    int isupper=0, add_ind=EMPTY_IND;
 8000b94:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000b98:	4607      	mov	r7, r0
    for(j=0, disp=0;j<N_SIMPLE;j++){
 8000b9a:	4686      	mov	lr, r0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8000ba2:	e015      	b.n	8000bd0 <add_infeasible+0x60>
        else if(-(work->dlower[j]-Mu)<min_val){
 8000ba4:	69a1      	ldr	r1, [r4, #24]
 8000ba6:	4401      	add	r1, r0
 8000ba8:	ed91 7a00 	vldr	s14, [r1]
 8000bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bb0:	eef1 7a67 	vneg.f32	s15, s15
 8000bb4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbc:	d503      	bpl.n	8000bc6 <add_infeasible+0x56>
            min_val = -(work->dlower[j]-Mu);
 8000bbe:	eeb0 6a67 	vmov.f32	s12, s15
        else if(-(work->dlower[j]-Mu)<min_val){
 8000bc2:	461e      	mov	r6, r3
            add_ind = j; isupper = 0;
 8000bc4:	2700      	movs	r7, #0
    for(j=0, disp=0;j<N_SIMPLE;j++){
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	f100 0004 	add.w	r0, r0, #4
 8000bce:	d024      	beq.n	8000c1a <add_infeasible+0xaa>
        if(work->sense[j]&(ACTIVE+IMMUTABLE)){ 
 8000bd0:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8000bd4:	f011 0f05 	tst.w	r1, #5
 8000bd8:	f040 8090 	bne.w	8000cfc <add_infeasible+0x18c>
        if(work->Rinv==NULL){// Hessian is identify
 8000bdc:	69e1      	ldr	r1, [r4, #28]
 8000bde:	2900      	cmp	r1, #0
 8000be0:	f040 808f 	bne.w	8000d02 <add_infeasible+0x192>
            Mu=work->u[j]; 
 8000be4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000be6:	4401      	add	r1, r0
 8000be8:	edd1 7a00 	vldr	s15, [r1]
            disp+=NX-j;
 8000bec:	1ae9      	subs	r1, r5, r3
 8000bee:	448e      	add	lr, r1
        if((work->dupper[j]-Mu)<min_val){
 8000bf0:	6961      	ldr	r1, [r4, #20]
 8000bf2:	4401      	add	r1, r0
 8000bf4:	ed91 7a00 	vldr	s14, [r1]
 8000bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bfc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8000c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c04:	d5ce      	bpl.n	8000ba4 <add_infeasible+0x34>
 8000c06:	461e      	mov	r6, r3
    for(j=0, disp=0;j<N_SIMPLE;j++){
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4293      	cmp	r3, r2
            min_val = work->dupper[j]-Mu;
 8000c0c:	eeb0 6a47 	vmov.f32	s12, s14
            add_ind = j; isupper = 1;
 8000c10:	f04f 0701 	mov.w	r7, #1
    for(j=0, disp=0;j<N_SIMPLE;j++){
 8000c14:	f100 0004 	add.w	r0, r0, #4
 8000c18:	d1da      	bne.n	8000bd0 <add_infeasible+0x60>
    for(j=N_SIMPLE, disp=0;j<N_CONSTR;j++){
 8000c1a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8000c1e:	4590      	cmp	r8, r2
 8000c20:	dd47      	ble.n	8000cb2 <add_infeasible+0x142>
 8000c22:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
 8000c26:	3801      	subs	r0, #1
 8000c28:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e003      	b.n	8000c38 <add_infeasible+0xc8>
            disp+=NX;// Skip ahead in M
 8000c30:	442b      	add	r3, r5
    for(j=N_SIMPLE, disp=0;j<N_CONSTR;j++){
 8000c32:	3201      	adds	r2, #1
 8000c34:	4542      	cmp	r2, r8
 8000c36:	da3c      	bge.n	8000cb2 <add_infeasible+0x142>
        if(work->sense[j]&(ACTIVE+IMMUTABLE)){ 
 8000c38:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8000c3c:	f011 0f05 	tst.w	r1, #5
 8000c40:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8000c44:	d1f4      	bne.n	8000c30 <add_infeasible+0xc0>
        for(k=0,Mu=0;k<NX;k++) 
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	f340 8099 	ble.w	8000d7e <add_infeasible+0x20e>
            Mu+=work->M[disp++]*work->u[k];
 8000c4c:	6921      	ldr	r1, [r4, #16]
        for(k=0,Mu=0;k<NX;k++) 
 8000c4e:	eddf 7a55 	vldr	s15, [pc, #340]	; 8000da4 <add_infeasible+0x234>
 8000c52:	eb05 0a03 	add.w	sl, r5, r3
 8000c56:	eb01 098a 	add.w	r9, r1, sl, lsl #2
 8000c5a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000c5e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            Mu+=work->M[disp++]*work->u[k];
 8000c60:	ecf3 6a01 	vldmia	r3!, {s13}
 8000c64:	ecb1 7a01 	vldmia	r1!, {s14}
        for(k=0,Mu=0;k<NX;k++) 
 8000c68:	4599      	cmp	r9, r3
            Mu+=work->M[disp++]*work->u[k];
 8000c6a:	eee6 7a87 	vfma.f32	s15, s13, s14
        for(k=0,Mu=0;k<NX;k++) 
 8000c6e:	d1f7      	bne.n	8000c60 <add_infeasible+0xf0>
            Mu+=work->M[disp++]*work->u[k];
 8000c70:	4653      	mov	r3, sl
        if((work->dupper[j]-Mu)<min_val){
 8000c72:	6961      	ldr	r1, [r4, #20]
 8000c74:	4471      	add	r1, lr
 8000c76:	ed91 7a00 	vldr	s14, [r1]
 8000c7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c7e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8000c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c86:	d454      	bmi.n	8000d32 <add_infeasible+0x1c2>
        else if(-(work->dlower[j]-Mu)<min_val){
 8000c88:	69a1      	ldr	r1, [r4, #24]
 8000c8a:	4471      	add	r1, lr
 8000c8c:	ed91 7a00 	vldr	s14, [r1]
 8000c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c94:	eef1 7a67 	vneg.f32	s15, s15
 8000c98:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca0:	d5c7      	bpl.n	8000c32 <add_infeasible+0xc2>
 8000ca2:	4616      	mov	r6, r2
    for(j=N_SIMPLE, disp=0;j<N_CONSTR;j++){
 8000ca4:	3201      	adds	r2, #1
 8000ca6:	4542      	cmp	r2, r8
            min_val = -(work->dlower[j]-Mu);
 8000ca8:	eeb0 6a67 	vmov.f32	s12, s15
            add_ind = j; isupper = 0;
 8000cac:	f04f 0700 	mov.w	r7, #0
    for(j=N_SIMPLE, disp=0;j<N_CONSTR;j++){
 8000cb0:	dbc2      	blt.n	8000c38 <add_infeasible+0xc8>
    if(add_ind == EMPTY_IND) return 0;
 8000cb2:	1c73      	adds	r3, r6, #1
 8000cb4:	d066      	beq.n	8000d84 <add_infeasible+0x214>
        SET_UPPER(add_ind);
 8000cb6:	f85c 3026 	ldr.w	r3, [ip, r6, lsl #2]
    if(isupper)
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d13e      	bne.n	8000d3c <add_infeasible+0x1cc>
    swp_ptr=work->lam; work->lam = work->lam_star; work->lam_star=swp_ptr;
 8000cbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000cc0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    SET_ACTIVE(add_ind);
 8000cc2:	f043 0303 	orr.w	r3, r3, #3
    swp_ptr=work->lam; work->lam = work->lam_star; work->lam_star=swp_ptr;
 8000cc6:	e9c4 120d 	strd	r1, r2, [r4, #52]	; 0x34
    update_LDL_add(work, add_ind);
 8000cca:	4620      	mov	r0, r4
    SET_ACTIVE(add_ind);
 8000ccc:	f84c 3026 	str.w	r3, [ip, r6, lsl #2]
    update_LDL_add(work, add_ind);
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	f000 fcc5 	bl	8001660 <update_LDL_add>
    work->WS[work->n_active] = add_ind;
 8000cd6:	e9d4 3116 	ldrd	r3, r1, [r4, #88]	; 0x58
    work->lam[work->n_active] = lam;
 8000cda:	6b62      	ldr	r2, [r4, #52]	; 0x34
    work->WS[work->n_active] = add_ind;
 8000cdc:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
    work->lam[work->n_active] = lam;
 8000ce0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000ce2:	4931      	ldr	r1, [pc, #196]	; (8000da8 <add_infeasible+0x238>)
 8000ce4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    work->n_active++;
 8000ce8:	3301      	adds	r3, #1
    pivot_last(work);
 8000cea:	4620      	mov	r0, r4
    work->lam[work->n_active] = lam;
 8000cec:	6011      	str	r1, [r2, #0]
    return 1;
 8000cee:	2701      	movs	r7, #1
    work->n_active++;
 8000cf0:	65e3      	str	r3, [r4, #92]	; 0x5c
    pivot_last(work);
 8000cf2:	f7ff fded 	bl	80008d0 <pivot_last>
}
 8000cf6:	4638      	mov	r0, r7
 8000cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            disp+=NX-j;
 8000cfc:	1ae9      	subs	r1, r5, r3
 8000cfe:	448e      	add	lr, r1
            continue;
 8000d00:	e761      	b.n	8000bc6 <add_infeasible+0x56>
            for(k=j,Mu=0;k<NX;k++) // 
 8000d02:	429d      	cmp	r5, r3
 8000d04:	eddf 7a27 	vldr	s15, [pc, #156]	; 8000da4 <add_infeasible+0x234>
 8000d08:	f77f af72 	ble.w	8000bf0 <add_infeasible+0x80>
                Mu+=work->Rinv[disp++]*work->u[k];
 8000d0c:	f8d4 b03c 	ldr.w	fp, [r4, #60]	; 0x3c
 8000d10:	eb01 0a8e 	add.w	sl, r1, lr, lsl #2
 8000d14:	eb0b 0100 	add.w	r1, fp, r0
 8000d18:	44cb      	add	fp, r9
 8000d1a:	ecb1 7a01 	vldmia	r1!, {s14}
 8000d1e:	ecfa 6a01 	vldmia	sl!, {s13}
            for(k=j,Mu=0;k<NX;k++) // 
 8000d22:	458b      	cmp	fp, r1
                Mu+=work->Rinv[disp++]*work->u[k];
 8000d24:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(k=j,Mu=0;k<NX;k++) // 
 8000d28:	d1f7      	bne.n	8000d1a <add_infeasible+0x1aa>
                Mu+=work->Rinv[disp++]*work->u[k];
 8000d2a:	44ae      	add	lr, r5
 8000d2c:	ebae 0e03 	sub.w	lr, lr, r3
 8000d30:	e75e      	b.n	8000bf0 <add_infeasible+0x80>
            min_val = work->dupper[j]-Mu;
 8000d32:	eeb0 6a47 	vmov.f32	s12, s14
 8000d36:	4616      	mov	r6, r2
            add_ind = j; isupper = 1;
 8000d38:	2701      	movs	r7, #1
 8000d3a:	e77a      	b.n	8000c32 <add_infeasible+0xc2>
    swp_ptr=work->lam; work->lam = work->lam_star; work->lam_star=swp_ptr;
 8000d3c:	e9d4 210d 	ldrd	r2, r1, [r4, #52]	; 0x34
        SET_UPPER(add_ind);
 8000d40:	f023 0302 	bic.w	r3, r3, #2
    SET_ACTIVE(add_ind);
 8000d44:	f043 0301 	orr.w	r3, r3, #1
    swp_ptr=work->lam; work->lam = work->lam_star; work->lam_star=swp_ptr;
 8000d48:	e9c4 120d 	strd	r1, r2, [r4, #52]	; 0x34
    update_LDL_add(work, add_ind);
 8000d4c:	4620      	mov	r0, r4
    SET_ACTIVE(add_ind);
 8000d4e:	f84c 3026 	str.w	r3, [ip, r6, lsl #2]
    update_LDL_add(work, add_ind);
 8000d52:	4631      	mov	r1, r6
 8000d54:	f000 fc84 	bl	8001660 <update_LDL_add>
    work->WS[work->n_active] = add_ind;
 8000d58:	e9d4 3216 	ldrd	r3, r2, [r4, #88]	; 0x58
 8000d5c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    work->lam[work->n_active] = lam;
 8000d60:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d62:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000d64:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000d68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    work->n_active++;
 8000d6c:	3301      	adds	r3, #1
    work->lam[work->n_active] = lam;
 8000d6e:	6011      	str	r1, [r2, #0]
    pivot_last(work);
 8000d70:	4620      	mov	r0, r4
    work->n_active++;
 8000d72:	65e3      	str	r3, [r4, #92]	; 0x5c
    pivot_last(work);
 8000d74:	f7ff fdac 	bl	80008d0 <pivot_last>
}
 8000d78:	4638      	mov	r0, r7
 8000d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(k=0,Mu=0;k<NX;k++) 
 8000d7e:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000da4 <add_infeasible+0x234>
 8000d82:	e776      	b.n	8000c72 <add_infeasible+0x102>
    if(add_ind == EMPTY_IND) return 0;
 8000d84:	2700      	movs	r7, #0
}
 8000d86:	4638      	mov	r0, r7
 8000d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(j=N_SIMPLE, disp=0;j<N_CONSTR;j++){
 8000d8c:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8000d90:	4590      	cmp	r8, r2
 8000d92:	ddf7      	ble.n	8000d84 <add_infeasible+0x214>
        if(work->sense[j]&(ACTIVE+IMMUTABLE)){ 
 8000d94:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8000d98:	6845      	ldr	r5, [r0, #4]
    int isupper=0, add_ind=EMPTY_IND;
 8000d9a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000d9e:	2700      	movs	r7, #0
 8000da0:	e73f      	b.n	8000c22 <add_infeasible+0xb2>
 8000da2:	bf00      	nop
 8000da4:	00000000 	.word	0x00000000
 8000da8:	bf800000 	.word	0xbf800000

08000dac <activate_constraints>:

// Activate constrainte that are marked active in sense
int activate_constraints(DAQPWorkspace *work){
    //TODO prioritize inequalities?
    int i;
    for(i =0;i<N_CONSTR;i++){
 8000dac:	6881      	ldr	r1, [r0, #8]
 8000dae:	2900      	cmp	r1, #0
 8000db0:	dd5e      	ble.n	8000e70 <activate_constraints+0xc4>
int activate_constraints(DAQPWorkspace *work){
 8000db2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    work->lam[work->n_active] = lam;
 8000db6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8000e74 <activate_constraints+0xc8>
 8000dba:	4605      	mov	r5, r0
    for(i =0;i<N_CONSTR;i++){
 8000dbc:	2400      	movs	r4, #0
    work->lam[work->n_active] = lam;
 8000dbe:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 8000dc2:	e019      	b.n	8000df8 <activate_constraints+0x4c>
    SET_ACTIVE(add_ind);
 8000dc4:	f842 700c 	str.w	r7, [r2, ip]
    update_LDL_add(work, add_ind);
 8000dc8:	f000 fc4a 	bl	8001660 <update_LDL_add>
    work->WS[work->n_active] = add_ind;
 8000dcc:	e9d5 3116 	ldrd	r3, r1, [r5, #88]	; 0x58
    work->lam[work->n_active] = lam;
 8000dd0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    work->WS[work->n_active] = add_ind;
 8000dd2:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    work->lam[work->n_active] = lam;
 8000dd6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8000dd8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    work->n_active++;
 8000ddc:	3301      	adds	r3, #1
    work->lam[work->n_active] = lam;
 8000dde:	f8c2 8000 	str.w	r8, [r2]
    pivot_last(work);
 8000de2:	4628      	mov	r0, r5
    work->n_active++;
 8000de4:	65eb      	str	r3, [r5, #92]	; 0x5c
    pivot_last(work);
 8000de6:	f7ff fd73 	bl	80008d0 <pivot_last>
            else
                add_constraint(work,i, 1.0);
#endif
        }
        if(work->sing_ind != EMPTY_IND){
            for(;i<N_CONSTR;i++) SET_INACTIVE(i); // correct sense for unadded constraints
 8000dea:	68a9      	ldr	r1, [r5, #8]
        if(work->sing_ind != EMPTY_IND){
 8000dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000dee:	3301      	adds	r3, #1
 8000df0:	d126      	bne.n	8000e40 <activate_constraints+0x94>
    for(i =0;i<N_CONSTR;i++){
 8000df2:	3401      	adds	r4, #1
 8000df4:	428c      	cmp	r4, r1
 8000df6:	da38      	bge.n	8000e6a <activate_constraints+0xbe>
        if(IS_ACTIVE(i)){
 8000df8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000dfa:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8000dfe:	07d8      	lsls	r0, r3, #31
 8000e00:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000e04:	d5f2      	bpl.n	8000dec <activate_constraints+0x40>
    SET_ACTIVE(add_ind);
 8000e06:	f043 0701 	orr.w	r7, r3, #1
            if(IS_LOWER(i))
 8000e0a:	079b      	lsls	r3, r3, #30
    update_LDL_add(work, add_ind);
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	4628      	mov	r0, r5
            if(IS_LOWER(i))
 8000e10:	d4d8      	bmi.n	8000dc4 <activate_constraints+0x18>
    SET_ACTIVE(add_ind);
 8000e12:	f842 700c 	str.w	r7, [r2, ip]
    update_LDL_add(work, add_ind);
 8000e16:	f000 fc23 	bl	8001660 <update_LDL_add>
    work->WS[work->n_active] = add_ind;
 8000e1a:	e9d5 3116 	ldrd	r3, r1, [r5, #88]	; 0x58
    work->lam[work->n_active] = lam;
 8000e1e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    work->WS[work->n_active] = add_ind;
 8000e20:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    work->lam[work->n_active] = lam;
 8000e24:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8000e26:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    work->n_active++;
 8000e2a:	3301      	adds	r3, #1
    work->lam[work->n_active] = lam;
 8000e2c:	f8c2 9000 	str.w	r9, [r2]
    pivot_last(work);
 8000e30:	4628      	mov	r0, r5
    work->n_active++;
 8000e32:	65eb      	str	r3, [r5, #92]	; 0x5c
    pivot_last(work);
 8000e34:	f7ff fd4c 	bl	80008d0 <pivot_last>
        if(work->sing_ind != EMPTY_IND){
 8000e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
            for(;i<N_CONSTR;i++) SET_INACTIVE(i); // correct sense for unadded constraints
 8000e3a:	68a9      	ldr	r1, [r5, #8]
        if(work->sing_ind != EMPTY_IND){
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	d0d8      	beq.n	8000df2 <activate_constraints+0x46>
            for(;i<N_CONSTR;i++) SET_INACTIVE(i); // correct sense for unadded constraints
 8000e40:	428c      	cmp	r4, r1
 8000e42:	da0e      	bge.n	8000e62 <activate_constraints+0xb6>
 8000e44:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e46:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000e50:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8000e54:	f023 0301 	bic.w	r3, r3, #1
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	68ab      	ldr	r3, [r5, #8]
 8000e5c:	3401      	adds	r4, #1
 8000e5e:	42a3      	cmp	r3, r4
 8000e60:	dcf6      	bgt.n	8000e50 <activate_constraints+0xa4>
            return EXIT_OVERDETERMINED_INITIAL;
 8000e62:	f06f 0005 	mvn.w	r0, #5
        }
    }
    return 1;
}
 8000e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 1;
 8000e6a:	2001      	movs	r0, #1
}
 8000e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 1;
 8000e70:	2001      	movs	r0, #1
}
 8000e72:	4770      	bx	lr
 8000e74:	bf800000 	.word	0xbf800000

08000e78 <get_branch_id>:
}

int get_branch_id(DAQPWorkspace* work){
    int i,disp;
    int branch_id = EMPTY_IND;
    for(i=0; i < work->bnb->nb; i++){
 8000e78:	6f03      	ldr	r3, [r0, #112]	; 0x70
int get_branch_id(DAQPWorkspace* work){
 8000e7a:	b470      	push	{r4, r5, r6}
    for(i=0; i < work->bnb->nb; i++){
 8000e7c:	685d      	ldr	r5, [r3, #4]
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	dd62      	ble.n	8000f48 <get_branch_id+0xd0>
 8000e82:	681b      	ldr	r3, [r3, #0]
        // Branch on first inactive constraint 
        if(IS_ACTIVE(work->bnb->bin_ids[i])) continue;
 8000e84:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000e86:	3b04      	subs	r3, #4
    for(i=0; i < work->bnb->nb; i++){
 8000e88:	f04f 0c00 	mov.w	ip, #0
        if(IS_ACTIVE(work->bnb->bin_ids[i])) continue;
 8000e8c:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8000e90:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8000e94:	07e4      	lsls	r4, r4, #31
 8000e96:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8000e9a:	d451      	bmi.n	8000f40 <get_branch_id+0xc8>
        branch_id = work->bnb->bin_ids[i];
        break;
    }

    if(branch_id == EMPTY_IND) return EMPTY_IND; // Nothing to branch over (=>integer feasible)
 8000e9c:	1c4b      	adds	r3, r1, #1
 8000e9e:	d035      	beq.n	8000f0c <get_branch_id+0x94>

    // Determine if upper or lower child should be processed first 
    // by computing whether the upper or lower bound is closer to be activated
    c_float diff = 0.5*(work->dupper[branch_id]+work->dlower[branch_id]);
 8000ea0:	e9d0 4305 	ldrd	r4, r3, [r0, #20]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4414      	add	r4, r2
 8000ea8:	ed93 7a00 	vldr	s14, [r3]
 8000eac:	edd4 7a00 	vldr	s15, [r4]
    if(IS_SIMPLE(branch_id)){//Simple bound
 8000eb0:	68c3      	ldr	r3, [r0, #12]
    c_float diff = 0.5*(work->dupper[branch_id]+work->dlower[branch_id]);
 8000eb2:	ee77 7a87 	vadd.f32	s15, s15, s14
    if(IS_SIMPLE(branch_id)){//Simple bound
 8000eb6:	4299      	cmp	r1, r3
    c_float diff = 0.5*(work->dupper[branch_id]+work->dlower[branch_id]);
 8000eb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
    if(IS_SIMPLE(branch_id)){//Simple bound
 8000ec0:	da27      	bge.n	8000f12 <get_branch_id+0x9a>
        if(work->Rinv==NULL) diff-=work->u[branch_id]; //Hessian is identify 
 8000ec2:	69c3      	ldr	r3, [r0, #28]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d042      	beq.n	8000f4e <get_branch_id+0xd6>
        else{
            for(i=branch_id,disp=branch_id+R_OFFSET(branch_id,NX);i<NX;i++) // 
 8000ec8:	6844      	ldr	r4, [r0, #4]
 8000eca:	ebc1 0c44 	rsb	ip, r1, r4, lsl #1
 8000ece:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8000ed2:	fb01 fc0c 	mul.w	ip, r1, ip
 8000ed6:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 8000eda:	42a1      	cmp	r1, r4
 8000edc:	eb01 0c6c 	add.w	ip, r1, ip, asr #1
 8000ee0:	da0d      	bge.n	8000efe <get_branch_id+0x86>
                diff-=work->Rinv[disp++]*work->u[i];
 8000ee2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000ee4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8000ee8:	1883      	adds	r3, r0, r2
 8000eea:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8000eee:	ecb3 7a01 	vldmia	r3!, {s14}
 8000ef2:	ecfc 6a01 	vldmia	ip!, {s13}
            for(i=branch_id,disp=branch_id+R_OFFSET(branch_id,NX);i<NX;i++) // 
 8000ef6:	429a      	cmp	r2, r3
                diff-=work->Rinv[disp++]*work->u[i];
 8000ef8:	eee6 7ac7 	vfms.f32	s15, s13, s14
            for(i=branch_id,disp=branch_id+R_OFFSET(branch_id,NX);i<NX;i++) // 
 8000efc:	d1f7      	bne.n	8000eee <get_branch_id+0x76>
    }
    else{//General bound
        for(i=0,disp=NX*(branch_id-N_SIMPLE);i<NX;i++) 
            diff-=work->M[disp++]*work->u[i];
    }
    branch_id = diff<0 ? branch_id : ADD_LOWER_FLAG(branch_id);
 8000efe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f06:	d401      	bmi.n	8000f0c <get_branch_id+0x94>
 8000f08:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    return branch_id;
}
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	bc70      	pop	{r4, r5, r6}
 8000f10:	4770      	bx	lr
        for(i=0,disp=NX*(branch_id-N_SIMPLE);i<NX;i++) 
 8000f12:	6842      	ldr	r2, [r0, #4]
 8000f14:	1acb      	subs	r3, r1, r3
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	ddef      	ble.n	8000efe <get_branch_id+0x86>
            diff-=work->M[disp++]*work->u[i];
 8000f1e:	6904      	ldr	r4, [r0, #16]
 8000f20:	eb02 0c03 	add.w	ip, r2, r3
 8000f24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000f26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000f2a:	eb04 008c 	add.w	r0, r4, ip, lsl #2
 8000f2e:	ecf3 6a01 	vldmia	r3!, {s13}
 8000f32:	ecb2 7a01 	vldmia	r2!, {s14}
        for(i=0,disp=NX*(branch_id-N_SIMPLE);i<NX;i++) 
 8000f36:	4298      	cmp	r0, r3
            diff-=work->M[disp++]*work->u[i];
 8000f38:	eee6 7ac7 	vfms.f32	s15, s13, s14
        for(i=0,disp=NX*(branch_id-N_SIMPLE);i<NX;i++) 
 8000f3c:	d1f7      	bne.n	8000f2e <get_branch_id+0xb6>
 8000f3e:	e7de      	b.n	8000efe <get_branch_id+0x86>
    for(i=0; i < work->bnb->nb; i++){
 8000f40:	f10c 0c01 	add.w	ip, ip, #1
 8000f44:	45ac      	cmp	ip, r5
 8000f46:	d1a1      	bne.n	8000e8c <get_branch_id+0x14>
    if(branch_id == EMPTY_IND) return EMPTY_IND; // Nothing to branch over (=>integer feasible)
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4c:	e7de      	b.n	8000f0c <get_branch_id+0x94>
        if(work->Rinv==NULL) diff-=work->u[branch_id]; //Hessian is identify 
 8000f4e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000f50:	4413      	add	r3, r2
 8000f52:	ed93 7a00 	vldr	s14, [r3]
 8000f56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f5a:	e7d0      	b.n	8000efe <get_branch_id+0x86>

08000f5c <node_cleanup_workspace>:
    work->bnb->n_nodes+=2;
}

void node_cleanup_workspace(int n_clean, DAQPWorkspace* work){
    // Cleanup sense 
    for(int i=n_clean; i<work->n_active; i++)
 8000f5c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8000f5e:	4298      	cmp	r0, r3
 8000f60:	da27      	bge.n	8000fb2 <node_cleanup_workspace+0x56>
 8000f62:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8000f64:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
void node_cleanup_workspace(int n_clean, DAQPWorkspace* work){
 8000f68:	b4f0      	push	{r4, r5, r6, r7}
 8000f6a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
        work->sense[work->WS[i]]&= IS_BINARY(work->WS[i]) ? ~(ACTIVE+IMMUTABLE): ~ACTIVE;
 8000f6e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8000f70:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8000f74:	4602      	mov	r2, r0
 8000f76:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 8000f7a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8000f7e:	f023 0701 	bic.w	r7, r3, #1
 8000f82:	f023 0605 	bic.w	r6, r3, #5
 8000f86:	06db      	lsls	r3, r3, #27
 8000f88:	d40c      	bmi.n	8000fa4 <node_cleanup_workspace+0x48>
 8000f8a:	f845 7024 	str.w	r7, [r5, r4, lsl #2]
    for(int i=n_clean; i<work->n_active; i++)
 8000f8e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8000f90:	3201      	adds	r2, #1
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dbef      	blt.n	8000f76 <node_cleanup_workspace+0x1a>
    // Reset workspace
    work->sing_ind=EMPTY_IND;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    work->n_active=n_clean;
    work->reuse_ind=n_clean; 
}
 8000f9a:	bcf0      	pop	{r4, r5, r6, r7}
    work->sing_ind=EMPTY_IND;
 8000f9c:	664b      	str	r3, [r1, #100]	; 0x64
    work->n_active=n_clean;
 8000f9e:	65c8      	str	r0, [r1, #92]	; 0x5c
    work->reuse_ind=n_clean; 
 8000fa0:	6548      	str	r0, [r1, #84]	; 0x54
}
 8000fa2:	4770      	bx	lr
        work->sense[work->WS[i]]&= IS_BINARY(work->WS[i]) ? ~(ACTIVE+IMMUTABLE): ~ACTIVE;
 8000fa4:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
    for(int i=n_clean; i<work->n_active; i++)
 8000fa8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8000faa:	3201      	adds	r2, #1
 8000fac:	4293      	cmp	r3, r2
 8000fae:	dce2      	bgt.n	8000f76 <node_cleanup_workspace+0x1a>
 8000fb0:	e7f1      	b.n	8000f96 <node_cleanup_workspace+0x3a>
    work->sing_ind=EMPTY_IND;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb6:	664b      	str	r3, [r1, #100]	; 0x64
    work->n_active=n_clean;
 8000fb8:	65c8      	str	r0, [r1, #92]	; 0x5c
    work->reuse_ind=n_clean; 
 8000fba:	6548      	str	r0, [r1, #84]	; 0x54
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <warmstart_node>:


void warmstart_node(DAQPNode* node, DAQPWorkspace* work){
    int i;
    // Add fixed constraints
    for(i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){ 
 8000fc0:	6f0a      	ldr	r2, [r1, #112]	; 0x70
void warmstart_node(DAQPNode* node, DAQPWorkspace* work){
 8000fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){ 
 8000fc6:	6893      	ldr	r3, [r2, #8]
 8000fc8:	69d5      	ldr	r5, [r2, #28]
void warmstart_node(DAQPNode* node, DAQPWorkspace* work){
 8000fca:	460c      	mov	r4, r1
    for(i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){ 
 8000fcc:	6841      	ldr	r1, [r0, #4]
 8000fce:	1aed      	subs	r5, r5, r3
 8000fd0:	428d      	cmp	r5, r1
void warmstart_node(DAQPNode* node, DAQPWorkspace* work){
 8000fd2:	4606      	mov	r6, r0
    for(i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){ 
 8000fd4:	dc34      	bgt.n	8001040 <warmstart_node+0x80>
        add_upper_lower(work->bnb->fixed_ids[i],work);
 8000fd6:	6a17      	ldr	r7, [r2, #32]

int add_upper_lower(const int add_id, DAQPWorkspace* work){
    int true_add_id = REMOVE_LOWER_FLAG(add_id);
    // Setup new binary constraint
    if(EXTRACT_LOWER_FLAG(add_id)){
        SET_LOWER(true_add_id);
 8000fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fda:	e018      	b.n	800100e <warmstart_node+0x4e>
 8000fdc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8000fe0:	f047 0702 	orr.w	r7, r7, #2
 8000fe4:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
        add_constraint(work,true_add_id,-1.0);
 8000fe8:	f7ff fd66 	bl	8000ab8 <add_constraint>
        SET_IMMUTABLE(REMOVE_LOWER_FLAG(work->bnb->fixed_ids[i]));
 8000fec:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8000fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ff0:	6a17      	ldr	r7, [r2, #32]
 8000ff2:	f857 1008 	ldr.w	r1, [r7, r8]
 8000ff6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    for(i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){ 
 8000ffa:	3501      	adds	r5, #1
        SET_IMMUTABLE(REMOVE_LOWER_FLAG(work->bnb->fixed_ids[i]));
 8000ffc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001000:	f040 0004 	orr.w	r0, r0, #4
 8001004:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    for(i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){ 
 8001008:	6871      	ldr	r1, [r6, #4]
 800100a:	42a9      	cmp	r1, r5
 800100c:	db17      	blt.n	800103e <warmstart_node+0x7e>
        add_upper_lower(work->bnb->fixed_ids[i],work);
 800100e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
    int true_add_id = REMOVE_LOWER_FLAG(add_id);
 8001012:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
    if(EXTRACT_LOWER_FLAG(add_id)){
 8001016:	0bc9      	lsrs	r1, r1, #15
 8001018:	ea4f 0885 	mov.w	r8, r5, lsl #2
        add_constraint(work,true_add_id,-1.0);
 800101c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001020:	4611      	mov	r1, r2
 8001022:	4620      	mov	r0, r4
    if(EXTRACT_LOWER_FLAG(add_id)){
 8001024:	d1da      	bne.n	8000fdc <warmstart_node+0x1c>
    }
    else{
        SET_UPPER(true_add_id);
 8001026:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800102a:	f021 0102 	bic.w	r1, r1, #2
 800102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        add_constraint(work,true_add_id,1.0);
 8001032:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001036:	4611      	mov	r1, r2
 8001038:	f7ff fd3e 	bl	8000ab8 <add_constraint>
 800103c:	e7d6      	b.n	8000fec <warmstart_node+0x2c>
    work->bnb->n_clean = work->bnb->neq+node->depth; 
 800103e:	6893      	ldr	r3, [r2, #8]
    for(i=node->WS_start; i < node->WS_end; i++){
 8001040:	68b5      	ldr	r5, [r6, #8]
    work->bnb->n_clean = work->bnb->neq+node->depth; 
 8001042:	4419      	add	r1, r3
    for(i=node->WS_start; i < node->WS_end; i++){
 8001044:	68f3      	ldr	r3, [r6, #12]
    work->bnb->n_clean = work->bnb->neq+node->depth; 
 8001046:	61d1      	str	r1, [r2, #28]
    for(i=node->WS_start; i < node->WS_end; i++){
 8001048:	429d      	cmp	r5, r3
 800104a:	db12      	blt.n	8001072 <warmstart_node+0xb2>
 800104c:	e03f      	b.n	80010ce <warmstart_node+0x10e>
        SET_LOWER(true_add_id);
 800104e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8001050:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8001054:	f042 0202 	orr.w	r2, r2, #2
 8001058:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
        add_constraint(work,true_add_id,-1.0);
 800105c:	f7ff fd2c 	bl	8000ab8 <add_constraint>
        if(work->sing_ind != EMPTY_IND) {
 8001060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001062:	3301      	adds	r3, #1
    for(i=node->WS_start; i < node->WS_end; i++){
 8001064:	f105 0501 	add.w	r5, r5, #1
        if(work->sing_ind != EMPTY_IND) {
 8001068:	d11f      	bne.n	80010aa <warmstart_node+0xea>
    for(i=node->WS_start; i < node->WS_end; i++){
 800106a:	68f3      	ldr	r3, [r6, #12]
        add_upper_lower(work->bnb->tree_WS[i],work);
 800106c:	6f22      	ldr	r2, [r4, #112]	; 0x70
    for(i=node->WS_start; i < node->WS_end; i++){
 800106e:	42ab      	cmp	r3, r5
 8001070:	dd30      	ble.n	80010d4 <warmstart_node+0x114>
        add_upper_lower(work->bnb->tree_WS[i],work);
 8001072:	6953      	ldr	r3, [r2, #20]
 8001074:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    int true_add_id = REMOVE_LOWER_FLAG(add_id);
 8001078:	f422 3380 	bic.w	r3, r2, #65536	; 0x10000
    if(EXTRACT_LOWER_FLAG(add_id)){
 800107c:	0bd2      	lsrs	r2, r2, #15
        add_constraint(work,true_add_id,-1.0);
 800107e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001082:	4620      	mov	r0, r4
 8001084:	4619      	mov	r1, r3
    if(EXTRACT_LOWER_FLAG(add_id)){
 8001086:	d1e2      	bne.n	800104e <warmstart_node+0x8e>
        SET_UPPER(true_add_id);
 8001088:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800108a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800108e:	f022 0202 	bic.w	r2, r2, #2
 8001092:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        add_constraint(work,true_add_id,1.0);
 8001096:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff fd0c 	bl	8000ab8 <add_constraint>
        if(work->sing_ind != EMPTY_IND) {
 80010a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010a2:	3301      	adds	r3, #1
    for(i=node->WS_start; i < node->WS_end; i++){
 80010a4:	f105 0501 	add.w	r5, r5, #1
        if(work->sing_ind != EMPTY_IND) {
 80010a8:	d0df      	beq.n	800106a <warmstart_node+0xaa>
            SET_INACTIVE(work->WS[work->n_active]);
 80010aa:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
            work->n_active--;
 80010ae:	3b01      	subs	r3, #1
 80010b0:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_INACTIVE(work->WS[work->n_active]);
 80010b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80010b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            work->sing_ind = EMPTY_IND;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    work->bnb->nWS = node->WS_start; // always move up tree after warmstart 
 80010c8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80010ca:	68b5      	ldr	r5, [r6, #8]
            work->sing_ind = EMPTY_IND;
 80010cc:	6663      	str	r3, [r4, #100]	; 0x64
    work->bnb->nWS = node->WS_start; // always move up tree after warmstart 
 80010ce:	6195      	str	r5, [r2, #24]
}
 80010d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    work->bnb->nWS = node->WS_start; // always move up tree after warmstart 
 80010d4:	68b5      	ldr	r5, [r6, #8]
 80010d6:	6195      	str	r5, [r2, #24]
}
 80010d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010dc <process_node>:
    work->bnb->nodecount+=1;
 80010dc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
int process_node(DAQPNode* node, DAQPWorkspace* work){
 80010de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    work->bnb->nodecount+=1;
 80010e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
int process_node(DAQPNode* node, DAQPWorkspace* work){
 80010e4:	460c      	mov	r4, r1
    if(node->depth >=0){
 80010e6:	6841      	ldr	r1, [r0, #4]
    work->bnb->nodecount+=1;
 80010e8:	3201      	adds	r2, #1
    if(node->depth >=0){
 80010ea:	2900      	cmp	r1, #0
int process_node(DAQPNode* node, DAQPWorkspace* work){
 80010ec:	4606      	mov	r6, r0
    work->bnb->nodecount+=1;
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
    if(node->depth >=0){
 80010f0:	db39      	blt.n	8001166 <process_node+0x8a>
        work->bnb->fixed_ids[node->depth] = node->bin_id;
 80010f2:	6a1a      	ldr	r2, [r3, #32]
 80010f4:	6800      	ldr	r0, [r0, #0]
 80010f6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        if(work->bnb->n_nodes==0 || (node-1)->depth!=node->depth){ 
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	d03e      	beq.n	800117e <process_node+0xa2>
 8001100:	6872      	ldr	r2, [r6, #4]
 8001102:	f856 1c0c 	ldr.w	r1, [r6, #-12]
 8001106:	4291      	cmp	r1, r2
 8001108:	f000 80b0 	beq.w	800126c <process_node+0x190>
            work->bnb->n_clean += (node->depth-(node+1)->depth);
 800110c:	6971      	ldr	r1, [r6, #20]
 800110e:	eba2 0e01 	sub.w	lr, r2, r1
 8001112:	69da      	ldr	r2, [r3, #28]
 8001114:	4496      	add	lr, r2
    for(int i=n_clean; i<work->n_active; i++)
 8001116:	6de2      	ldr	r2, [r4, #92]	; 0x5c
            work->bnb->n_clean += (node->depth-(node+1)->depth);
 8001118:	f8c3 e01c 	str.w	lr, [r3, #28]
    for(int i=n_clean; i<work->n_active; i++)
 800111c:	4596      	cmp	lr, r2
 800111e:	da17      	bge.n	8001150 <process_node+0x74>
 8001120:	6da0      	ldr	r0, [r4, #88]	; 0x58
        work->sense[work->WS[i]]&= IS_BINARY(work->WS[i]) ? ~(ACTIVE+IMMUTABLE): ~ACTIVE;
 8001122:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001124:	f10e 4380 	add.w	r3, lr, #1073741824	; 0x40000000
 8001128:	3b01      	subs	r3, #1
 800112a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800112e:	4672      	mov	r2, lr
 8001130:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8001134:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 8001138:	f023 0c05 	bic.w	ip, r3, #5
 800113c:	f023 0701 	bic.w	r7, r3, #1
 8001140:	06db      	lsls	r3, r3, #27
 8001142:	d51e      	bpl.n	8001182 <process_node+0xa6>
 8001144:	f845 c021 	str.w	ip, [r5, r1, lsl #2]
    for(int i=n_clean; i<work->n_active; i++)
 8001148:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800114a:	3201      	adds	r2, #1
 800114c:	429a      	cmp	r2, r3
 800114e:	dbef      	blt.n	8001130 <process_node+0x54>
    work->sing_ind=EMPTY_IND;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001154:	6663      	str	r3, [r4, #100]	; 0x64
    work->n_active=n_clean;
 8001156:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
    work->reuse_ind=n_clean; 
 800115a:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
            warmstart_node(node,work);
 800115e:	4621      	mov	r1, r4
 8001160:	4630      	mov	r0, r6
 8001162:	f7ff ff2d 	bl	8000fc0 <warmstart_node>
    exitflag = daqp_ldp(work);
 8001166:	4620      	mov	r0, r4
 8001168:	f000 f976 	bl	8001458 <daqp_ldp>
    work->bnb->itercount += work->iterations;
 800116c:	6f27      	ldr	r7, [r4, #112]	; 0x70
 800116e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	4413      	add	r3, r2
    if(exitflag == EXIT_CYCLE){// Try to repair (cold start)
 8001174:	1c82      	adds	r2, r0, #2
    work->bnb->itercount += work->iterations;
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
    if(exitflag == EXIT_CYCLE){// Try to repair (cold start)
 8001178:	d00a      	beq.n	8001190 <process_node+0xb4>
}
 800117a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(work->bnb->n_nodes==0 || (node-1)->depth!=node->depth){ 
 800117e:	6872      	ldr	r2, [r6, #4]
 8001180:	e7c4      	b.n	800110c <process_node+0x30>
        work->sense[work->WS[i]]&= IS_BINARY(work->WS[i]) ? ~(ACTIVE+IMMUTABLE): ~ACTIVE;
 8001182:	f845 7021 	str.w	r7, [r5, r1, lsl #2]
    for(int i=n_clean; i<work->n_active; i++)
 8001186:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001188:	3201      	adds	r2, #1
 800118a:	4293      	cmp	r3, r2
 800118c:	dcd0      	bgt.n	8001130 <process_node+0x54>
 800118e:	e7df      	b.n	8001150 <process_node+0x74>
        node_cleanup_workspace(work->bnb->n_clean,work);
 8001190:	69fd      	ldr	r5, [r7, #28]
    for(int i=n_clean; i<work->n_active; i++)
 8001192:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001194:	429d      	cmp	r5, r3
 8001196:	da17      	bge.n	80011c8 <process_node+0xec>
 8001198:	6da1      	ldr	r1, [r4, #88]	; 0x58
        work->sense[work->WS[i]]&= IS_BINARY(work->WS[i]) ? ~(ACTIVE+IMMUTABLE): ~ACTIVE;
 800119a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800119c:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80011a0:	3b01      	subs	r3, #1
 80011a2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80011a6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80011aa:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80011ae:	f023 0e05 	bic.w	lr, r3, #5
 80011b2:	f023 0c01 	bic.w	ip, r3, #1
 80011b6:	06db      	lsls	r3, r3, #27
 80011b8:	d544      	bpl.n	8001244 <process_node+0x168>
 80011ba:	f840 e022 	str.w	lr, [r0, r2, lsl #2]
    for(int i=n_clean; i<work->n_active; i++)
 80011be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011c0:	3501      	adds	r5, #1
 80011c2:	42ab      	cmp	r3, r5
 80011c4:	dcef      	bgt.n	80011a6 <process_node+0xca>
        work->n_active=work->bnb->n_clean;
 80011c6:	69fd      	ldr	r5, [r7, #28]
        for(int i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){
 80011c8:	6872      	ldr	r2, [r6, #4]
    work->sing_ind=EMPTY_IND;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ce:	6663      	str	r3, [r4, #100]	; 0x64
        for(int i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){
 80011d0:	68bb      	ldr	r3, [r7, #8]
        work->n_active=work->bnb->n_clean;
 80011d2:	65e5      	str	r5, [r4, #92]	; 0x5c
        work->reuse_ind=work->bnb->n_clean;
 80011d4:	6565      	str	r5, [r4, #84]	; 0x54
        for(int i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){
 80011d6:	1aed      	subs	r5, r5, r3
 80011d8:	4295      	cmp	r5, r2
 80011da:	dc3b      	bgt.n	8001254 <process_node+0x178>
            add_upper_lower(work->bnb->fixed_ids[i],work);
 80011dc:	6a38      	ldr	r0, [r7, #32]
        SET_LOWER(true_add_id);
 80011de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011e0:	e018      	b.n	8001214 <process_node+0x138>
 80011e2:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80011e6:	f047 0702 	orr.w	r7, r7, #2
 80011ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
        add_constraint(work,true_add_id,-1.0);
 80011ee:	f7ff fc63 	bl	8000ab8 <add_constraint>
            SET_IMMUTABLE(REMOVE_LOWER_FLAG(work->bnb->fixed_ids[i]));
 80011f2:	6f27      	ldr	r7, [r4, #112]	; 0x70
 80011f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f6:	6a38      	ldr	r0, [r7, #32]
 80011f8:	f850 2008 	ldr.w	r2, [r0, r8]
 80011fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
        for(int i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){
 8001200:	3501      	adds	r5, #1
            SET_IMMUTABLE(REMOVE_LOWER_FLAG(work->bnb->fixed_ids[i]));
 8001202:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001206:	f041 0104 	orr.w	r1, r1, #4
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(int i=work->bnb->n_clean - work->bnb->neq; i< node->depth+1;i++){
 800120e:	6872      	ldr	r2, [r6, #4]
 8001210:	42aa      	cmp	r2, r5
 8001212:	db1e      	blt.n	8001252 <process_node+0x176>
            add_upper_lower(work->bnb->fixed_ids[i],work);
 8001214:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    int true_add_id = REMOVE_LOWER_FLAG(add_id);
 8001218:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
    if(EXTRACT_LOWER_FLAG(add_id)){
 800121c:	0bc9      	lsrs	r1, r1, #15
 800121e:	ea4f 0885 	mov.w	r8, r5, lsl #2
        add_constraint(work,true_add_id,-1.0);
 8001222:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001226:	4611      	mov	r1, r2
 8001228:	4620      	mov	r0, r4
    if(EXTRACT_LOWER_FLAG(add_id)){
 800122a:	d1da      	bne.n	80011e2 <process_node+0x106>
        SET_UPPER(true_add_id);
 800122c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001230:	f021 0102 	bic.w	r1, r1, #2
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        add_constraint(work,true_add_id,1.0);
 8001238:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800123c:	4611      	mov	r1, r2
 800123e:	f7ff fc3b 	bl	8000ab8 <add_constraint>
 8001242:	e7d6      	b.n	80011f2 <process_node+0x116>
        work->sense[work->WS[i]]&= IS_BINARY(work->WS[i]) ? ~(ACTIVE+IMMUTABLE): ~ACTIVE;
 8001244:	f840 c022 	str.w	ip, [r0, r2, lsl #2]
    for(int i=n_clean; i<work->n_active; i++)
 8001248:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800124a:	3501      	adds	r5, #1
 800124c:	42ab      	cmp	r3, r5
 800124e:	dcaa      	bgt.n	80011a6 <process_node+0xca>
 8001250:	e7b9      	b.n	80011c6 <process_node+0xea>
        work->bnb->n_clean = work->bnb->neq+node->depth;
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	441a      	add	r2, r3
 8001256:	61fa      	str	r2, [r7, #28]
        exitflag = daqp_ldp(work);
 8001258:	4620      	mov	r0, r4
 800125a:	f000 f8fd 	bl	8001458 <daqp_ldp>
        work->bnb->itercount += work->iterations;
 800125e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001260:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001262:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001264:	440b      	add	r3, r1
 8001266:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            add_upper_lower(node->bin_id,work);
 800126c:	6833      	ldr	r3, [r6, #0]
        SET_LOWER(true_add_id);
 800126e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    int true_add_id = REMOVE_LOWER_FLAG(add_id);
 8001270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
    if(EXTRACT_LOWER_FLAG(add_id)){
 8001274:	0bdb      	lsrs	r3, r3, #15
 8001276:	d115      	bne.n	80012a4 <process_node+0x1c8>
        SET_UPPER(true_add_id);
 8001278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800127c:	f023 0302 	bic.w	r3, r3, #2
 8001280:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        add_constraint(work,true_add_id,1.0);
 8001284:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001288:	4620      	mov	r0, r4
 800128a:	f7ff fc15 	bl	8000ab8 <add_constraint>
            work->sense[REMOVE_LOWER_FLAG(node->bin_id)] |= IMMUTABLE; // Make equality
 800128e:	6833      	ldr	r3, [r6, #0]
 8001290:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001296:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800129a:	f042 0204 	orr.w	r2, r2, #4
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80012a2:	e760      	b.n	8001166 <process_node+0x8a>
        SET_LOWER(true_add_id);
 80012a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        add_constraint(work,true_add_id,-1.0);
 80012b0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80012b4:	4620      	mov	r0, r4
 80012b6:	f7ff fbff 	bl	8000ab8 <add_constraint>
 80012ba:	e7e8      	b.n	800128e <process_node+0x1b2>

080012bc <daqp_bnb>:
    work->bnb->neq = work->n_active; 
 80012bc:	e9d0 211b 	ldrd	r2, r1, [r0, #108]	; 0x6c
int daqp_bnb(DAQPWorkspace* work){
 80012c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c_float eps_r = 1/(1+work->settings->rel_subopt);
 80012c4:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
    work->settings->fval_bound = (fval_bound0 - work->settings->abs_subopt)*eps_r;
 80012c8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
    c_float eps_r = 1/(1+work->settings->rel_subopt);
 80012cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012d0:	ee37 7a26 	vadd.f32	s14, s14, s13
int daqp_bnb(DAQPWorkspace* work){
 80012d4:	ed2d 8b02 	vpush	{d8}
    c_float eps_r = 1/(1+work->settings->rel_subopt);
 80012d8:	ee86 8a87 	vdiv.f32	s16, s13, s14
int daqp_bnb(DAQPWorkspace* work){
 80012dc:	b083      	sub	sp, #12
 80012de:	4681      	mov	r9, r0
    work->bnb->neq = work->n_active; 
 80012e0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    work->bnb->itercount=0;
 80012e2:	2300      	movs	r3, #0
    c_float *swp_ptr = NULL;
 80012e4:	9301      	str	r3, [sp, #4]
    work->bnb->n_nodes=1;
 80012e6:	2501      	movs	r5, #1
    c_float fval_bound0 = work->settings->fval_bound;
 80012e8:	edd2 8a07 	vldr	s17, [r2, #28]
    work->settings->fval_bound = (fval_bound0 - work->settings->abs_subopt)*eps_r;
 80012ec:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80012f0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80012f4:	edc2 7a07 	vstr	s15, [r2, #28]
    work->bnb->tree[0].depth=-1;
 80012f8:	68ca      	ldr	r2, [r1, #12]
    work->bnb->neq = work->n_active; 
 80012fa:	6088      	str	r0, [r1, #8]
    work->bnb->nodecount=0;
 80012fc:	e9c1 3309 	strd	r3, r3, [r1, #36]	; 0x24
    work->bnb->tree[0].WS_end=0;
 8001300:	e9c2 3302 	strd	r3, r3, [r2, #8]
    work->bnb->tree[0].bin_id=0;
 8001304:	6013      	str	r3, [r2, #0]
    work->bnb->tree[0].depth=-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800130a:	6053      	str	r3, [r2, #4]
    work->bnb->n_nodes=1;
 800130c:	610d      	str	r5, [r1, #16]
    work->bnb->n_clean=work->bnb->neq;
 800130e:	61c8      	str	r0, [r1, #28]
    while( work->bnb->n_nodes > 0 ){
 8001310:	2d00      	cmp	r5, #0
 8001312:	dd30      	ble.n	8001376 <daqp_bnb+0xba>
        node = work->bnb->tree+(--work->bnb->n_nodes);
 8001314:	68cf      	ldr	r7, [r1, #12]
 8001316:	3d01      	subs	r5, #1
 8001318:	eb07 1805 	add.w	r8, r7, r5, lsl #4
 800131c:	012b      	lsls	r3, r5, #4
 800131e:	610d      	str	r5, [r1, #16]
        exitflag = process_node(node,work); // Solve relaxation
 8001320:	4640      	mov	r0, r8
 8001322:	4649      	mov	r1, r9
        node = work->bnb->tree+(--work->bnb->n_nodes);
 8001324:	9300      	str	r3, [sp, #0]
        exitflag = process_node(node,work); // Solve relaxation
 8001326:	f7ff fed9 	bl	80010dc <process_node>
        if(exitflag==EXIT_INFEASIBLE) continue; // Dominance cut
 800132a:	1c43      	adds	r3, r0, #1
 800132c:	f000 808a 	beq.w	8001444 <daqp_bnb+0x188>
        if(exitflag<0) return exitflag; // Inner solver failed => abort
 8001330:	2800      	cmp	r0, #0
 8001332:	db3d      	blt.n	80013b0 <daqp_bnb+0xf4>
        branch_id = get_branch_id(work); 
 8001334:	4648      	mov	r0, r9
 8001336:	f7ff fd9f 	bl	8000e78 <get_branch_id>
        if(branch_id==-1){// Nothing to branch over => integer feasible
 800133a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
        branch_id = get_branch_id(work); 
 800133e:	4686      	mov	lr, r0
        if(branch_id==-1){// Nothing to branch over => integer feasible
 8001340:	d13b      	bne.n	80013ba <daqp_bnb+0xfe>
            work->settings->fval_bound = (work->fval - work->settings->abs_subopt)*eps_r;
 8001342:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8001346:	edd9 7a10 	vldr	s15, [r9, #64]	; 0x40
 800134a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    node->WS_start = work->bnb->nWS;
 800134e:	f8d9 1070 	ldr.w	r1, [r9, #112]	; 0x70
            swp_ptr=work->xold; work->xold= work->u; work->u=swp_ptr; // Store feasible sol
 8001352:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
    while( work->bnb->n_nodes > 0 ){
 8001356:	690d      	ldr	r5, [r1, #16]
            swp_ptr=work->xold; work->xold= work->u; work->u=swp_ptr; // Store feasible sol
 8001358:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 800135c:	9001      	str	r0, [sp, #4]
            work->settings->fval_bound = (work->fval - work->settings->abs_subopt)*eps_r;
 800135e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while( work->bnb->n_nodes > 0 ){
 8001362:	2d00      	cmp	r5, #0
            work->settings->fval_bound = (work->fval - work->settings->abs_subopt)*eps_r;
 8001364:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001368:	edc3 7a07 	vstr	s15, [r3, #28]
            swp_ptr=work->xold; work->xold= work->u; work->u=swp_ptr; // Store feasible sol
 800136c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 8001370:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
    while( work->bnb->n_nodes > 0 ){
 8001374:	dcce      	bgt.n	8001314 <daqp_bnb+0x58>
    work->fval = work->settings->fval_bound/eps_r+work->settings->abs_subopt;
 8001376:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
    work->iterations = work->bnb->itercount;
 800137a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    work->fval = work->settings->fval_bound/eps_r+work->settings->abs_subopt;
 800137c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001380:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    work->iterations = work->bnb->itercount;
 8001384:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
    work->fval = work->settings->fval_bound/eps_r+work->settings->abs_subopt;
 8001388:	eec6 7a88 	vdiv.f32	s15, s13, s16
 800138c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001390:	edc9 7a10 	vstr	s15, [r9, #64]	; 0x40
    work->settings->fval_bound = fval_bound0;
 8001394:	edc3 8a07 	vstr	s17, [r3, #28]
    if(swp_ptr==NULL)
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d058      	beq.n	8001450 <daqp_bnb+0x194>
        swp_ptr=work->u; work->u= work->xold; work->xold=swp_ptr;
 800139e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 80013a2:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 80013a6:	f8c9 203c 	str.w	r2, [r9, #60]	; 0x3c
 80013aa:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
        return EXIT_OPTIMAL;
 80013ae:	2001      	movs	r0, #1
}
 80013b0:	b003      	add	sp, #12
 80013b2:	ecbd 8b02 	vpop	{d8}
 80013b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    node->WS_start = work->bnb->nWS;
 80013ba:	f8d9 1070 	ldr.w	r1, [r9, #112]	; 0x70
    for(int i =work->bnb->neq; i<work->n_active;i++){
 80013be:	f8d9 005c 	ldr.w	r0, [r9, #92]	; 0x5c
 80013c2:	688c      	ldr	r4, [r1, #8]
    node->WS_start = work->bnb->nWS;
 80013c4:	698e      	ldr	r6, [r1, #24]
 80013c6:	f8c8 6008 	str.w	r6, [r8, #8]
    for(int i =work->bnb->neq; i<work->n_active;i++){
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	dd3e      	ble.n	800144c <daqp_bnb+0x190>
 80013ce:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
        id_to_add = (work->WS[i]+(IS_LOWER(work->WS[i]) << (LOWER_BIT-1)));
 80013d2:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
 80013d6:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 80013da:	3d01      	subs	r5, #1
 80013dc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80013e0:	f855 bf04 	ldr.w	fp, [r5, #4]!
 80013e4:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
 80013e8:	03d3      	lsls	r3, r2, #15
        if((work->sense[work->WS[i]]&(IMMUTABLE+BINARY))!=IMMUTABLE+BINARY)
 80013ea:	f002 0214 	and.w	r2, r2, #20
        id_to_add = (work->WS[i]+(IS_LOWER(work->WS[i]) << (LOWER_BIT-1)));
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        if((work->sense[work->WS[i]]&(IMMUTABLE+BINARY))!=IMMUTABLE+BINARY)
 80013f2:	2a14      	cmp	r2, #20
            work->bnb->tree_WS[work->bnb->nWS++]= id_to_add;
 80013f4:	f106 0c01 	add.w	ip, r6, #1
        id_to_add = (work->WS[i]+(IS_LOWER(work->WS[i]) << (LOWER_BIT-1)));
 80013f8:	445b      	add	r3, fp
        if((work->sense[work->WS[i]]&(IMMUTABLE+BINARY))!=IMMUTABLE+BINARY)
 80013fa:	d01f      	beq.n	800143c <daqp_bnb+0x180>
            work->bnb->tree_WS[work->bnb->nWS++]= id_to_add;
 80013fc:	694a      	ldr	r2, [r1, #20]
 80013fe:	f8c1 c018 	str.w	ip, [r1, #24]
 8001402:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for(int i =work->bnb->neq; i<work->n_active;i++){
 8001406:	f8d9 005c 	ldr.w	r0, [r9, #92]	; 0x5c
    node->WS_end = work->bnb->nWS;
 800140a:	698e      	ldr	r6, [r1, #24]
    for(int i =work->bnb->neq; i<work->n_active;i++){
 800140c:	3401      	adds	r4, #1
 800140e:	4284      	cmp	r4, r0
 8001410:	dbe6      	blt.n	80013e0 <daqp_bnb+0x124>
    (node+1)->WS_start = node->WS_start;
 8001412:	f8d8 2008 	ldr.w	r2, [r8, #8]
    node->bin_id = TOGGLE_LOWER_FLAG(branch_id);
 8001416:	9800      	ldr	r0, [sp, #0]
    work->bnb->n_nodes+=2;
 8001418:	690d      	ldr	r5, [r1, #16]
    node->WS_end = work->bnb->nWS;
 800141a:	f8c8 600c 	str.w	r6, [r8, #12]
    node->bin_id = TOGGLE_LOWER_FLAG(branch_id);
 800141e:	f48e 3380 	eor.w	r3, lr, #65536	; 0x10000
 8001422:	503b      	str	r3, [r7, r0]
    node->depth +=1;
 8001424:	f8d8 3004 	ldr.w	r3, [r8, #4]
    work->bnb->n_nodes+=2;
 8001428:	3502      	adds	r5, #2
    node->depth +=1;
 800142a:	3301      	adds	r3, #1
    (node+1)->depth = node->depth; 
 800142c:	e9c8 e304 	strd	lr, r3, [r8, #16]
    (node+1)->WS_end= node->WS_end;
 8001430:	e9c8 2606 	strd	r2, r6, [r8, #24]
    node->depth +=1;
 8001434:	f8c8 3004 	str.w	r3, [r8, #4]
    work->bnb->n_nodes+=2;
 8001438:	610d      	str	r5, [r1, #16]
}
 800143a:	e769      	b.n	8001310 <daqp_bnb+0x54>
    for(int i =work->bnb->neq; i<work->n_active;i++){
 800143c:	3401      	adds	r4, #1
 800143e:	4284      	cmp	r4, r0
 8001440:	dbce      	blt.n	80013e0 <daqp_bnb+0x124>
 8001442:	e7e6      	b.n	8001412 <daqp_bnb+0x156>
    while( work->bnb->n_nodes > 0 ){
 8001444:	f8d9 1070 	ldr.w	r1, [r9, #112]	; 0x70
 8001448:	690d      	ldr	r5, [r1, #16]
 800144a:	e761      	b.n	8001310 <daqp_bnb+0x54>
    for(int i =work->bnb->neq; i<work->n_active;i++){
 800144c:	4632      	mov	r2, r6
 800144e:	e7e2      	b.n	8001416 <daqp_bnb+0x15a>
        return EXIT_INFEASIBLE;
 8001450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001454:	e7ac      	b.n	80013b0 <daqp_bnb+0xf4>
 8001456:	bf00      	nop

08001458 <daqp_ldp>:
#include "daqp.h" 

int daqp_ldp(DAQPWorkspace *work){
 8001458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int exitflag=EXIT_ITERLIMIT,iter;
    int tried_repair=0, cycle_counter=0;
    c_float best_fval = -1;

    for(iter=1; iter < work->settings->iter_limit; ++iter){
 800145c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b01      	cmp	r3, #1
int daqp_ldp(DAQPWorkspace *work){
 8001462:	ed2d 8b02 	vpush	{d8}
 8001466:	4604      	mov	r4, r0
    for(iter=1; iter < work->settings->iter_limit; ++iter){
 8001468:	dd7b      	ble.n	8001562 <daqp_ldp+0x10a>
    int tried_repair=0, cycle_counter=0;
 800146a:	f04f 0800 	mov.w	r8, #0
    c_float best_fval = -1;
 800146e:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    int tried_repair=0, cycle_counter=0;
 8001472:	46c1      	mov	r9, r8
    for(iter=1; iter < work->settings->iter_limit; ++iter){
 8001474:	2501      	movs	r5, #1
 8001476:	e00b      	b.n	8001490 <daqp_ldp+0x38>
                    cycle_counter = 0;
                }
            }
        }
        else{// Singular case
            compute_singular_direction(work);
 8001478:	f7ff f9bc 	bl	80007f4 <compute_singular_direction>
            if(!remove_blocking(work)){ 
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff faa7 	bl	80009d0 <remove_blocking>
 8001482:	2800      	cmp	r0, #0
 8001484:	d055      	beq.n	8001532 <daqp_ldp+0xda>
    for(iter=1; iter < work->settings->iter_limit; ++iter){
 8001486:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	3501      	adds	r5, #1
 800148c:	42ab      	cmp	r3, r5
 800148e:	dd32      	ble.n	80014f6 <daqp_ldp+0x9e>
        if(work->sing_ind==EMPTY_IND){ 
 8001490:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8001492:	1c73      	adds	r3, r6, #1
            compute_CSP(work);
 8001494:	4620      	mov	r0, r4
        if(work->sing_ind==EMPTY_IND){ 
 8001496:	d1ef      	bne.n	8001478 <daqp_ldp+0x20>
            compute_CSP(work);
 8001498:	f7ff f8d6 	bl	8000648 <compute_CSP>
            if(!remove_blocking(work)){ //lam_star >= 0 (i.e., dual feasible)
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff fa97 	bl	80009d0 <remove_blocking>
 80014a2:	4607      	mov	r7, r0
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d1ee      	bne.n	8001486 <daqp_ldp+0x2e>
                compute_primal_and_fval(work);
 80014a8:	4620      	mov	r0, r4
 80014aa:	f7ff f817 	bl	80004dc <compute_primal_and_fval>
                if(work->fval > work->settings->fval_bound){
 80014ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80014b0:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 80014b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80014b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	dc1b      	bgt.n	80014fa <daqp_ldp+0xa2>
                if(!add_infeasible(work)){ //mu >= (i.e., primal feasible)
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff fb54 	bl	8000b70 <add_infeasible>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d03a      	beq.n	8001542 <daqp_ldp+0xea>
                if(work->fval-best_fval < work->settings->progress_tol){
 80014cc:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80014d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80014d2:	ee77 6ac8 	vsub.f32	s13, s15, s16
 80014d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80014da:	eef4 6ac7 	vcmpe.f32	s13, s14
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d510      	bpl.n	8001506 <daqp_ldp+0xae>
                    if(cycle_counter++ > work->settings->cycle_tol){
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	4542      	cmp	r2, r8
 80014e8:	db11      	blt.n	800150e <daqp_ldp+0xb6>
    for(iter=1; iter < work->settings->iter_limit; ++iter){
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	3501      	adds	r5, #1
 80014ee:	42ab      	cmp	r3, r5
                    if(cycle_counter++ > work->settings->cycle_tol){
 80014f0:	f108 0801 	add.w	r8, r8, #1
    for(iter=1; iter < work->settings->iter_limit; ++iter){
 80014f4:	dccc      	bgt.n	8001490 <daqp_ldp+0x38>
    int exitflag=EXIT_ITERLIMIT,iter;
 80014f6:	f06f 0603 	mvn.w	r6, #3
        }
    }
    // Finalize result before returning
    work->iterations = iter;
    return exitflag;
}
 80014fa:	ecbd 8b02 	vpop	{d8}
 80014fe:	4630      	mov	r0, r6
    work->iterations = iter;
 8001500:	6625      	str	r5, [r4, #96]	; 0x60
}
 8001502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    best_fval = work->fval;
 8001506:	eeb0 8a67 	vmov.f32	s16, s15
                    cycle_counter = 0;
 800150a:	46b8      	mov	r8, r7
 800150c:	e7bc      	b.n	8001488 <daqp_ldp+0x30>
                        if(tried_repair == 1 || work->bnb != NULL){
 800150e:	f1b9 0f00 	cmp.w	r9, #0
 8001512:	d123      	bne.n	800155c <daqp_ldp+0x104>
 8001514:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001516:	bb0b      	cbnz	r3, 800155c <daqp_ldp+0x104>


// Reset workspace to default values
void reset_daqp_workspace(DAQPWorkspace *work){
    work->sing_ind=EMPTY_IND;
    work->n_active =0;
 8001518:	65e3      	str	r3, [r4, #92]	; 0x5c
    work->reuse_ind=0;
 800151a:	6563      	str	r3, [r4, #84]	; 0x54
    work->sing_ind=EMPTY_IND;
 800151c:	6666      	str	r6, [r4, #100]	; 0x64
                            activate_constraints(work);
 800151e:	4620      	mov	r0, r4
 8001520:	f7ff fc44 	bl	8000dac <activate_constraints>
                            cycle_counter=0;
 8001524:	46c8      	mov	r8, r9
    for(iter=1; iter < work->settings->iter_limit; ++iter){
 8001526:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                            best_fval = -1;
 8001528:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
                            tried_repair =1;
 800152c:	f04f 0901 	mov.w	r9, #1
 8001530:	e7aa      	b.n	8001488 <daqp_ldp+0x30>
}
 8001532:	ecbd 8b02 	vpop	{d8}
                exitflag = EXIT_INFEASIBLE;
 8001536:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
 800153a:	4630      	mov	r0, r6
    work->iterations = iter;
 800153c:	6625      	str	r5, [r4, #96]	; 0x60
}
 800153e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if(work->soft_slack > work->settings->primal_tol)
 8001542:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001544:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
 8001548:	edd3 7a00 	vldr	s15, [r3]
                        exitflag = EXIT_OPTIMAL;
 800154c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	bfcc      	ite	gt
 8001556:	2602      	movgt	r6, #2
 8001558:	2601      	movle	r6, #1
 800155a:	e7ce      	b.n	80014fa <daqp_ldp+0xa2>
                            exitflag = EXIT_CYCLE;
 800155c:	f06f 0601 	mvn.w	r6, #1
 8001560:	e7cb      	b.n	80014fa <daqp_ldp+0xa2>
    for(iter=1; iter < work->settings->iter_limit; ++iter){
 8001562:	2501      	movs	r5, #1
 8001564:	e7c7      	b.n	80014f6 <daqp_ldp+0x9e>
 8001566:	bf00      	nop

08001568 <ldp2qp_solution>:
    if(work->v != NULL)
 8001568:	6a02      	ldr	r2, [r0, #32]
void ldp2qp_solution(DAQPWorkspace *work){
 800156a:	b5f0      	push	{r4, r5, r6, r7, lr}
        for(i=0;i<NX;i++) work->x[i]=work->u[i]-work->v[i];
 800156c:	6845      	ldr	r5, [r0, #4]
    if(work->v != NULL)
 800156e:	2a00      	cmp	r2, #0
 8001570:	d066      	beq.n	8001640 <ldp2qp_solution+0xd8>
        for(i=0;i<NX;i++) work->x[i]=work->u[i]-work->v[i];
 8001572:	2d00      	cmp	r5, #0
 8001574:	dd38      	ble.n	80015e8 <ldp2qp_solution+0x80>
 8001576:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001578:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800157a:	460b      	mov	r3, r1
 800157c:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8001580:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8001584:	ecf4 7a01 	vldmia	r4!, {s15}
 8001588:	ecb2 7a01 	vldmia	r2!, {s14}
 800158c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001590:	ece3 7a01 	vstmia	r3!, {s15}
 8001594:	429e      	cmp	r6, r3
 8001596:	d1f5      	bne.n	8001584 <ldp2qp_solution+0x1c>
    if(work->Rinv != NULL){ // (Skip if LP since R = I)
 8001598:	69c4      	ldr	r4, [r0, #28]
 800159a:	2c00      	cmp	r4, #0
 800159c:	d04f      	beq.n	800163e <ldp2qp_solution+0xd6>
 800159e:	2600      	movs	r6, #0
 80015a0:	448c      	add	ip, r1
 80015a2:	46b6      	mov	lr, r6
                work->x[i]+=work->Rinv[disp++]*work->x[j];
 80015a4:	1c6f      	adds	r7, r5, #1
            work->x[i]*=work->Rinv[disp++];
 80015a6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80015aa:	edd1 7a00 	vldr	s15, [r1]
 80015ae:	ed93 7a00 	vldr	s14, [r3]
            for(j=i+1;j<NX;j++)
 80015b2:	f10e 0e01 	add.w	lr, lr, #1
            work->x[i]*=work->Rinv[disp++];
 80015b6:	ee67 7a87 	vmul.f32	s15, s15, s14
            for(j=i+1;j<NX;j++)
 80015ba:	45ae      	cmp	lr, r5
            work->x[i]*=work->Rinv[disp++];
 80015bc:	ea4f 0286 	mov.w	r2, r6, lsl #2
 80015c0:	ece1 7a01 	vstmia	r1!, {s15}
            for(j=i+1;j<NX;j++)
 80015c4:	da12      	bge.n	80015ec <ldp2qp_solution+0x84>
 80015c6:	3204      	adds	r2, #4
 80015c8:	4422      	add	r2, r4
 80015ca:	460b      	mov	r3, r1
                work->x[i]+=work->Rinv[disp++]*work->x[j];
 80015cc:	ecb3 7a01 	vldmia	r3!, {s14}
 80015d0:	ecf2 6a01 	vldmia	r2!, {s13}
 80015d4:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(j=i+1;j<NX;j++)
 80015d8:	459c      	cmp	ip, r3
                work->x[i]+=work->Rinv[disp++]*work->x[j];
 80015da:	ed41 7a01 	vstr	s15, [r1, #-4]
            for(j=i+1;j<NX;j++)
 80015de:	d1f5      	bne.n	80015cc <ldp2qp_solution+0x64>
                work->x[i]+=work->Rinv[disp++]*work->x[j];
 80015e0:	eba7 030e 	sub.w	r3, r7, lr
 80015e4:	441e      	add	r6, r3
        for(i=0,disp=0;i<NX;i++){
 80015e6:	e7de      	b.n	80015a6 <ldp2qp_solution+0x3e>
    if(work->Rinv != NULL){ // (Skip if LP since R = I)
 80015e8:	69c3      	ldr	r3, [r0, #28]
 80015ea:	b343      	cbz	r3, 800163e <ldp2qp_solution+0xd6>
        if(work->scaling != NULL){ // Correctly scale output
 80015ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80015ee:	b334      	cbz	r4, 800163e <ldp2qp_solution+0xd6>
            for(i=0;i<N_SIMPLE;i++)
 80015f0:	68c1      	ldr	r1, [r0, #12]
 80015f2:	2900      	cmp	r1, #0
 80015f4:	dd0d      	ble.n	8001612 <ldp2qp_solution+0xaa>
 80015f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015f8:	4622      	mov	r2, r4
 80015fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
                work->x[i]*=work->scaling[i];
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	ecb2 7a01 	vldmia	r2!, {s14}
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	ece3 7a01 	vstmia	r3!, {s15}
            for(i=0;i<N_SIMPLE;i++)
 800160e:	4299      	cmp	r1, r3
 8001610:	d1f5      	bne.n	80015fe <ldp2qp_solution+0x96>
            for(i=0;i<work->n_active;i++)
 8001612:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001614:	2a00      	cmp	r2, #0
 8001616:	dd12      	ble.n	800163e <ldp2qp_solution+0xd6>
 8001618:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800161a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800161c:	3904      	subs	r1, #4
 800161e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
                work->lam_star[i]/=work->scaling[work->WS[i]];
 8001622:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8001626:	edd3 6a00 	vldr	s13, [r3]
 800162a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800162e:	ed92 7a00 	vldr	s14, [r2]
 8001632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001636:	ece3 7a01 	vstmia	r3!, {s15}
            for(i=0;i<work->n_active;i++)
 800163a:	4298      	cmp	r0, r3
 800163c:	d1f1      	bne.n	8001622 <ldp2qp_solution+0xba>
}
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(i=0;i<NX;i++) work->x[i]=work->u[i];
 8001640:	2d00      	cmp	r5, #0
 8001642:	ddd1      	ble.n	80015e8 <ldp2qp_solution+0x80>
 8001644:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001646:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001648:	460b      	mov	r3, r1
 800164a:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800164e:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8001652:	f852 4b04 	ldr.w	r4, [r2], #4
 8001656:	f843 4b04 	str.w	r4, [r3], #4
 800165a:	429e      	cmp	r6, r3
 800165c:	d1f9      	bne.n	8001652 <ldp2qp_solution+0xea>
 800165e:	e79b      	b.n	8001598 <ldp2qp_solution+0x30>

08001660 <update_LDL_add>:
#include "factorization.h"

void update_LDL_add(DAQPWorkspace *work, const int add_ind){
 8001660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c_float sum;
    c_float *Mi, *Mk;

    // di <-- Mi' Mi
    // If normalized this will always be 1...
    if(IS_SIMPLE(add_ind)){
 8001664:	68c7      	ldr	r7, [r0, #12]
    int new_L_start= ARSUM(work->n_active);
 8001666:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    work->sing_ind = EMPTY_IND;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if(IS_SIMPLE(add_ind)){
 800166c:	428f      	cmp	r7, r1
void update_LDL_add(DAQPWorkspace *work, const int add_ind){
 800166e:	b089      	sub	sp, #36	; 0x24
    work->sing_ind = EMPTY_IND;
 8001670:	6643      	str	r3, [r0, #100]	; 0x64
    if(IS_SIMPLE(add_ind)){
 8001672:	dd10      	ble.n	8001696 <update_LDL_add+0x36>
        Mi = (work->Rinv)? work->Rinv+R_OFFSET(add_ind,NX): NULL;
 8001674:	69c5      	ldr	r5, [r0, #28]
 8001676:	2d00      	cmp	r5, #0
 8001678:	f000 811a 	beq.w	80018b0 <update_LDL_add+0x250>
 800167c:	6842      	ldr	r2, [r0, #4]
 800167e:	ebc1 0342 	rsb	r3, r1, r2, lsl #1
 8001682:	3b01      	subs	r3, #1
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800168c:	105b      	asrs	r3, r3, #1
 800168e:	4688      	mov	r8, r1
 8001690:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    }
    else{
        Mi = work->M+NX*(add_ind-N_SIMPLE);
        start_col = 0;
    }
    if(Mi==NULL) sum = 1;
 8001694:	e00a      	b.n	80016ac <update_LDL_add+0x4c>
        Mi = work->M+NX*(add_ind-N_SIMPLE);
 8001696:	6842      	ldr	r2, [r0, #4]
 8001698:	6905      	ldr	r5, [r0, #16]
 800169a:	1bcb      	subs	r3, r1, r7
 800169c:	fb02 f303 	mul.w	r3, r2, r3
    if(Mi==NULL) sum = 1;
 80016a0:	eb15 0583 	adds.w	r5, r5, r3, lsl #2
 80016a4:	f000 8108 	beq.w	80018b8 <update_LDL_add+0x258>
        start_col = 0;
 80016a8:	f04f 0800 	mov.w	r8, #0
    else
        for(i=start_col,sum=0;i<NX;i++)
 80016ac:	4590      	cmp	r8, r2
 80016ae:	eddf 7a84 	vldr	s15, [pc, #528]	; 80018c0 <update_LDL_add+0x260>
 80016b2:	da09      	bge.n	80016c8 <update_LDL_add+0x68>
 80016b4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80016b8:	eb05 0388 	add.w	r3, r5, r8, lsl #2
            sum+=Mi[i]*Mi[i];
 80016bc:	ecb3 7a01 	vldmia	r3!, {s14}
        for(i=start_col,sum=0;i<NX;i++)
 80016c0:	429a      	cmp	r2, r3
            sum+=Mi[i]*Mi[i];
 80016c2:	eee7 7a07 	vfma.f32	s15, s14, s14
        for(i=start_col,sum=0;i<NX;i++)
 80016c6:	d1f9      	bne.n	80016bc <update_LDL_add+0x5c>

    if(IS_SOFT(add_ind) && IS_SLACK_FREE(add_ind)){
 80016c8:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 80016cc:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
 80016d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80016da:	f000 80d9 	beq.w	8001890 <update_LDL_add+0x230>
    int ns_active=0;
 80016de:	2300      	movs	r3, #0
 80016e0:	9301      	str	r3, [sp, #4]
        sum+=work->settings->rho_soft/(SQUARE(work->scaling[add_ind]));
#endif
        ns_active++;
    }

    work->D[work->n_active] = sum;
 80016e2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80016e4:	9303      	str	r3, [sp, #12]

    if(work->n_active==0) return;
 80016e6:	2c00      	cmp	r4, #0
    work->D[work->n_active] = sum;
 80016e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80016ec:	ea4f 0284 	mov.w	r2, r4, lsl #2
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	edc3 7a00 	vstr	s15, [r3]
    if(work->n_active==0) return;
 80016f6:	f000 809b 	beq.w	8001830 <update_LDL_add+0x1d0>

    // store l <-- Mk* m
    for(i=0;i<work->n_active;i++){
 80016fa:	f340 8085 	ble.w	8001808 <update_LDL_add+0x1a8>
        id = work->WS[i];
 80016fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
        else if(Mi == NULL) sum = Mk[j];
        else
            for(sum = 0;j<NX;j++)
                sum+=Mk[j]*Mi[j];

        work->L[new_L_start+i] = sum;
 8001700:	f8d0 b044 	ldr.w	fp, [r0, #68]	; 0x44
 8001704:	f8cd b01c 	str.w	fp, [sp, #28]
 8001708:	f1a3 0e04 	sub.w	lr, r3, #4
    int new_L_start= ARSUM(work->n_active);
 800170c:	fb04 4304 	mla	r3, r4, r4, r4
 8001710:	105b      	asrs	r3, r3, #1
 8001712:	eb0b 0a83 	add.w	sl, fp, r3, lsl #2
        work->L[new_L_start+i] = sum;
 8001716:	e9cd aa05 	strd	sl, sl, [sp, #20]
 800171a:	4472      	add	r2, lr
 800171c:	f8dd b004 	ldr.w	fp, [sp, #4]
 8001720:	9404      	str	r4, [sp, #16]
    int new_L_start= ARSUM(work->n_active);
 8001722:	9302      	str	r3, [sp, #8]
        work->L[new_L_start+i] = sum;
 8001724:	4656      	mov	r6, sl
 8001726:	4614      	mov	r4, r2
        id = work->WS[i];
 8001728:	f85e 3f04 	ldr.w	r3, [lr, #4]!
        if(IS_SOFT(id) && IS_SLACK_FREE(id)) ns_active++;
 800172c:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 8001730:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001734:	2a08      	cmp	r2, #8
 8001736:	bf08      	it	eq
 8001738:	f10b 0b01 	addeq.w	fp, fp, #1
        if(IS_SIMPLE(id)){ 
 800173c:	429f      	cmp	r7, r3
 800173e:	dd7a      	ble.n	8001836 <update_LDL_add+0x1d6>
            Mk = (work->Rinv) ? work->Rinv+R_OFFSET(id,NX): NULL;
 8001740:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8001744:	f1ba 0f00 	cmp.w	sl, #0
 8001748:	f000 8093 	beq.w	8001872 <update_LDL_add+0x212>
 800174c:	6841      	ldr	r1, [r0, #4]
 800174e:	ebc3 0c41 	rsb	ip, r3, r1, lsl #1
 8001752:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
            j= (start_col > id) ? start_col : id;
 8001756:	461a      	mov	r2, r3
 8001758:	4543      	cmp	r3, r8
            Mk = (work->Rinv) ? work->Rinv+R_OFFSET(id,NX): NULL;
 800175a:	fb03 f30c 	mul.w	r3, r3, ip
 800175e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001762:	ea4f 0363 	mov.w	r3, r3, asr #1
            j= (start_col > id) ? start_col : id;
 8001766:	bfb8      	it	lt
 8001768:	4642      	movlt	r2, r8
            Mk = (work->Rinv) ? work->Rinv+R_OFFSET(id,NX): NULL;
 800176a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
        else if(Mi == NULL) sum = Mk[j];
 800176e:	2d00      	cmp	r5, #0
 8001770:	d16c      	bne.n	800184c <update_LDL_add+0x1ec>
 8001772:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001776:	edd3 7a00 	vldr	s15, [r3]
        work->L[new_L_start+i] = sum;
 800177a:	ece6 7a01 	vstmia	r6!, {s15}
    for(i=0;i<work->n_active;i++){
 800177e:	4574      	cmp	r4, lr
 8001780:	d1d2      	bne.n	8001728 <update_LDL_add+0xc8>
    }
    //Forward substitution: l <-- L\(Mk*m)  
    for(i=0,disp=0; i<work->n_active; i++){
        sum = work->L[new_L_start+i];
 8001782:	e9dd ac05 	ldrd	sl, ip, [sp, #20]
 8001786:	9c04      	ldr	r4, [sp, #16]
 8001788:	f8cd b004 	str.w	fp, [sp, #4]
 800178c:	4653      	mov	r3, sl
 800178e:	2c01      	cmp	r4, #1
 8001790:	f853 2b04 	ldr.w	r2, [r3], #4
 8001794:	f8dd b01c 	ldr.w	fp, [sp, #28]
        for(j=0; j<i; j++)
            sum -= work->L[disp++]*work->L[new_L_start+j]; 
        work->L[new_L_start+i] = sum;
 8001798:	f843 2c04 	str.w	r2, [r3, #-4]
    for(i=0,disp=0; i<work->n_active; i++){
 800179c:	d01c      	beq.n	80017d8 <update_LDL_add+0x178>
 800179e:	9b02      	ldr	r3, [sp, #8]
        work->L[new_L_start+i] = sum;
 80017a0:	2601      	movs	r6, #1
 80017a2:	1c5f      	adds	r7, r3, #1
 80017a4:	eb0b 0787 	add.w	r7, fp, r7, lsl #2
 80017a8:	4635      	mov	r5, r6
        sum = work->L[new_L_start+i];
 80017aa:	ecf7 7a01 	vldmia	r7!, {s15}
        for(j=0; j<i; j++)
 80017ae:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
        sum = work->L[new_L_start+i];
 80017b2:	4652      	mov	r2, sl
        for(j=0; j<i; j++)
 80017b4:	2300      	movs	r3, #0
            sum -= work->L[disp++]*work->L[new_L_start+j]; 
 80017b6:	ecb1 7a01 	vldmia	r1!, {s14}
 80017ba:	ecf2 6a01 	vldmia	r2!, {s13}
        for(j=0; j<i; j++)
 80017be:	3301      	adds	r3, #1
 80017c0:	42ab      	cmp	r3, r5
            sum -= work->L[disp++]*work->L[new_L_start+j]; 
 80017c2:	eee6 7ac7 	vfms.f32	s15, s13, s14
        for(j=0; j<i; j++)
 80017c6:	dbf6      	blt.n	80017b6 <update_LDL_add+0x156>
            sum -= work->L[disp++]*work->L[new_L_start+j]; 
 80017c8:	442e      	add	r6, r5
    for(i=0,disp=0; i<work->n_active; i++){
 80017ca:	3501      	adds	r5, #1
 80017cc:	42ac      	cmp	r4, r5
        work->L[new_L_start+i] = sum;
 80017ce:	ed47 7a01 	vstr	s15, [r7, #-4]
        disp++; //Skip diagonal elements (which is 1)
 80017d2:	f106 0601 	add.w	r6, r6, #1
    for(i=0,disp=0; i<work->n_active; i++){
 80017d6:	d1e8      	bne.n	80017aa <update_LDL_add+0x14a>
    }

    // Scale: l_i <-- l_i/d_i
    // Update d_new -= l'Dl
    sum = work->D[work->n_active];
 80017d8:	9b00      	ldr	r3, [sp, #0]
 80017da:	9a02      	ldr	r2, [sp, #8]
 80017dc:	edd3 7a00 	vldr	s15, [r3]
    for (i =0,disp=new_L_start; i<work->n_active;i++,disp++){
 80017e0:	9b03      	ldr	r3, [sp, #12]
 80017e2:	4422      	add	r2, r4
 80017e4:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
        work->L[disp] /= work->D[i];  
 80017e8:	ed93 7a00 	vldr	s14, [r3]
 80017ec:	ed9c 6a00 	vldr	s12, [ip]
 80017f0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80017f4:	ecec 6a01 	vstmia	ip!, {s13}
        sum -= (work->L[disp]*work->D[i])*work->L[disp];
 80017f8:	ecb3 7a01 	vldmia	r3!, {s14}
 80017fc:	ee26 7a87 	vmul.f32	s14, s13, s14
    for (i =0,disp=new_L_start; i<work->n_active;i++,disp++){
 8001800:	4562      	cmp	r2, ip
        sum -= (work->L[disp]*work->D[i])*work->L[disp];
 8001802:	eee6 7ac7 	vfms.f32	s15, s13, s14
    for (i =0,disp=new_L_start; i<work->n_active;i++,disp++){
 8001806:	d1ef      	bne.n	80017e8 <update_LDL_add+0x188>
    }
    work->D[work->n_active]=sum;
 8001808:	9a00      	ldr	r2, [sp, #0]

    // Check for singularity
    if(work->D[work->n_active] < work->settings->zero_tol ||
 800180a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    work->D[work->n_active]=sum;
 800180c:	edc2 7a00 	vstr	s15, [r2]
    if(work->D[work->n_active] < work->settings->zero_tol ||
 8001810:	ed93 7a02 	vldr	s14, [r3, #8]
 8001814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	dc04      	bgt.n	8001828 <update_LDL_add+0x1c8>
            (work->n_active >= work->n + ns_active)){
 800181e:	6843      	ldr	r3, [r0, #4]
 8001820:	9a01      	ldr	r2, [sp, #4]
 8001822:	441a      	add	r2, r3
    if(work->D[work->n_active] < work->settings->zero_tol ||
 8001824:	4294      	cmp	r4, r2
 8001826:	db03      	blt.n	8001830 <update_LDL_add+0x1d0>
        work->sing_ind=work->n_active;
        work->D[work->n_active]=0;
 8001828:	9a00      	ldr	r2, [sp, #0]
        work->sing_ind=work->n_active;
 800182a:	6644      	str	r4, [r0, #100]	; 0x64
        work->D[work->n_active]=0;
 800182c:	2300      	movs	r3, #0
 800182e:	6013      	str	r3, [r2, #0]
    }
}
 8001830:	b009      	add	sp, #36	; 0x24
 8001832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            Mk = work->M+NX*(id-N_SIMPLE);
 8001836:	6841      	ldr	r1, [r0, #4]
 8001838:	6902      	ldr	r2, [r0, #16]
 800183a:	1bdb      	subs	r3, r3, r7
 800183c:	fb01 f303 	mul.w	r3, r1, r3
        if(Mk == NULL){ 
 8001840:	eb12 0383 	adds.w	r3, r2, r3, lsl #2
 8001844:	d01e      	beq.n	8001884 <update_LDL_add+0x224>
 8001846:	4642      	mov	r2, r8
        else if(Mi == NULL) sum = Mk[j];
 8001848:	2d00      	cmp	r5, #0
 800184a:	d092      	beq.n	8001772 <update_LDL_add+0x112>
            for(sum = 0;j<NX;j++)
 800184c:	428a      	cmp	r2, r1
 800184e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80018c0 <update_LDL_add+0x260>
 8001852:	da92      	bge.n	800177a <update_LDL_add+0x11a>
 8001854:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001858:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800185c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
                sum+=Mk[j]*Mi[j];
 8001860:	ecf3 6a01 	vldmia	r3!, {s13}
 8001864:	ecb2 7a01 	vldmia	r2!, {s14}
            for(sum = 0;j<NX;j++)
 8001868:	4299      	cmp	r1, r3
                sum+=Mk[j]*Mi[j];
 800186a:	eee6 7a87 	vfma.f32	s15, s13, s14
            for(sum = 0;j<NX;j++)
 800186e:	d1f7      	bne.n	8001860 <update_LDL_add+0x200>
 8001870:	e783      	b.n	800177a <update_LDL_add+0x11a>
            j= (start_col > id) ? start_col : id;
 8001872:	4543      	cmp	r3, r8
 8001874:	bfb8      	it	lt
 8001876:	4643      	movlt	r3, r8
            if(Mi ==NULL) sum = 0;
 8001878:	b13d      	cbz	r5, 800188a <update_LDL_add+0x22a>
            else sum = Mi[j];
 800187a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	e77a      	b.n	800177a <update_LDL_add+0x11a>
 8001884:	4643      	mov	r3, r8
            if(Mi ==NULL) sum = 0;
 8001886:	2d00      	cmp	r5, #0
 8001888:	d1f7      	bne.n	800187a <update_LDL_add+0x21a>
 800188a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80018c0 <update_LDL_add+0x260>
 800188e:	e774      	b.n	800177a <update_LDL_add+0x11a>
        sum+=work->settings->rho_soft/(SQUARE(work->scaling[add_ind]));
 8001890:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001892:	4413      	add	r3, r2
 8001894:	ed93 7a00 	vldr	s14, [r3]
 8001898:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800189a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800189e:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80018a2:	eec6 6a07 	vdiv.f32	s13, s12, s14
        ns_active++;
 80018a6:	2301      	movs	r3, #1
 80018a8:	9301      	str	r3, [sp, #4]
        sum+=work->settings->rho_soft/(SQUARE(work->scaling[add_ind]));
 80018aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        ns_active++;
 80018ae:	e718      	b.n	80016e2 <update_LDL_add+0x82>
    if(Mi==NULL) sum = 1;
 80018b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80018b4:	4688      	mov	r8, r1
 80018b6:	e707      	b.n	80016c8 <update_LDL_add+0x68>
 80018b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        start_col = 0;
 80018bc:	46a8      	mov	r8, r5
 80018be:	e703      	b.n	80016c8 <update_LDL_add+0x68>
 80018c0:	00000000 	.word	0x00000000

080018c4 <update_LDL_remove>:
void update_LDL_remove(DAQPWorkspace *work, const int rm_ind){
 80018c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(work->n_active==rm_ind+1)
 80018c8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
void update_LDL_remove(DAQPWorkspace *work, const int rm_ind){
 80018ca:	b089      	sub	sp, #36	; 0x24
    if(work->n_active==rm_ind+1)
 80018cc:	f101 0a01 	add.w	sl, r1, #1
 80018d0:	4552      	cmp	r2, sl
 80018d2:	9201      	str	r2, [sp, #4]
 80018d4:	f000 80a0 	beq.w	8001a18 <update_LDL_remove+0x154>
        return;
    int i, j, r, old_disp, new_disp, w_count, n_update=work->n_active-rm_ind-1;
    c_float* w = &work->zldl[rm_ind]; // zldl will be obsolete => use to allocations
 80018d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80018da:	9106      	str	r1, [sp, #24]
 80018dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80018e0:	9303      	str	r3, [sp, #12]
    // Extract parts to keep/update in L & D
    new_disp=ARSUM(rm_ind);
 80018e2:	fb01 fb0a 	mul.w	fp, r1, sl
    int i, j, r, old_disp, new_disp, w_count, n_update=work->n_active-rm_ind-1;
 80018e6:	eba2 0301 	sub.w	r3, r2, r1
    new_disp=ARSUM(rm_ind);
 80018ea:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
    int i, j, r, old_disp, new_disp, w_count, n_update=work->n_active-rm_ind-1;
 80018ee:	9304      	str	r3, [sp, #16]
    c_float* w = &work->zldl[rm_ind]; // zldl will be obsolete => use to allocations
 80018f0:	ea4f 0381 	mov.w	r3, r1, lsl #2
 80018f4:	9305      	str	r3, [sp, #20]
    new_disp=ARSUM(rm_ind);
 80018f6:	ea4f 036b 	mov.w	r3, fp, asr #1
 80018fa:	9302      	str	r3, [sp, #8]
    old_disp=new_disp+(rm_ind+1);
 80018fc:	eb0a 0b6b 	add.w	fp, sl, fp, asr #1
    w_count= 0;
    // Remove column rm_ind (and add parts of L in its new place)
    // I.e., copy row i into i-1
    for(i = rm_ind+1;i<work->n_active;old_disp++,new_disp++,i++) //(disp++ skips blank element)..
 8001900:	dd39      	ble.n	8001976 <update_LDL_remove+0xb2>
 8001902:	f1ba 0f00 	cmp.w	sl, #0
 8001906:	4655      	mov	r5, sl
 8001908:	f340 8089 	ble.w	8001a1e <update_LDL_remove+0x15a>
 800190c:	469c      	mov	ip, r3
            //work->D[i]=0;
            work->sing_ind=i;
        }
        old_disp+=i+1; 
        for(r=j+1, new_disp=old_disp+j;r<n_update;r++){
            w[r] -= p*work->L[new_disp];//instead, initialize new_disp+j
 800190e:	6c44      	ldr	r4, [r0, #68]	; 0x44
    w_count= 0;
 8001910:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001914:	9007      	str	r0, [sp, #28]
 8001916:	f04f 0900 	mov.w	r9, #0
 800191a:	465a      	mov	r2, fp
        for(j=0;j<i;j++){ 
 800191c:	2300      	movs	r3, #0
 800191e:	e006      	b.n	800192e <update_LDL_remove+0x6a>
                work->L[new_disp++]=work->L[old_disp++];
 8001920:	f8de 2000 	ldr.w	r2, [lr]
 8001924:	603a      	str	r2, [r7, #0]
        for(j=0;j<i;j++){ 
 8001926:	42ab      	cmp	r3, r5
 8001928:	da1b      	bge.n	8001962 <update_LDL_remove+0x9e>
 800192a:	4632      	mov	r2, r6
 800192c:	4684      	mov	ip, r0
            if(j!=rm_ind)
 800192e:	4299      	cmp	r1, r3
                work->L[new_disp++]=work->L[old_disp++];
 8001930:	eb04 0e82 	add.w	lr, r4, r2, lsl #2
 8001934:	eb04 078c 	add.w	r7, r4, ip, lsl #2
        for(j=0;j<i;j++){ 
 8001938:	f103 0301 	add.w	r3, r3, #1
 800193c:	f102 0601 	add.w	r6, r2, #1
                work->L[new_disp++]=work->L[old_disp++];
 8001940:	f10c 0001 	add.w	r0, ip, #1
            if(j!=rm_ind)
 8001944:	d1ec      	bne.n	8001920 <update_LDL_remove+0x5c>
                w[w_count++] = work->L[old_disp++];
 8001946:	eb04 0382 	add.w	r3, r4, r2, lsl #2
        for(j=0;j<i;j++){ 
 800194a:	45aa      	cmp	sl, r5
                w[w_count++] = work->L[old_disp++];
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	eb08 0389 	add.w	r3, r8, r9, lsl #2
 8001952:	f102 0601 	add.w	r6, r2, #1
 8001956:	6018      	str	r0, [r3, #0]
 8001958:	f109 0901 	add.w	r9, r9, #1
        for(j=0;j<i;j++){ 
 800195c:	4653      	mov	r3, sl
 800195e:	4660      	mov	r0, ip
 8001960:	dbe3      	blt.n	800192a <update_LDL_remove+0x66>
    for(i = rm_ind+1;i<work->n_active;old_disp++,new_disp++,i++) //(disp++ skips blank element)..
 8001962:	9b01      	ldr	r3, [sp, #4]
 8001964:	44ab      	add	fp, r5
 8001966:	3501      	adds	r5, #1
 8001968:	42ab      	cmp	r3, r5
 800196a:	f10b 0b01 	add.w	fp, fp, #1
 800196e:	f100 0c01 	add.w	ip, r0, #1
 8001972:	dcd2      	bgt.n	800191a <update_LDL_remove+0x56>
 8001974:	9807      	ldr	r0, [sp, #28]
    c_float p,beta,d_bar,alpha=work->D[rm_ind];
 8001976:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001978:	9a05      	ldr	r2, [sp, #20]
    old_disp=ARSUM(rm_ind)+rm_ind;
 800197a:	9f02      	ldr	r7, [sp, #8]
    c_float p,beta,d_bar,alpha=work->D[rm_ind];
 800197c:	441a      	add	r2, r3
    for(j = 0, i=rm_ind; j<n_update;j++,i++){
 800197e:	9b04      	ldr	r3, [sp, #16]
    c_float p,beta,d_bar,alpha=work->D[rm_ind];
 8001980:	edd2 5a00 	vldr	s11, [r2]
    for(j = 0, i=rm_ind; j<n_update;j++,i++){
 8001984:	2b01      	cmp	r3, #1
    old_disp=ARSUM(rm_ind)+rm_ind;
 8001986:	440f      	add	r7, r1
    c_float p,beta,d_bar,alpha=work->D[rm_ind];
 8001988:	4694      	mov	ip, r2
    for(j = 0, i=rm_ind; j<n_update;j++,i++){
 800198a:	dd45      	ble.n	8001a18 <update_LDL_remove+0x154>
 800198c:	f8dd e00c 	ldr.w	lr, [sp, #12]
        if(d_bar<work->settings->zero_tol){
 8001990:	f8d0 906c 	ldr.w	r9, [r0, #108]	; 0x6c
 8001994:	f8dd b018 	ldr.w	fp, [sp, #24]
 8001998:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800199c:	f1ae 0604 	sub.w	r6, lr, #4
 80019a0:	4498      	add	r8, r3
 80019a2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
        p=w[j];
 80019a6:	ecfe 6a01 	vldmia	lr!, {s13}
        d_bar = work->D[i+1]+alpha*p*p; 
 80019aa:	eddc 7a01 	vldr	s15, [ip, #4]
 80019ae:	ee26 7aa5 	vmul.f32	s14, s13, s11
        alpha =work->D[i+1]*alpha/d_bar;
 80019b2:	ee67 4aa5 	vmul.f32	s9, s15, s11
        d_bar = work->D[i+1]+alpha*p*p; 
 80019b6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80019ba:	eba1 040b 	sub.w	r4, r1, fp
        old_disp+=i+1; 
 80019be:	4457      	add	r7, sl
        for(r=j+1, new_disp=old_disp+j;r<n_update;r++){
 80019c0:	443c      	add	r4, r7
        work->D[i] = d_bar;
 80019c2:	ecec 7a01 	vstmia	ip!, {s15}
        if(d_bar<work->settings->zero_tol){
 80019c6:	ed99 5a02 	vldr	s10, [r9, #8]
 80019ca:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            work->sing_ind=i;
 80019d2:	bfc8      	it	gt
 80019d4:	6641      	strgt	r1, [r0, #100]	; 0x64
        for(r=j+1, new_disp=old_disp+j;r<n_update;r++){
 80019d6:	45c2      	cmp	sl, r8
        beta = p*alpha/d_bar;
 80019d8:	ee87 6a27 	vdiv.f32	s12, s14, s15
        alpha =work->D[i+1]*alpha/d_bar;
 80019dc:	eec4 5aa7 	vdiv.f32	s11, s9, s15
        for(r=j+1, new_disp=old_disp+j;r<n_update;r++){
 80019e0:	d01a      	beq.n	8001a18 <update_LDL_remove+0x154>
            w[r] -= p*work->L[new_disp];//instead, initialize new_disp+j
 80019e2:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80019e4:	3102      	adds	r1, #2
 80019e6:	4673      	mov	r3, lr
 80019e8:	eb05 0284 	add.w	r2, r5, r4, lsl #2
            work->L[new_disp]+= beta*w[r]; //Use sum to block register
            new_disp+=rm_ind+r+1; //Update to the id which starts the next row in L
 80019ec:	440c      	add	r4, r1
        for(r=j+1, new_disp=old_disp+j;r<n_update;r++){
 80019ee:	3101      	adds	r1, #1
            w[r] -= p*work->L[new_disp];//instead, initialize new_disp+j
 80019f0:	ed92 7a00 	vldr	s14, [r2]
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	eee7 7a66 	vfms.f32	s15, s14, s13
 80019fc:	ece3 7a01 	vstmia	r3!, {s15}
            work->L[new_disp]+= beta*w[r]; //Use sum to block register
 8001a00:	ed92 7a00 	vldr	s14, [r2]
 8001a04:	eea7 7a86 	vfma.f32	s14, s15, s12
        for(r=j+1, new_disp=old_disp+j;r<n_update;r++){
 8001a08:	42b3      	cmp	r3, r6
            work->L[new_disp]+= beta*w[r]; //Use sum to block register
 8001a0a:	ed82 7a00 	vstr	s14, [r2]
        for(r=j+1, new_disp=old_disp+j;r<n_update;r++){
 8001a0e:	d1eb      	bne.n	80019e8 <update_LDL_remove+0x124>
 8001a10:	4651      	mov	r1, sl
 8001a12:	f10a 0a01 	add.w	sl, sl, #1
 8001a16:	e7c6      	b.n	80019a6 <update_LDL_remove+0xe2>
        }
    }
}
 8001a18:	b009      	add	sp, #36	; 0x24
 8001a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a1e:	461c      	mov	r4, r3
 8001a20:	3a01      	subs	r2, #1
 8001a22:	ebab 0301 	sub.w	r3, fp, r1
 8001a26:	ea02 72e2 	and.w	r2, r2, r2, asr #31
 8001a2a:	1a64      	subs	r4, r4, r1
    for(i = rm_ind+1;i<work->n_active;old_disp++,new_disp++,i++) //(disp++ skips blank element)..
 8001a2c:	eb03 0b05 	add.w	fp, r3, r5
 8001a30:	eb04 0c05 	add.w	ip, r4, r5
 8001a34:	3501      	adds	r5, #1
 8001a36:	42aa      	cmp	r2, r5
 8001a38:	daf8      	bge.n	8001a2c <update_LDL_remove+0x168>
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	42ab      	cmp	r3, r5
 8001a3e:	f73f af66 	bgt.w	800190e <update_LDL_remove+0x4a>
 8001a42:	e798      	b.n	8001976 <update_LDL_remove+0xb2>
 8001a44:	0000      	movs	r0, r0
	...

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	2300      	movs	r3, #0
{
 8001a4c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001a52:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001a5a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4926      	ldr	r1, [pc, #152]	; (8001af8 <SystemClock_Config+0xb0>)
 8001a60:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a64:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a68:	4a24      	ldr	r2, [pc, #144]	; (8001afc <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001a6e:	6408      	str	r0, [r1, #64]	; 0x40
 8001a70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a72:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001a76:	9100      	str	r1, [sp, #0]
 8001a78:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	6813      	ldr	r3, [r2, #0]
 8001a7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a8a:	9301      	str	r3, [sp, #4]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8c:	2002      	movs	r0, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8e:	9901      	ldr	r1, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a90:	2100      	movs	r1, #0
 8001a92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001a96:	2010      	movs	r0, #16
 8001a98:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001a9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001aa0:	2004      	movs	r0, #4
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aaa:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aac:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aae:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab2:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab4:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab6:	f000 fecb 	bl	8002850 <HAL_RCC_OscConfig>
 8001aba:	b108      	cbz	r0, 8001ac0 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abe:	e7fe      	b.n	8001abe <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001ae8 <SystemClock_Config+0xa0>
 8001ac4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001ac8:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001af0 <SystemClock_Config+0xa8>
 8001acc:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ace:	4621      	mov	r1, r4
 8001ad0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad2:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad6:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad8:	f001 f8d2 	bl	8002c80 <HAL_RCC_ClockConfig>
 8001adc:	b108      	cbz	r0, 8001ae2 <SystemClock_Config+0x9a>
 8001ade:	b672      	cpsid	i
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <SystemClock_Config+0x98>
}
 8001ae2:	b014      	add	sp, #80	; 0x50
 8001ae4:	bd10      	pop	{r4, pc}
 8001ae6:	bf00      	nop
 8001ae8:	0000000f 	.word	0x0000000f
 8001aec:	00000002 	.word	0x00000002
 8001af0:	00000000 	.word	0x00000000
 8001af4:	00001000 	.word	0x00001000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000

08001b00 <main>:
{
 8001b00:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	2400      	movs	r4, #0
{
 8001b04:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001b06:	f000 facb 	bl	80020a0 <HAL_Init>
  SystemClock_Config();
 8001b0a:	f7ff ff9d 	bl	8001a48 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001b12:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	4d4b      	ldr	r5, [pc, #300]	; (8001c44 <main+0x144>)
 8001b18:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b1e:	484a      	ldr	r0, [pc, #296]	; (8001c48 <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	632b      	str	r3, [r5, #48]	; 0x30
 8001b26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b30:	9401      	str	r4, [sp, #4]
 8001b32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	632b      	str	r3, [r5, #48]	; 0x30
 8001b3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	9402      	str	r4, [sp, #8]
 8001b46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	632b      	str	r3, [r5, #48]	; 0x30
 8001b4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	9403      	str	r4, [sp, #12]
 8001b5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	632b      	str	r3, [r5, #48]	; 0x30
 8001b62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b64:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b68:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b6c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b70:	f000 fe60 	bl	8002834 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b78:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	4833      	ldr	r0, [pc, #204]	; (8001c4c <main+0x14c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b80:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = B1_Pin;
 8001b82:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f000 fd63 	bl	8002650 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b92:	482d      	ldr	r0, [pc, #180]	; (8001c48 <main+0x148>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b94:	2200      	movs	r2, #0
 8001b96:	2300      	movs	r3, #0
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b98:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f000 fd57 	bl	8002650 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ba2:	9404      	str	r4, [sp, #16]
 8001ba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001baa:	632b      	str	r3, [r5, #48]	; 0x30
 8001bac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  huart2.Instance = USART2;
 8001bae:	4d28      	ldr	r5, [pc, #160]	; (8001c50 <main+0x150>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb8:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001bba:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bbc:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001bbe:	f000 fabf 	bl	8002140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bc2:	2010      	movs	r0, #16
 8001bc4:	f000 fafa 	bl	80021bc <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001bc8:	4922      	ldr	r1, [pc, #136]	; (8001c54 <main+0x154>)
  huart2.Init.BaudRate = 115200;
 8001bca:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bce:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bd0:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 115200;
 8001bd2:	e9c5 1200 	strd	r1, r2, [r5]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd6:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bda:	e9c5 4304 	strd	r4, r3, [r5, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bde:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be2:	f001 f989 	bl	8002ef8 <HAL_UART_Init>
 8001be6:	b108      	cbz	r0, 8001bec <main+0xec>
 8001be8:	b672      	cpsid	i
  while (1)
 8001bea:	e7fe      	b.n	8001bea <main+0xea>
  htim10.Instance = TIM10;
 8001bec:	4603      	mov	r3, r0
  htim10.Init.Prescaler = 84*2-1;
 8001bee:	491a      	ldr	r1, [pc, #104]	; (8001c58 <main+0x158>)
  htim10.Instance = TIM10;
 8001bf0:	481a      	ldr	r0, [pc, #104]	; (8001c5c <main+0x15c>)
  htim10.Init.Prescaler = 84*2-1;
 8001bf2:	22a7      	movs	r2, #167	; 0xa7
 8001bf4:	e9c0 1200 	strd	r1, r2, [r0]
  htim10.Init.Period = 65535;
 8001bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c00:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c04:	f001 f8fa 	bl	8002dfc <HAL_TIM_Base_Init>
 8001c08:	b9d0      	cbnz	r0, 8001c40 <main+0x140>
  HAL_UART_Receive_DMA(&huart2,(uint8_t *)RxData,sizeof(float)*(N_THETA));
 8001c0a:	4915      	ldr	r1, [pc, #84]	; (8001c60 <main+0x160>)
 8001c0c:	4c15      	ldr	r4, [pc, #84]	; (8001c64 <main+0x164>)
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001c0e:	4e0e      	ldr	r6, [pc, #56]	; (8001c48 <main+0x148>)
		HAL_UART_Transmit(&huart2,(uint8_t *)TxData,sizeof(float)*(N_CONTROL+1+1+1+1),10);
 8001c10:	4f15      	ldr	r7, [pc, #84]	; (8001c68 <main+0x168>)
  HAL_UART_Receive_DMA(&huart2,(uint8_t *)RxData,sizeof(float)*(N_THETA));
 8001c12:	2210      	movs	r2, #16
 8001c14:	4628      	mov	r0, r5
 8001c16:	f001 fdbd 	bl	8003794 <HAL_UART_Receive_DMA>
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001c1a:	2120      	movs	r1, #32
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	f000 fe0d 	bl	800283c <HAL_GPIO_TogglePin>
	if(data_to_send){
 8001c22:	6822      	ldr	r2, [r4, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)TxData,sizeof(float)*(N_CONTROL+1+1+1+1),10);
 8001c24:	230a      	movs	r3, #10
	if(data_to_send){
 8001c26:	b132      	cbz	r2, 8001c36 <main+0x136>
		HAL_UART_Transmit(&huart2,(uint8_t *)TxData,sizeof(float)*(N_CONTROL+1+1+1+1),10);
 8001c28:	2220      	movs	r2, #32
 8001c2a:	4639      	mov	r1, r7
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f001 f9fd 	bl	800302c <HAL_UART_Transmit>
		data_to_send=0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	6023      	str	r3, [r4, #0]
	HAL_Delay(1000);
 8001c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3a:	f000 fa5d 	bl	80020f8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001c3e:	e7ec      	b.n	8001c1a <main+0x11a>
 8001c40:	b672      	cpsid	i
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <main+0x142>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	20002e00 	.word	0x20002e00
 8001c54:	40004400 	.word	0x40004400
 8001c58:	40014400 	.word	0x40014400
 8001c5c:	20002db8 	.word	0x20002db8
 8001c60:	20002d24 	.word	0x20002d24
 8001c64:	20002d54 	.word	0x20002d54
 8001c68:	20002d34 	.word	0x20002d34

08001c6c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c6c:	b538      	push	{r3, r4, r5, lr}
	__HAL_TIM_SET_COUNTER(&htim10,0);
 8001c6e:	4d16      	ldr	r5, [pc, #88]	; (8001cc8 <HAL_UART_RxCpltCallback+0x5c>)
	int exitflag = mpc_compute_control(theta, control, &daqp_work);
 8001c70:	4c16      	ldr	r4, [pc, #88]	; (8001ccc <HAL_UART_RxCpltCallback+0x60>)
	__HAL_TIM_SET_COUNTER(&htim10,0);
 8001c72:	6829      	ldr	r1, [r5, #0]
	int exitflag = mpc_compute_control(theta, control, &daqp_work);
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_UART_RxCpltCallback+0x64>)
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_UART_RxCpltCallback+0x68>)
	__HAL_TIM_SET_COUNTER(&htim10,0);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	6248      	str	r0, [r1, #36]	; 0x24
	int exitflag = mpc_compute_control(theta, control, &daqp_work);
 8001c7c:	6811      	ldr	r1, [r2, #0]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	4622      	mov	r2, r4
 8001c82:	f000 f82f 	bl	8001ce4 <mpc_compute_control>
	uint16_t time = __HAL_TIM_GET_COUNTER(&htim10);
 8001c86:	682b      	ldr	r3, [r5, #0]
	TxData[N_CONTROL+2]=daqp_work.bnb->nodecount;
 8001c88:	6f22      	ldr	r2, [r4, #112]	; 0x70
	uint16_t time = __HAL_TIM_GET_COUNTER(&htim10);
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	TxData[N_CONTROL+2]=daqp_work.bnb->nodecount;
 8001c8c:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
	TxData[N_CONTROL+3]=daqp_work.iterations;
 8001c90:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
	TxData[N_CONTROL]=time;
 8001c94:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6c>)
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	ee07 3a90 	vmov	s15, r3
	TxData[N_CONTROL+1]=exitflag;
 8001c9c:	ee06 0a10 	vmov	s12, r0
	TxData[N_CONTROL]=time;
 8001ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
	TxData[N_CONTROL+1]=exitflag;
 8001ca4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	TxData[N_CONTROL+2]=daqp_work.bnb->nodecount;
 8001ca8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	TxData[N_CONTROL+3]=daqp_work.iterations;
 8001cac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	data_to_send = 1;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_UART_RxCpltCallback+0x70>)
	TxData[N_CONTROL]=time;
 8001cb2:	edc2 7a04 	vstr	s15, [r2, #16]
	data_to_send = 1;
 8001cb6:	2101      	movs	r1, #1
	TxData[N_CONTROL+1]=exitflag;
 8001cb8:	ed82 6a05 	vstr	s12, [r2, #20]
	TxData[N_CONTROL+2]=daqp_work.bnb->nodecount;
 8001cbc:	edc2 6a06 	vstr	s13, [r2, #24]
	TxData[N_CONTROL+3]=daqp_work.iterations;
 8001cc0:	ed82 7a07 	vstr	s14, [r2, #28]
	data_to_send = 1;
 8001cc4:	6019      	str	r1, [r3, #0]
}
 8001cc6:	bd38      	pop	{r3, r4, r5, pc}
 8001cc8:	20002db8 	.word	0x20002db8
 8001ccc:	20002654 	.word	0x20002654
 8001cd0:	20000004 	.word	0x20000004
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20002d34 	.word	0x20002d34
 8001cdc:	20002d54 	.word	0x20002d54

08001ce0 <Error_Handler>:
 8001ce0:	b672      	cpsid	i
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <Error_Handler+0x2>

08001ce4 <mpc_compute_control>:
#include"daqp.h"
#ifdef DAQP_BNB
#include "bnb.h"
#endif

int mpc_compute_control(c_float* theta, c_float* control, DAQPWorkspace* work){
 8001ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce6:	4615      	mov	r5, r2
 8001ce8:	4b63      	ldr	r3, [pc, #396]	; (8001e78 <mpc_compute_control+0x194>)
 8001cea:	4a64      	ldr	r2, [pc, #400]	; (8001e7c <mpc_compute_control+0x198>)
 8001cec:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8001cf0:	4f63      	ldr	r7, [pc, #396]	; (8001e80 <mpc_compute_control+0x19c>)
 8001cf2:	ed2d 8b02 	vpush	{d8}
 8001cf6:	4604      	mov	r4, r0
        for(j = 0; j < N_THETA; j++) b_shift_th += Dth[disp++]*th[j];
 8001cf8:	ed9f 8a62 	vldr	s16, [pc, #392]	; 8001e84 <mpc_compute_control+0x1a0>
 8001cfc:	69a8      	ldr	r0, [r5, #24]
int mpc_compute_control(c_float* theta, c_float* control, DAQPWorkspace* work){
 8001cfe:	460e      	mov	r6, r1
 8001d00:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
        for(j = 0; j < N_THETA; j++) b_shift_th += Dth[disp++]*th[j];
 8001d04:	ed93 6a00 	vldr	s12, [r3]
 8001d08:	ed94 7a00 	vldr	s14, [r4]
 8001d0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d10:	ed93 5a02 	vldr	s10, [r3, #8]
 8001d14:	edd4 5a02 	vldr	s11, [r4, #8]
 8001d18:	eef0 7a48 	vmov.f32	s15, s16
 8001d1c:	eee6 7a07 	vfma.f32	s15, s12, s14
    for(i =0,disp=0; i < N_CONSTR; i++){ 
 8001d20:	3310      	adds	r3, #16
        for(j = 0; j < N_THETA; j++) b_shift_th += Dth[disp++]*th[j];
 8001d22:	ed94 7a01 	vldr	s14, [r4, #4]
 8001d26:	ed13 6a01 	vldr	s12, [r3, #-4]
 8001d2a:	eee6 7a87 	vfma.f32	s15, s13, s14
    for(i =0,disp=0; i < N_CONSTR; i++){ 
 8001d2e:	428b      	cmp	r3, r1
        for(j = 0; j < N_THETA; j++) b_shift_th += Dth[disp++]*th[j];
 8001d30:	edd4 6a03 	vldr	s13, [r4, #12]
        dupper[i] = du[i] + b_shift_th;
 8001d34:	ecb2 7a01 	vldmia	r2!, {s14}
        for(j = 0; j < N_THETA; j++) b_shift_th += Dth[disp++]*th[j];
 8001d38:	eee5 7a25 	vfma.f32	s15, s10, s11
 8001d3c:	eee6 7a26 	vfma.f32	s15, s12, s13
        dupper[i] = du[i] + b_shift_th;
 8001d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d44:	ecae 7a01 	vstmia	lr!, {s14}
        dlower[i] = dl[i] + b_shift_th;
 8001d48:	ecb7 7a01 	vldmia	r7!, {s14}
 8001d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d50:	ece0 7a01 	vstmia	r0!, {s15}
    for(i =0,disp=0; i < N_CONSTR; i++){ 
 8001d54:	d1d6      	bne.n	8001d04 <mpc_compute_control+0x20>
    mpc_update_qp(theta,work->dupper,work->dlower);

#ifdef DAQP_BNB
    node_cleanup_workspace(0, work);
 8001d56:	4629      	mov	r1, r5
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff f8ff 	bl	8000f5c <node_cleanup_workspace>
    int exitflag = daqp_bnb(work);
 8001d5e:	4628      	mov	r0, r5
 8001d60:	f7ff faac 	bl	80012bc <daqp_bnb>
 8001d64:	4607      	mov	r7, r0
    reset_daqp_workspace(work);
#endif
    int exitflag = daqp_ldp(work);
#endif

    ldp2qp_solution(work);
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff fbfe 	bl	8001568 <ldp2qp_solution>
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001d6c:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <mpc_compute_control+0x1a4>)
 8001d6e:	edd4 6a00 	vldr	s13, [r4]
 8001d72:	ed93 7a00 	vldr	s14, [r3]
 8001d76:	ed94 6a01 	vldr	s12, [r4, #4]
 8001d7a:	edd4 5a02 	vldr	s11, [r4, #8]
    mpc_get_solution(theta,control,work->x);
 8001d7e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001d80:	eef0 7a48 	vmov.f32	s15, s16
 8001d84:	eee6 7a87 	vfma.f32	s15, s13, s14
    return exitflag;
}
 8001d88:	4638      	mov	r0, r7
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001d8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d92:	eee6 7a26 	vfma.f32	s15, s12, s13
 8001d96:	ed94 6a03 	vldr	s12, [r4, #12]
 8001d9a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d9e:	eee5 7a87 	vfma.f32	s15, s11, s14
        control[i] = xstar[i]+ctr_shift_th;
 8001da2:	ed92 7a00 	vldr	s14, [r2]
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001da6:	eee6 7a26 	vfma.f32	s15, s12, s13
        control[i] = xstar[i]+ctr_shift_th;
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	edc6 7a00 	vstr	s15, [r6]
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001db2:	ed94 6a00 	vldr	s12, [r4]
 8001db6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dba:	edd4 6a01 	vldr	s13, [r4, #4]
 8001dbe:	ed94 5a02 	vldr	s10, [r4, #8]
 8001dc2:	edd3 5a06 	vldr	s11, [r3, #24]
 8001dc6:	eef0 7a48 	vmov.f32	s15, s16
 8001dca:	eee6 7a07 	vfma.f32	s15, s12, s14
 8001dce:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dd2:	ed94 6a03 	vldr	s12, [r4, #12]
 8001dd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001dda:	edd3 6a07 	vldr	s13, [r3, #28]
        control[i] = xstar[i]+ctr_shift_th;
 8001dde:	ed92 7a01 	vldr	s14, [r2, #4]
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001de2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8001de6:	eee6 7a26 	vfma.f32	s15, s12, s13
        control[i] = xstar[i]+ctr_shift_th;
 8001dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dee:	edc6 7a01 	vstr	s15, [r6, #4]
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001df2:	ed94 6a00 	vldr	s12, [r4]
 8001df6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dfa:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001dfe:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
 8001e02:	edd4 5a02 	vldr	s11, [r4, #8]
 8001e06:	eef0 7a48 	vmov.f32	s15, s16
 8001e0a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8001e0e:	ed94 7a01 	vldr	s14, [r4, #4]
 8001e12:	ed94 6a03 	vldr	s12, [r4, #12]
 8001e16:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001e1a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
        control[i] = xstar[i]+ctr_shift_th;
 8001e1e:	ed92 7a02 	vldr	s14, [r2, #8]
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001e22:	eee5 7a25 	vfma.f32	s15, s10, s11
 8001e26:	eee6 7a26 	vfma.f32	s15, s12, s13
        control[i] = xstar[i]+ctr_shift_th;
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	edc6 7a02 	vstr	s15, [r6, #8]
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001e32:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001e36:	ed94 7a00 	vldr	s14, [r4]
 8001e3a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001e3e:	ed93 5a0e 	vldr	s10, [r3, #56]	; 0x38
 8001e42:	edd4 5a02 	vldr	s11, [r4, #8]
 8001e46:	eef0 7a48 	vmov.f32	s15, s16
 8001e4a:	eee6 7a07 	vfma.f32	s15, s12, s14
}
 8001e4e:	ecbd 8b02 	vpop	{d8}
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001e52:	ed94 7a01 	vldr	s14, [r4, #4]
 8001e56:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001e5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001e5e:	edd4 6a03 	vldr	s13, [r4, #12]
        control[i] = xstar[i]+ctr_shift_th;
 8001e62:	ed92 7a03 	vldr	s14, [r2, #12]
        for(j = 0; j < N_THETA; j++) ctr_shift_th += Xth[disp++]*th[j];
 8001e66:	eee5 7a25 	vfma.f32	s15, s10, s11
 8001e6a:	eee6 7a26 	vfma.f32	s15, s12, s13
        control[i] = xstar[i]+ctr_shift_th;
 8001e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e72:	edc6 7a03 	vstr	s15, [r6, #12]
}
 8001e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	20002848 	.word	0x20002848
 8001e80:	200026c8 	.word	0x200026c8
 8001e84:	00000000 	.word	0x00000000
 8001e88:	200025b8 	.word	0x200025b8

08001e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_MspInit+0x38>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	9100      	str	r1, [sp, #0]
 8001e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e9e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ea2:	9200      	str	r2, [sp, #0]
 8001ea4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	9101      	str	r1, [sp, #4]
 8001ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eba:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebc:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ebe:	f000 b92d 	b.w	800211c <HAL_NVIC_SetPriorityGrouping>
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM10)
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_TIM_Base_MspInit+0x2c>)
 8001eca:	6802      	ldr	r2, [r0, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d000      	beq.n	8001ed2 <HAL_TIM_Base_MspInit+0xa>
 8001ed0:	4770      	bx	lr
{
 8001ed2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ed4:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 8001ed8:	2200      	movs	r2, #0
 8001eda:	9201      	str	r2, [sp, #4]
 8001edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ede:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001eee:	b002      	add	sp, #8
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40014400 	.word	0x40014400

08001ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8001efa:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <HAL_UART_MspInit+0xac>)
 8001efc:	6802      	ldr	r2, [r0, #0]
{
 8001efe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8001f02:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001f08:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001f0c:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8001f0e:	d001      	beq.n	8001f14 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f10:	b008      	add	sp, #32
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f14:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001f18:	9400      	str	r4, [sp, #0]
 8001f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f1c:	4e22      	ldr	r6, [pc, #136]	; (8001fa8 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
 8001f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f26:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f2a:	9200      	str	r2, [sp, #0]
 8001f2c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	9401      	str	r4, [sp, #4]
 8001f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f40:	220c      	movs	r2, #12
 8001f42:	2302      	movs	r3, #2
 8001f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	9305      	str	r3, [sp, #20]
 8001f4c:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f52:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f56:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f000 fb7a 	bl	8002650 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_UART_MspInit+0xb8>)
 8001f5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f62:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f66:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f70:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f74:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001f78:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7c:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f80:	f000 f944 	bl	800220c <HAL_DMA_Init>
 8001f84:	b958      	cbnz	r0, 8001f9e <HAL_UART_MspInit+0xa6>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f88:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f8e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f90:	f000 f8d6 	bl	8002140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f94:	2026      	movs	r0, #38	; 0x26
 8001f96:	f000 f911 	bl	80021bc <HAL_NVIC_EnableIRQ>
}
 8001f9a:	b008      	add	sp, #32
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001f9e:	f7ff fe9f 	bl	8001ce0 <Error_Handler>
 8001fa2:	e7f0      	b.n	8001f86 <HAL_UART_MspInit+0x8e>
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	20002d58 	.word	0x20002d58
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40026088 	.word	0x40026088

08001fb4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <NMI_Handler>
 8001fb6:	bf00      	nop

08001fb8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <HardFault_Handler>
 8001fba:	bf00      	nop

08001fbc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler>
 8001fbe:	bf00      	nop

08001fc0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <BusFault_Handler>
 8001fc2:	bf00      	nop

08001fc4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <UsageFault_Handler>
 8001fc6:	bf00      	nop

08001fc8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop

08001fcc <DebugMon_Handler>:
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop

08001fd0 <PendSV_Handler>:
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 b87e 	b.w	80020d4 <HAL_IncTick>

08001fd8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fd8:	4801      	ldr	r0, [pc, #4]	; (8001fe0 <DMA1_Stream5_IRQHandler+0x8>)
 8001fda:	f000 ba49 	b.w	8002470 <HAL_DMA_IRQHandler>
 8001fde:	bf00      	nop
 8001fe0:	20002d58 	.word	0x20002d58

08001fe4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fe4:	4801      	ldr	r0, [pc, #4]	; (8001fec <USART2_IRQHandler+0x8>)
 8001fe6:	f001 b9fb 	b.w	80033e0 <HAL_UART_IRQHandler>
 8001fea:	bf00      	nop
 8001fec:	20002e00 	.word	0x20002e00

08001ff0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4a03      	ldr	r2, [pc, #12]	; (8002000 <SystemInit+0x10>)
 8001ff2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800203c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002008:	480d      	ldr	r0, [pc, #52]	; (8002040 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800200a:	490e      	ldr	r1, [pc, #56]	; (8002044 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800200c:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002010:	e002      	b.n	8002018 <LoopCopyDataInit>

08002012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002016:	3304      	adds	r3, #4

08002018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800201c:	d3f9      	bcc.n	8002012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201e:	4a0b      	ldr	r2, [pc, #44]	; (800204c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002020:	4c0b      	ldr	r4, [pc, #44]	; (8002050 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002024:	e001      	b.n	800202a <LoopFillZerobss>

08002026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002028:	3204      	adds	r2, #4

0800202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800202c:	d3fb      	bcc.n	8002026 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800202e:	f7ff ffdf 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002032:	f001 fbcb 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002036:	f7ff fd63 	bl	8001b00 <main>
  bx  lr    
 800203a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800203c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002044:	20002d08 	.word	0x20002d08
  ldr r2, =_sidata
 8002048:	0800386c 	.word	0x0800386c
  ldr r2, =_sbss
 800204c:	20002d08 	.word	0x20002d08
  ldr r4, =_ebss
 8002050:	20003ff8 	.word	0x20003ff8

08002054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002054:	e7fe      	b.n	8002054 <ADC_IRQHandler>
	...

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800205a:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <HAL_InitTick+0x3c>)
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_InitTick+0x40>)
 800205e:	7812      	ldrb	r2, [r2, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
{
 8002062:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002068:	fbb0 f0f2 	udiv	r0, r0, r2
 800206c:	fbb3 f0f0 	udiv	r0, r3, r0
 8002070:	f000 f8b2 	bl	80021d8 <HAL_SYSTICK_Config>
 8002074:	b908      	cbnz	r0, 800207a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002076:	2d0f      	cmp	r5, #15
 8002078:	d901      	bls.n	800207e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800207a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800207c:	bd38      	pop	{r3, r4, r5, pc}
 800207e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	4602      	mov	r2, r0
 8002082:	4629      	mov	r1, r5
 8002084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002088:	f000 f85a 	bl	8002140 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_InitTick+0x44>)
 800208e:	4620      	mov	r0, r4
 8002090:	601d      	str	r5, [r3, #0]
}
 8002092:	bd38      	pop	{r3, r4, r5, pc}
 8002094:	20002d00 	.word	0x20002d00
 8002098:	20002cfc 	.word	0x20002cfc
 800209c:	20002d04 	.word	0x20002d04

080020a0 <HAL_Init>:
{
 80020a0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_Init+0x30>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 f82d 	bl	800211c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7ff ffc8 	bl	8002058 <HAL_InitTick>
  HAL_MspInit();
 80020c8:	f7ff fee0 	bl	8001e8c <HAL_MspInit>
}
 80020cc:	2000      	movs	r0, #0
 80020ce:	bd08      	pop	{r3, pc}
 80020d0:	40023c00 	.word	0x40023c00

080020d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <HAL_IncTick+0x10>)
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_IncTick+0x14>)
 80020d8:	6811      	ldr	r1, [r2, #0]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	440b      	add	r3, r1
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20003ff4 	.word	0x20003ff4
 80020e8:	20002d00 	.word	0x20002d00

080020ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80020ec:	4b01      	ldr	r3, [pc, #4]	; (80020f4 <HAL_GetTick+0x8>)
 80020ee:	6818      	ldr	r0, [r3, #0]
}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20003ff4 	.word	0x20003ff4

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fff6 	bl	80020ec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002100:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002102:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002104:	d002      	beq.n	800210c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_Delay+0x20>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	1b43      	subs	r3, r0, r5
 8002112:	42a3      	cmp	r3, r4
 8002114:	d3fa      	bcc.n	800210c <HAL_Delay+0x14>
  {
  }
}
 8002116:	bd38      	pop	{r3, r4, r5, pc}
 8002118:	20002d00 	.word	0x20002d00

0800211c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800211e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002120:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800212e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002136:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_NVIC_SetPriority+0x74>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002148:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214a:	f1c3 0e07 	rsb	lr, r3, #7
 800214e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002156:	bf28      	it	cs
 8002158:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215c:	f1bc 0f06 	cmp.w	ip, #6
 8002160:	d91b      	bls.n	800219a <HAL_NVIC_SetPriority+0x5a>
 8002162:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002168:	fa0c fc03 	lsl.w	ip, ip, r3
 800216c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002174:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002178:	ea21 010c 	bic.w	r1, r1, ip
 800217c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800217e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002184:	db0c      	blt.n	80021a0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800218a:	0109      	lsls	r1, r1, #4
 800218c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002190:	b2c9      	uxtb	r1, r1
 8002192:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002196:	f85d fb04 	ldr.w	pc, [sp], #4
 800219a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219c:	4613      	mov	r3, r2
 800219e:	e7e7      	b.n	8002170 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_NVIC_SetPriority+0x78>)
 80021a2:	f000 000f 	and.w	r0, r0, #15
 80021a6:	0109      	lsls	r1, r1, #4
 80021a8:	4403      	add	r3, r0
 80021aa:	b2c9      	uxtb	r1, r1
 80021ac:	7619      	strb	r1, [r3, #24]
 80021ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00
 80021b8:	e000ecfc 	.word	0xe000ecfc

080021bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021bc:	2800      	cmp	r0, #0
 80021be:	db08      	blt.n	80021d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c0:	0941      	lsrs	r1, r0, #5
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_NVIC_EnableIRQ+0x18>)
 80021c4:	f000 001f 	and.w	r0, r0, #31
 80021c8:	2301      	movs	r3, #1
 80021ca:	fa03 f000 	lsl.w	r0, r3, r0
 80021ce:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d8:	3801      	subs	r0, #1
 80021da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80021de:	d210      	bcs.n	8002202 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e0:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	4c08      	ldr	r4, [pc, #32]	; (8002208 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80021ee:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f8:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80021fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fe:	6119      	str	r1, [r3, #16]
 8002200:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2001      	movs	r0, #1
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff ff6c 	bl	80020ec <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002214:	2c00      	cmp	r4, #0
 8002216:	d052      	beq.n	80022be <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002218:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800221a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800221c:	2102      	movs	r1, #2
 800221e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002222:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	4605      	mov	r5, r0
 800222e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002230:	e005      	b.n	800223e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002232:	f7ff ff5b 	bl	80020ec <HAL_GetTick>
 8002236:	1b43      	subs	r3, r0, r5
 8002238:	2b05      	cmp	r3, #5
 800223a:	d839      	bhi.n	80022b0 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	07d1      	lsls	r1, r2, #31
 8002242:	d4f6      	bmi.n	8002232 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002244:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002248:	68e1      	ldr	r1, [r4, #12]
 800224a:	4302      	orrs	r2, r0
 800224c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224e:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002252:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002254:	432a      	orrs	r2, r5
 8002256:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002258:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 800225a:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225c:	4302      	orrs	r2, r0
 800225e:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002260:	4933      	ldr	r1, [pc, #204]	; (8002330 <HAL_DMA_Init+0x124>)
 8002262:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002264:	6a25      	ldr	r5, [r4, #32]
 8002266:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002268:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800226c:	2904      	cmp	r1, #4
 800226e:	d028      	beq.n	80022c2 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002270:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002272:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002274:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002278:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800227a:	b2d8      	uxtb	r0, r3
 800227c:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 800227e:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002280:	3810      	subs	r0, #16
 8002282:	fba2 5200 	umull	r5, r2, r2, r0
 8002286:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002288:	492b      	ldr	r1, [pc, #172]	; (8002338 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800228a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800228e:	5c89      	ldrb	r1, [r1, r2]
 8002290:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002292:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002296:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002298:	bf88      	it	hi
 800229a:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229c:	223f      	movs	r2, #63	; 0x3f
 800229e:	408a      	lsls	r2, r1
 80022a0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a2:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a4:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80022a6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80022aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80022ae:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b2:	2220      	movs	r2, #32
 80022b4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80022ba:	4618      	mov	r0, r3
}
 80022bc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80022be:	2001      	movs	r0, #1
}
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022c2:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 80022c6:	4329      	orrs	r1, r5
 80022c8:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 80022ca:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80022cc:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80022ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022d0:	f021 0107 	bic.w	r1, r1, #7
 80022d4:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80022d6:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022da:	2d00      	cmp	r5, #0
 80022dc:	d0cd      	beq.n	800227a <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022de:	b178      	cbz	r0, 8002300 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022e0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80022e4:	d016      	beq.n	8002314 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022e6:	2a02      	cmp	r2, #2
 80022e8:	d903      	bls.n	80022f2 <HAL_DMA_Init+0xe6>
 80022ea:	2a03      	cmp	r2, #3
 80022ec:	d1c5      	bne.n	800227a <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ee:	01ea      	lsls	r2, r5, #7
 80022f0:	d5c3      	bpl.n	800227a <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 80022f2:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022f4:	2240      	movs	r2, #64	; 0x40
 80022f6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80022f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80022fc:	4618      	mov	r0, r3
}
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8002300:	2a01      	cmp	r2, #1
 8002302:	d003      	beq.n	800230c <HAL_DMA_Init+0x100>
 8002304:	f032 0202 	bics.w	r2, r2, #2
 8002308:	d1b7      	bne.n	800227a <HAL_DMA_Init+0x6e>
 800230a:	e7f0      	b.n	80022ee <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002310:	d1b3      	bne.n	800227a <HAL_DMA_Init+0x6e>
 8002312:	e7ee      	b.n	80022f2 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8002314:	2a03      	cmp	r2, #3
 8002316:	d8b0      	bhi.n	800227a <HAL_DMA_Init+0x6e>
 8002318:	a001      	add	r0, pc, #4	; (adr r0, 8002320 <HAL_DMA_Init+0x114>)
 800231a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800231e:	bf00      	nop
 8002320:	080022f3 	.word	0x080022f3
 8002324:	080022ef 	.word	0x080022ef
 8002328:	080022f3 	.word	0x080022f3
 800232c:	0800230d 	.word	0x0800230d
 8002330:	f010803f 	.word	0xf010803f
 8002334:	aaaaaaab 	.word	0xaaaaaaab
 8002338:	08003854 	.word	0x08003854

0800233c <HAL_DMA_Start_IT>:
{
 800233c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 800233e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002342:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002344:	2c01      	cmp	r4, #1
 8002346:	d035      	beq.n	80023b4 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002348:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 800234c:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002350:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8002352:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002356:	d005      	beq.n	8002364 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8002358:	2300      	movs	r3, #0
 800235a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800235e:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8002360:	2002      	movs	r0, #2
}
 8002362:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002364:	2602      	movs	r6, #2
 8002366:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800236a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236c:	2600      	movs	r6, #0
 800236e:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002370:	6826      	ldr	r6, [r4, #0]
 8002372:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8002376:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002378:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800237a:	6883      	ldr	r3, [r0, #8]
 800237c:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800237e:	bf0e      	itee	eq
 8002380:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002382:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002384:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002386:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002388:	bf08      	it	eq
 800238a:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238c:	233f      	movs	r3, #63	; 0x3f
 800238e:	4093      	lsls	r3, r2
 8002390:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002392:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002394:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002396:	f043 0316 	orr.w	r3, r3, #22
 800239a:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800239c:	b11a      	cbz	r2, 80023a6 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80023ae:	6023      	str	r3, [r4, #0]
}
 80023b0:	bc70      	pop	{r4, r5, r6}
 80023b2:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80023b4:	2002      	movs	r0, #2
}
 80023b6:	bc70      	pop	{r4, r5, r6}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <HAL_DMA_Abort>:
{
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80023c2:	f7ff fe93 	bl	80020ec <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d006      	beq.n	80023dc <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 80023ce:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d0:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80023d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d6:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80023d8:	2001      	movs	r0, #1
}
 80023da:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	f022 0216 	bic.w	r2, r2, #22
 80023e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ec:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023f0:	4605      	mov	r5, r0
 80023f2:	b332      	cbz	r2, 8002442 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f022 0208 	bic.w	r2, r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002404:	e005      	b.n	8002412 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002406:	f7ff fe71 	bl	80020ec <HAL_GetTick>
 800240a:	1b43      	subs	r3, r0, r5
 800240c:	2b05      	cmp	r3, #5
 800240e:	d80f      	bhi.n	8002430 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f013 0301 	ands.w	r3, r3, #1
 8002418:	d1f5      	bne.n	8002406 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800241c:	223f      	movs	r2, #63	; 0x3f
 800241e:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8002420:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002422:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002424:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002428:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800242c:	4618      	mov	r0, r3
}
 800242e:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002430:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002432:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8002434:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002436:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8002438:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800243c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002440:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002442:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002444:	2a00      	cmp	r2, #0
 8002446:	d1d5      	bne.n	80023f4 <HAL_DMA_Abort+0x38>
 8002448:	e7d8      	b.n	80023fc <HAL_DMA_Abort+0x40>
 800244a:	bf00      	nop

0800244c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002450:	2b02      	cmp	r3, #2
 8002452:	d003      	beq.n	800245c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002458:	2001      	movs	r0, #1
 800245a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800245c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800245e:	2305      	movs	r3, #5
 8002460:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002464:	6813      	ldr	r3, [r2, #0]
 8002466:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 800246a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800246c:	6013      	str	r3, [r2, #0]
}
 800246e:	4770      	bx	lr

08002470 <HAL_DMA_IRQHandler>:
{
 8002470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002474:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 8002476:	4a74      	ldr	r2, [pc, #464]	; (8002648 <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002478:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800247a:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002480:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002482:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002484:	2208      	movs	r2, #8
 8002486:	409a      	lsls	r2, r3
 8002488:	4222      	tst	r2, r4
{
 800248a:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800248c:	d004      	beq.n	8002498 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800248e:	6801      	ldr	r1, [r0, #0]
 8002490:	680f      	ldr	r7, [r1, #0]
 8002492:	0778      	lsls	r0, r7, #29
 8002494:	f100 808a 	bmi.w	80025ac <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002498:	2201      	movs	r2, #1
 800249a:	409a      	lsls	r2, r3
 800249c:	4222      	tst	r2, r4
 800249e:	d004      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024a0:	f8d8 1000 	ldr.w	r1, [r8]
 80024a4:	6949      	ldr	r1, [r1, #20]
 80024a6:	0609      	lsls	r1, r1, #24
 80024a8:	d478      	bmi.n	800259c <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024aa:	2204      	movs	r2, #4
 80024ac:	409a      	lsls	r2, r3
 80024ae:	4222      	tst	r2, r4
 80024b0:	d004      	beq.n	80024bc <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024b2:	f8d8 1000 	ldr.w	r1, [r8]
 80024b6:	6809      	ldr	r1, [r1, #0]
 80024b8:	078f      	lsls	r7, r1, #30
 80024ba:	d467      	bmi.n	800258c <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024bc:	2210      	movs	r2, #16
 80024be:	409a      	lsls	r2, r3
 80024c0:	4222      	tst	r2, r4
 80024c2:	d004      	beq.n	80024ce <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024c4:	f8d8 1000 	ldr.w	r1, [r8]
 80024c8:	680f      	ldr	r7, [r1, #0]
 80024ca:	0738      	lsls	r0, r7, #28
 80024cc:	d449      	bmi.n	8002562 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024ce:	2220      	movs	r2, #32
 80024d0:	409a      	lsls	r2, r3
 80024d2:	4222      	tst	r2, r4
 80024d4:	d017      	beq.n	8002506 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024d6:	f8d8 1000 	ldr.w	r1, [r8]
 80024da:	680c      	ldr	r4, [r1, #0]
 80024dc:	06e0      	lsls	r0, r4, #27
 80024de:	d512      	bpl.n	8002506 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024e0:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024e2:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80024e6:	2a05      	cmp	r2, #5
 80024e8:	d073      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ea:	680b      	ldr	r3, [r1, #0]
 80024ec:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024f0:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f2:	f000 8090 	beq.w	8002616 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024f6:	0319      	lsls	r1, r3, #12
 80024f8:	f140 809b 	bpl.w	8002632 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80024fc:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8002500:	b10b      	cbz	r3, 8002506 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8002502:	4640      	mov	r0, r8
 8002504:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002506:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800250a:	b33b      	cbz	r3, 800255c <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800250c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002510:	07da      	lsls	r2, r3, #31
 8002512:	d51b      	bpl.n	800254c <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8002514:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002518:	494c      	ldr	r1, [pc, #304]	; (800264c <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800251a:	2305      	movs	r3, #5
 800251c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002520:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002522:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8002526:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800252a:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e002      	b.n	8002536 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	07db      	lsls	r3, r3, #31
 8002534:	d504      	bpl.n	8002540 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8002536:	9b01      	ldr	r3, [sp, #4]
 8002538:	3301      	adds	r3, #1
 800253a:	42ab      	cmp	r3, r5
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	d9f7      	bls.n	8002530 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8002540:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002542:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002544:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002548:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800254c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8002550:	b123      	cbz	r3, 800255c <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8002552:	4640      	mov	r0, r8
}
 8002554:	b002      	add	sp, #8
 8002556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800255a:	4718      	bx	r3
}
 800255c:	b002      	add	sp, #8
 800255e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002562:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002564:	680a      	ldr	r2, [r1, #0]
 8002566:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256a:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800256c:	d12a      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800256e:	05d7      	lsls	r7, r2, #23
 8002570:	d403      	bmi.n	800257a <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002572:	680a      	ldr	r2, [r1, #0]
 8002574:	f022 0208 	bic.w	r2, r2, #8
 8002578:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800257a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800257e:	2a00      	cmp	r2, #0
 8002580:	d0a5      	beq.n	80024ce <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8002582:	4640      	mov	r0, r8
 8002584:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002586:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800258a:	e7a0      	b.n	80024ce <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800258c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800258e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002592:	f042 0204 	orr.w	r2, r2, #4
 8002596:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800259a:	e78f      	b.n	80024bc <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800259c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800259e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80025a2:	f042 0202 	orr.w	r2, r2, #2
 80025a6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80025aa:	e77e      	b.n	80024aa <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025ac:	680f      	ldr	r7, [r1, #0]
 80025ae:	f027 0704 	bic.w	r7, r7, #4
 80025b2:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025b4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025b6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80025c2:	e769      	b.n	8002498 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c4:	0312      	lsls	r2, r2, #12
 80025c6:	d5d8      	bpl.n	800257a <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025c8:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80025cc:	2a00      	cmp	r2, #0
 80025ce:	d1d8      	bne.n	8002582 <HAL_DMA_IRQHandler+0x112>
 80025d0:	e77d      	b.n	80024ce <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d2:	680a      	ldr	r2, [r1, #0]
 80025d4:	f022 0216 	bic.w	r2, r2, #22
 80025d8:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025da:	694a      	ldr	r2, [r1, #20]
 80025dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e0:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025e2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80025e6:	b352      	cbz	r2, 800263e <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e8:	680a      	ldr	r2, [r1, #0]
 80025ea:	f022 0208 	bic.w	r2, r2, #8
 80025ee:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f0:	223f      	movs	r2, #63	; 0x3f
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80025f6:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fa:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80025fc:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80025fe:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002600:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002604:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002608:	2900      	cmp	r1, #0
 800260a:	d0a7      	beq.n	800255c <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 800260c:	4640      	mov	r0, r8
}
 800260e:	b002      	add	sp, #8
 8002610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8002614:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002616:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800261a:	f47f af6f 	bne.w	80024fc <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800261e:	680a      	ldr	r2, [r1, #0]
 8002620:	f022 0210 	bic.w	r2, r2, #16
 8002624:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002626:	2201      	movs	r2, #1
 8002628:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800262c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8002630:	e764      	b.n	80024fc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8002632:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002636:	2b00      	cmp	r3, #0
 8002638:	f47f af63 	bne.w	8002502 <HAL_DMA_IRQHandler+0x92>
 800263c:	e763      	b.n	8002506 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800263e:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002642:	2a00      	cmp	r2, #0
 8002644:	d1d0      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x178>
 8002646:	e7d3      	b.n	80025f0 <HAL_DMA_IRQHandler+0x180>
 8002648:	20002cfc 	.word	0x20002cfc
 800264c:	1b4e81b5 	.word	0x1b4e81b5

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002654:	2200      	movs	r2, #0
 8002656:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002658:	4e70      	ldr	r6, [pc, #448]	; (800281c <HAL_GPIO_Init+0x1cc>)
{
 800265a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265c:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 800265e:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	4689      	mov	r9, r1
 8002664:	e004      	b.n	8002670 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	3301      	adds	r3, #1
 8002668:	2b10      	cmp	r3, #16
 800266a:	f102 0202 	add.w	r2, r2, #2
 800266e:	d078      	beq.n	8002762 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8002670:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002674:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8002678:	43a1      	bics	r1, r4
 800267a:	d1f4      	bne.n	8002666 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8002680:	f00c 0103 	and.w	r1, ip, #3
 8002684:	1e4d      	subs	r5, r1, #1
 8002686:	2d01      	cmp	r5, #1
 8002688:	d96e      	bls.n	8002768 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268a:	2903      	cmp	r1, #3
 800268c:	f040 80ae 	bne.w	80027ec <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002690:	4091      	lsls	r1, r2
 8002692:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8002694:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002696:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002698:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800269a:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 800269e:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a0:	d0e1      	beq.n	8002666 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	4d5f      	ldr	r5, [pc, #380]	; (8002820 <HAL_GPIO_Init+0x1d0>)
 80026a4:	2100      	movs	r1, #0
 80026a6:	9103      	str	r1, [sp, #12]
 80026a8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80026aa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80026ae:	6469      	str	r1, [r5, #68]	; 0x44
 80026b0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80026b2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80026b6:	9103      	str	r1, [sp, #12]
 80026b8:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	f023 0103 	bic.w	r1, r3, #3
 80026be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80026c2:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c6:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80026ca:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ce:	00bf      	lsls	r7, r7, #2
 80026d0:	250f      	movs	r5, #15
 80026d2:	40bd      	lsls	r5, r7
 80026d4:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d8:	4d52      	ldr	r5, [pc, #328]	; (8002824 <HAL_GPIO_Init+0x1d4>)
 80026da:	42a8      	cmp	r0, r5
 80026dc:	d017      	beq.n	800270e <HAL_GPIO_Init+0xbe>
 80026de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026e2:	42a8      	cmp	r0, r5
 80026e4:	f000 8086 	beq.w	80027f4 <HAL_GPIO_Init+0x1a4>
 80026e8:	4d4f      	ldr	r5, [pc, #316]	; (8002828 <HAL_GPIO_Init+0x1d8>)
 80026ea:	42a8      	cmp	r0, r5
 80026ec:	f000 8087 	beq.w	80027fe <HAL_GPIO_Init+0x1ae>
 80026f0:	4d4e      	ldr	r5, [pc, #312]	; (800282c <HAL_GPIO_Init+0x1dc>)
 80026f2:	42a8      	cmp	r0, r5
 80026f4:	f000 808a 	beq.w	800280c <HAL_GPIO_Init+0x1bc>
 80026f8:	4d4d      	ldr	r5, [pc, #308]	; (8002830 <HAL_GPIO_Init+0x1e0>)
 80026fa:	42a8      	cmp	r0, r5
 80026fc:	bf0c      	ite	eq
 80026fe:	f04f 0e04 	moveq.w	lr, #4
 8002702:	f04f 0e07 	movne.w	lr, #7
 8002706:	fa0e f707 	lsl.w	r7, lr, r7
 800270a:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800270e:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8002712:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002714:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002718:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800271c:	bf0c      	ite	eq
 800271e:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002720:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8002724:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8002726:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002728:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800272c:	bf0c      	ite	eq
 800272e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002730:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8002734:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8002736:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002738:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800273c:	bf0c      	ite	eq
 800273e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002740:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8002744:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002746:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002748:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8002750:	bf0c      	ite	eq
 8002752:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002754:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002758:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800275a:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275c:	f102 0202 	add.w	r2, r2, #2
 8002760:	d186      	bne.n	8002670 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002762:	b005      	add	sp, #20
 8002764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002768:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800276c:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276e:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002772:	2503      	movs	r5, #3
 8002774:	fa05 fe02 	lsl.w	lr, r5, r2
 8002778:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277c:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8002780:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002782:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002784:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002788:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278c:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8002790:	409f      	lsls	r7, r3
 8002792:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002796:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002798:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800279a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80027a2:	4097      	lsls	r7, r2
 80027a4:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a8:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80027aa:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ac:	fa01 f102 	lsl.w	r1, r1, r2
 80027b0:	f47f af70 	bne.w	8002694 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 80027b4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80027b8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027bc:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80027c0:	f8de 7020 	ldr.w	r7, [lr, #32]
 80027c4:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c6:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ca:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ce:	fa07 f708 	lsl.w	r7, r7, r8
 80027d2:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d4:	270f      	movs	r7, #15
 80027d6:	fa07 f808 	lsl.w	r8, r7, r8
 80027da:	9f00      	ldr	r7, [sp, #0]
 80027dc:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e0:	9f01      	ldr	r7, [sp, #4]
 80027e2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80027e6:	f8ce 7020 	str.w	r7, [lr, #32]
 80027ea:	e753      	b.n	8002694 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ec:	2503      	movs	r5, #3
 80027ee:	4095      	lsls	r5, r2
 80027f0:	43ed      	mvns	r5, r5
 80027f2:	e7d1      	b.n	8002798 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027f4:	fa0a f707 	lsl.w	r7, sl, r7
 80027f8:	ea48 0807 	orr.w	r8, r8, r7
 80027fc:	e787      	b.n	800270e <HAL_GPIO_Init+0xbe>
 80027fe:	f04f 0e02 	mov.w	lr, #2
 8002802:	fa0e f707 	lsl.w	r7, lr, r7
 8002806:	ea48 0807 	orr.w	r8, r8, r7
 800280a:	e780      	b.n	800270e <HAL_GPIO_Init+0xbe>
 800280c:	f04f 0e03 	mov.w	lr, #3
 8002810:	fa0e f707 	lsl.w	r7, lr, r7
 8002814:	ea48 0807 	orr.w	r8, r8, r7
 8002818:	e779      	b.n	800270e <HAL_GPIO_Init+0xbe>
 800281a:	bf00      	nop
 800281c:	40013c00 	.word	0x40013c00
 8002820:	40023800 	.word	0x40023800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020800 	.word	0x40020800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002834:	b902      	cbnz	r2, 8002838 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002836:	0409      	lsls	r1, r1, #16
 8002838:	6181      	str	r1, [r0, #24]
  }
}
 800283a:	4770      	bx	lr

0800283c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800283c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800283e:	ea01 0203 	and.w	r2, r1, r3
 8002842:	ea21 0103 	bic.w	r1, r1, r3
 8002846:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800284a:	6181      	str	r1, [r0, #24]
}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop

08002850 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002850:	2800      	cmp	r0, #0
 8002852:	f000 81a2 	beq.w	8002b9a <HAL_RCC_OscConfig+0x34a>
{
 8002856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	6803      	ldr	r3, [r0, #0]
 800285c:	07dd      	lsls	r5, r3, #31
{
 800285e:	b082      	sub	sp, #8
 8002860:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002862:	d52f      	bpl.n	80028c4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002864:	499e      	ldr	r1, [pc, #632]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 8002866:	688a      	ldr	r2, [r1, #8]
 8002868:	f002 020c 	and.w	r2, r2, #12
 800286c:	2a04      	cmp	r2, #4
 800286e:	f000 80ed 	beq.w	8002a4c <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	688a      	ldr	r2, [r1, #8]
 8002874:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002878:	2a08      	cmp	r2, #8
 800287a:	f000 80e3 	beq.w	8002a44 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287e:	6863      	ldr	r3, [r4, #4]
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002884:	f000 80ec 	beq.w	8002a60 <HAL_RCC_OscConfig+0x210>
 8002888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288c:	f000 8175 	beq.w	8002b7a <HAL_RCC_OscConfig+0x32a>
 8002890:	4d93      	ldr	r5, [pc, #588]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 8002892:	682a      	ldr	r2, [r5, #0]
 8002894:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002898:	602a      	str	r2, [r5, #0]
 800289a:	682a      	ldr	r2, [r5, #0]
 800289c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028a0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 80e1 	bne.w	8002a6a <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff fc20 	bl	80020ec <HAL_GetTick>
 80028ac:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	e005      	b.n	80028bc <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff fc1c 	bl	80020ec <HAL_GetTick>
 80028b4:	1b80      	subs	r0, r0, r6
 80028b6:	2864      	cmp	r0, #100	; 0x64
 80028b8:	f200 8101 	bhi.w	8002abe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	039b      	lsls	r3, r3, #14
 80028c0:	d4f6      	bmi.n	80028b0 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	079f      	lsls	r7, r3, #30
 80028c6:	d528      	bpl.n	800291a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c8:	4a85      	ldr	r2, [pc, #532]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 80028ca:	6891      	ldr	r1, [r2, #8]
 80028cc:	f011 0f0c 	tst.w	r1, #12
 80028d0:	f000 8090 	beq.w	80029f4 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d4:	6891      	ldr	r1, [r2, #8]
 80028d6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028da:	2908      	cmp	r1, #8
 80028dc:	f000 8086 	beq.w	80029ec <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e0:	68e3      	ldr	r3, [r4, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 810e 	beq.w	8002b04 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e8:	4b7e      	ldr	r3, [pc, #504]	; (8002ae4 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4e7d      	ldr	r6, [pc, #500]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028f0:	f7ff fbfc 	bl	80020ec <HAL_GetTick>
 80028f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	e005      	b.n	8002904 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f8:	f7ff fbf8 	bl	80020ec <HAL_GetTick>
 80028fc:	1b40      	subs	r0, r0, r5
 80028fe:	2802      	cmp	r0, #2
 8002900:	f200 80dd 	bhi.w	8002abe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	6833      	ldr	r3, [r6, #0]
 8002906:	0798      	lsls	r0, r3, #30
 8002908:	d5f6      	bpl.n	80028f8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	6833      	ldr	r3, [r6, #0]
 800290c:	6922      	ldr	r2, [r4, #16]
 800290e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002912:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002916:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	071a      	lsls	r2, r3, #28
 800291c:	d451      	bmi.n	80029c2 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291e:	0758      	lsls	r0, r3, #29
 8002920:	d52f      	bpl.n	8002982 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4a6f      	ldr	r2, [pc, #444]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 8002924:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002926:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800292a:	d07f      	beq.n	8002a2c <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 800292c:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292e:	4e6e      	ldr	r6, [pc, #440]	; (8002ae8 <HAL_RCC_OscConfig+0x298>)
 8002930:	6833      	ldr	r3, [r6, #0]
 8002932:	05d9      	lsls	r1, r3, #23
 8002934:	f140 80b3 	bpl.w	8002a9e <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002938:	68a3      	ldr	r3, [r4, #8]
 800293a:	2b01      	cmp	r3, #1
 800293c:	f000 80c3 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x276>
 8002940:	2b05      	cmp	r3, #5
 8002942:	f000 812c 	beq.w	8002b9e <HAL_RCC_OscConfig+0x34e>
 8002946:	4e66      	ldr	r6, [pc, #408]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 8002948:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	6732      	str	r2, [r6, #112]	; 0x70
 8002950:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002952:	f022 0204 	bic.w	r2, r2, #4
 8002956:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 80b9 	bne.w	8002ad0 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7ff fbc5 	bl	80020ec <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002966:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	e005      	b.n	8002976 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7ff fbbf 	bl	80020ec <HAL_GetTick>
 800296e:	1bc0      	subs	r0, r0, r7
 8002970:	4540      	cmp	r0, r8
 8002972:	f200 80a4 	bhi.w	8002abe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002978:	0798      	lsls	r0, r3, #30
 800297a:	d4f6      	bmi.n	800296a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297c:	2d00      	cmp	r5, #0
 800297e:	f040 8106 	bne.w	8002b8e <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002982:	69a0      	ldr	r0, [r4, #24]
 8002984:	b1c8      	cbz	r0, 80029ba <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002986:	4d56      	ldr	r5, [pc, #344]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 8002988:	68ab      	ldr	r3, [r5, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b08      	cmp	r3, #8
 8002990:	f000 80c9 	beq.w	8002b26 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_OscConfig+0x294>)
 8002996:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002998:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800299a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	f000 8109 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff fba4 	bl	80020ec <HAL_GetTick>
 80029a4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	e005      	b.n	80029b4 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff fba0 	bl	80020ec <HAL_GetTick>
 80029ac:	1b00      	subs	r0, r0, r4
 80029ae:	2802      	cmp	r0, #2
 80029b0:	f200 8085 	bhi.w	8002abe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b4:	682b      	ldr	r3, [r5, #0]
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	d4f6      	bmi.n	80029a8 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80029ba:	2000      	movs	r0, #0
}
 80029bc:	b002      	add	sp, #8
 80029be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c2:	6963      	ldr	r3, [r4, #20]
 80029c4:	b30b      	cbz	r3, 8002a0a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c8:	4e45      	ldr	r6, [pc, #276]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80029ca:	2201      	movs	r2, #1
 80029cc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80029d0:	f7ff fb8c 	bl	80020ec <HAL_GetTick>
 80029d4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d6:	e004      	b.n	80029e2 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d8:	f7ff fb88 	bl	80020ec <HAL_GetTick>
 80029dc:	1b40      	subs	r0, r0, r5
 80029de:	2802      	cmp	r0, #2
 80029e0:	d86d      	bhi.n	8002abe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80029e4:	079b      	lsls	r3, r3, #30
 80029e6:	d5f7      	bpl.n	80029d8 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	e798      	b.n	800291e <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ec:	6852      	ldr	r2, [r2, #4]
 80029ee:	0256      	lsls	r6, r2, #9
 80029f0:	f53f af76 	bmi.w	80028e0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f4:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	0795      	lsls	r5, r2, #30
 80029fa:	d544      	bpl.n	8002a86 <HAL_RCC_OscConfig+0x236>
 80029fc:	68e2      	ldr	r2, [r4, #12]
 80029fe:	2a01      	cmp	r2, #1
 8002a00:	d041      	beq.n	8002a86 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8002a02:	2001      	movs	r0, #1
}
 8002a04:	b002      	add	sp, #8
 8002a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002a0a:	4a36      	ldr	r2, [pc, #216]	; (8002ae4 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4e34      	ldr	r6, [pc, #208]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8002a0e:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002a12:	f7ff fb6b 	bl	80020ec <HAL_GetTick>
 8002a16:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	e004      	b.n	8002a24 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7ff fb67 	bl	80020ec <HAL_GetTick>
 8002a1e:	1b40      	subs	r0, r0, r5
 8002a20:	2802      	cmp	r0, #2
 8002a22:	d84c      	bhi.n	8002abe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002a26:	079f      	lsls	r7, r3, #30
 8002a28:	d4f7      	bmi.n	8002a1a <HAL_RCC_OscConfig+0x1ca>
 8002a2a:	e7dd      	b.n	80029e8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a40:	2501      	movs	r5, #1
 8002a42:	e774      	b.n	800292e <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a44:	684a      	ldr	r2, [r1, #4]
 8002a46:	0250      	lsls	r0, r2, #9
 8002a48:	f57f af19 	bpl.w	800287e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4c:	4a24      	ldr	r2, [pc, #144]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	0391      	lsls	r1, r2, #14
 8002a52:	f57f af37 	bpl.w	80028c4 <HAL_RCC_OscConfig+0x74>
 8002a56:	6862      	ldr	r2, [r4, #4]
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	f47f af33 	bne.w	80028c4 <HAL_RCC_OscConfig+0x74>
 8002a5e:	e7d0      	b.n	8002a02 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a60:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 8002a62:	6813      	ldr	r3, [r2, #0]
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a6a:	f7ff fb3f 	bl	80020ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4e1c      	ldr	r6, [pc, #112]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8002a70:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	e004      	b.n	8002a7e <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff fb3a 	bl	80020ec <HAL_GetTick>
 8002a78:	1b40      	subs	r0, r0, r5
 8002a7a:	2864      	cmp	r0, #100	; 0x64
 8002a7c:	d81f      	bhi.n	8002abe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	6833      	ldr	r3, [r6, #0]
 8002a80:	039a      	lsls	r2, r3, #14
 8002a82:	d5f7      	bpl.n	8002a74 <HAL_RCC_OscConfig+0x224>
 8002a84:	e71d      	b.n	80028c2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 8002a88:	6920      	ldr	r0, [r4, #16]
 8002a8a:	680a      	ldr	r2, [r1, #0]
 8002a8c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002a90:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002a94:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	071a      	lsls	r2, r3, #28
 8002a98:	f57f af41 	bpl.w	800291e <HAL_RCC_OscConfig+0xce>
 8002a9c:	e791      	b.n	80029c2 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	6833      	ldr	r3, [r6, #0]
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002aa6:	f7ff fb21 	bl	80020ec <HAL_GetTick>
 8002aaa:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	6833      	ldr	r3, [r6, #0]
 8002aae:	05da      	lsls	r2, r3, #23
 8002ab0:	f53f af42 	bmi.w	8002938 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7ff fb1a 	bl	80020ec <HAL_GetTick>
 8002ab8:	1bc0      	subs	r0, r0, r7
 8002aba:	2802      	cmp	r0, #2
 8002abc:	d9f6      	bls.n	8002aac <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8002abe:	2003      	movs	r0, #3
}
 8002ac0:	b002      	add	sp, #8
 8002ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac6:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
 8002ac8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002ad0:	f7ff fb0c 	bl	80020ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad4:	4f02      	ldr	r7, [pc, #8]	; (8002ae0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8002ad6:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	e00b      	b.n	8002af6 <HAL_RCC_OscConfig+0x2a6>
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	42470000 	.word	0x42470000
 8002ae8:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7ff fafe 	bl	80020ec <HAL_GetTick>
 8002af0:	1b80      	subs	r0, r0, r6
 8002af2:	4540      	cmp	r0, r8
 8002af4:	d8e3      	bhi.n	8002abe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af8:	079b      	lsls	r3, r3, #30
 8002afa:	d5f7      	bpl.n	8002aec <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8002afc:	2d00      	cmp	r5, #0
 8002afe:	f43f af40 	beq.w	8002982 <HAL_RCC_OscConfig+0x132>
 8002b02:	e044      	b.n	8002b8e <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8002b04:	4a42      	ldr	r2, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4e43      	ldr	r6, [pc, #268]	; (8002c14 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8002b08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b0a:	f7ff faef 	bl	80020ec <HAL_GetTick>
 8002b0e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b10:	e004      	b.n	8002b1c <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b12:	f7ff faeb 	bl	80020ec <HAL_GetTick>
 8002b16:	1b40      	subs	r0, r0, r5
 8002b18:	2802      	cmp	r0, #2
 8002b1a:	d8d0      	bhi.n	8002abe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1c:	6833      	ldr	r3, [r6, #0]
 8002b1e:	0799      	lsls	r1, r3, #30
 8002b20:	d4f7      	bmi.n	8002b12 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	e6f9      	b.n	800291a <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b26:	2801      	cmp	r0, #1
 8002b28:	f43f af48 	beq.w	80029bc <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002b2c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b30:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b34:	4291      	cmp	r1, r2
 8002b36:	f47f af64 	bne.w	8002a02 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b3c:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b40:	4291      	cmp	r1, r2
 8002b42:	f47f af5e 	bne.w	8002a02 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b48:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002b4c:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b4e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002b52:	f47f af56 	bne.w	8002a02 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b58:	0852      	lsrs	r2, r2, #1
 8002b5a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002b5e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b60:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002b64:	f47f af4d 	bne.w	8002a02 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b6a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b6e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8002b72:	bf14      	ite	ne
 8002b74:	2001      	movne	r0, #1
 8002b76:	2000      	moveq	r0, #0
 8002b78:	e720      	b.n	80029bc <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_RCC_OscConfig+0x3c4>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b8a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b8c:	e76d      	b.n	8002a6a <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8e:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <HAL_RCC_OscConfig+0x3c4>)
 8002b90:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6413      	str	r3, [r2, #64]	; 0x40
 8002b98:	e6f3      	b.n	8002982 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002b9a:	2001      	movs	r0, #1
}
 8002b9c:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_RCC_OscConfig+0x3c4>)
 8002ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ba2:	f042 0204 	orr.w	r2, r2, #4
 8002ba6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ba8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb0:	e78e      	b.n	8002ad0 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8002bb2:	f7ff fa9b 	bl	80020ec <HAL_GetTick>
 8002bb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb8:	e005      	b.n	8002bc6 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bba:	f7ff fa97 	bl	80020ec <HAL_GetTick>
 8002bbe:	1b80      	subs	r0, r0, r6
 8002bc0:	2802      	cmp	r0, #2
 8002bc2:	f63f af7c 	bhi.w	8002abe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	682b      	ldr	r3, [r5, #0]
 8002bc8:	0199      	lsls	r1, r3, #6
 8002bca:	d4f6      	bmi.n	8002bba <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bcc:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002bd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002bd8:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8002bdc:	0852      	lsrs	r2, r2, #1
 8002bde:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002be2:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002be4:	490a      	ldr	r1, [pc, #40]	; (8002c10 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002bea:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bec:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002bee:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002bf0:	f7ff fa7c 	bl	80020ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf4:	4d07      	ldr	r5, [pc, #28]	; (8002c14 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8002bf6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	e005      	b.n	8002c06 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7ff fa77 	bl	80020ec <HAL_GetTick>
 8002bfe:	1b00      	subs	r0, r0, r4
 8002c00:	2802      	cmp	r0, #2
 8002c02:	f63f af5c 	bhi.w	8002abe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	682b      	ldr	r3, [r5, #0]
 8002c08:	019a      	lsls	r2, r3, #6
 8002c0a:	d5f6      	bpl.n	8002bfa <HAL_RCC_OscConfig+0x3aa>
 8002c0c:	e6d5      	b.n	80029ba <HAL_RCC_OscConfig+0x16a>
 8002c0e:	bf00      	nop
 8002c10:	42470000 	.word	0x42470000
 8002c14:	40023800 	.word	0x40023800

08002c18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c18:	4916      	ldr	r1, [pc, #88]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002c1a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1c:	688b      	ldr	r3, [r1, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d01b      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x46>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d117      	bne.n	8002c5a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c2c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c30:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c38:	d113      	bne.n	8002c62 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3a:	480f      	ldr	r0, [pc, #60]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x60>)
 8002c3c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002c40:	fba1 0100 	umull	r0, r1, r1, r0
 8002c44:	f7fd fac8 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002c50:	3301      	adds	r3, #1
 8002c52:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002c54:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c58:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002c5a:	4807      	ldr	r0, [pc, #28]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002c5c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5e:	4807      	ldr	r0, [pc, #28]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002c60:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4806      	ldr	r0, [pc, #24]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x64>)
 8002c64:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002c68:	2300      	movs	r3, #0
 8002c6a:	fba1 0100 	umull	r0, r1, r1, r0
 8002c6e:	f7fd fab3 	bl	80001d8 <__aeabi_uldivmod>
 8002c72:	e7e9      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x30>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	00f42400 	.word	0x00f42400
 8002c7c:	007a1200 	.word	0x007a1200

08002c80 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002c80:	2800      	cmp	r0, #0
 8002c82:	f000 8087 	beq.w	8002d94 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c86:	4a48      	ldr	r2, [pc, #288]	; (8002da8 <HAL_RCC_ClockConfig+0x128>)
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	428b      	cmp	r3, r1
{
 8002c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c94:	460d      	mov	r5, r1
 8002c96:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	d209      	bcs.n	8002cae <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	b2cb      	uxtb	r3, r1
 8002c9c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	428b      	cmp	r3, r1
 8002ca6:	d002      	beq.n	8002cae <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
}
 8002caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	0798      	lsls	r0, r3, #30
 8002cb2:	d514      	bpl.n	8002cde <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	0759      	lsls	r1, r3, #29
 8002cb6:	d504      	bpl.n	8002cc2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb8:	493c      	ldr	r1, [pc, #240]	; (8002dac <HAL_RCC_ClockConfig+0x12c>)
 8002cba:	688a      	ldr	r2, [r1, #8]
 8002cbc:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002cc0:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc2:	071a      	lsls	r2, r3, #28
 8002cc4:	d504      	bpl.n	8002cd0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc6:	4939      	ldr	r1, [pc, #228]	; (8002dac <HAL_RCC_ClockConfig+0x12c>)
 8002cc8:	688a      	ldr	r2, [r1, #8]
 8002cca:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002cce:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4936      	ldr	r1, [pc, #216]	; (8002dac <HAL_RCC_ClockConfig+0x12c>)
 8002cd2:	68a0      	ldr	r0, [r4, #8]
 8002cd4:	688a      	ldr	r2, [r1, #8]
 8002cd6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002cda:	4302      	orrs	r2, r0
 8002cdc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	07df      	lsls	r7, r3, #31
 8002ce0:	d521      	bpl.n	8002d26 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce2:	6862      	ldr	r2, [r4, #4]
 8002ce4:	2a01      	cmp	r2, #1
 8002ce6:	d057      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce8:	1e93      	subs	r3, r2, #2
 8002cea:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cec:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_RCC_ClockConfig+0x12c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf0:	d94d      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	0799      	lsls	r1, r3, #30
 8002cf4:	d5d8      	bpl.n	8002ca8 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4e2d      	ldr	r6, [pc, #180]	; (8002dac <HAL_RCC_ClockConfig+0x12c>)
 8002cf8:	68b3      	ldr	r3, [r6, #8]
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002d02:	f7ff f9f3 	bl	80020ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d06:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002d0a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0c:	e004      	b.n	8002d18 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0e:	f7ff f9ed 	bl	80020ec <HAL_GetTick>
 8002d12:	1bc0      	subs	r0, r0, r7
 8002d14:	4540      	cmp	r0, r8
 8002d16:	d844      	bhi.n	8002da2 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d18:	68b3      	ldr	r3, [r6, #8]
 8002d1a:	6862      	ldr	r2, [r4, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d24:	d1f3      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d26:	4a20      	ldr	r2, [pc, #128]	; (8002da8 <HAL_RCC_ClockConfig+0x128>)
 8002d28:	6813      	ldr	r3, [r2, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	42ab      	cmp	r3, r5
 8002d30:	d906      	bls.n	8002d40 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	b2eb      	uxtb	r3, r5
 8002d34:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	42ab      	cmp	r3, r5
 8002d3e:	d1b3      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	075a      	lsls	r2, r3, #29
 8002d44:	d506      	bpl.n	8002d54 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d46:	4919      	ldr	r1, [pc, #100]	; (8002dac <HAL_RCC_ClockConfig+0x12c>)
 8002d48:	68e0      	ldr	r0, [r4, #12]
 8002d4a:	688a      	ldr	r2, [r1, #8]
 8002d4c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002d50:	4302      	orrs	r2, r0
 8002d52:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d54:	071b      	lsls	r3, r3, #28
 8002d56:	d507      	bpl.n	8002d68 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_RCC_ClockConfig+0x12c>)
 8002d5a:	6921      	ldr	r1, [r4, #16]
 8002d5c:	6893      	ldr	r3, [r2, #8]
 8002d5e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002d62:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d66:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d68:	f7ff ff56 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002d6c:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <HAL_RCC_ClockConfig+0x12c>)
 8002d6e:	4c10      	ldr	r4, [pc, #64]	; (8002db0 <HAL_RCC_ClockConfig+0x130>)
 8002d70:	6892      	ldr	r2, [r2, #8]
 8002d72:	4910      	ldr	r1, [pc, #64]	; (8002db4 <HAL_RCC_ClockConfig+0x134>)
 8002d74:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d78:	4603      	mov	r3, r0
 8002d7a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002d7c:	480e      	ldr	r0, [pc, #56]	; (8002db8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d7e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002d80:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d82:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002d84:	f7ff f968 	bl	8002058 <HAL_InitTick>
  return HAL_OK;
 8002d88:	2000      	movs	r0, #0
}
 8002d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	0198      	lsls	r0, r3, #6
 8002d90:	d4b1      	bmi.n	8002cf6 <HAL_RCC_ClockConfig+0x76>
 8002d92:	e789      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
}
 8002d96:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <HAL_RCC_ClockConfig+0x12c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	039e      	lsls	r6, r3, #14
 8002d9e:	d4aa      	bmi.n	8002cf6 <HAL_RCC_ClockConfig+0x76>
 8002da0:	e782      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002da2:	2003      	movs	r0, #3
 8002da4:	e781      	b.n	8002caa <HAL_RCC_ClockConfig+0x2a>
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	0800383c 	.word	0x0800383c
 8002db4:	20002cfc 	.word	0x20002cfc
 8002db8:	20002d04 	.word	0x20002d04

08002dbc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002dbe:	4905      	ldr	r1, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002dc4:	6808      	ldr	r0, [r1, #0]
 8002dc6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
}
 8002dcc:	40d8      	lsrs	r0, r3
 8002dce:	4770      	bx	lr
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	20002cfc 	.word	0x20002cfc
 8002dd8:	0800384c 	.word	0x0800384c

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002dde:	4905      	ldr	r1, [pc, #20]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002de4:	6808      	ldr	r0, [r1, #0]
 8002de6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
}
 8002dec:	40d8      	lsrs	r0, r3
 8002dee:	4770      	bx	lr
 8002df0:	40023800 	.word	0x40023800
 8002df4:	20002cfc 	.word	0x20002cfc
 8002df8:	0800384c 	.word	0x0800384c

08002dfc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d076      	beq.n	8002eee <HAL_TIM_Base_Init+0xf2>
{
 8002e00:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e06:	4604      	mov	r4, r0
 8002e08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d055      	beq.n	8002ebc <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e12:	4938      	ldr	r1, [pc, #224]	; (8002ef4 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	2302      	movs	r3, #2
 8002e16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002e1c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1e:	d052      	beq.n	8002ec6 <HAL_TIM_Base_Init+0xca>
 8002e20:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002e24:	d021      	beq.n	8002e6a <HAL_TIM_Base_Init+0x6e>
 8002e26:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8002e2a:	428a      	cmp	r2, r1
 8002e2c:	d01d      	beq.n	8002e6a <HAL_TIM_Base_Init+0x6e>
 8002e2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002e32:	428a      	cmp	r2, r1
 8002e34:	d019      	beq.n	8002e6a <HAL_TIM_Base_Init+0x6e>
 8002e36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002e3a:	428a      	cmp	r2, r1
 8002e3c:	d015      	beq.n	8002e6a <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e3e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8002e42:	428a      	cmp	r2, r1
 8002e44:	d015      	beq.n	8002e72 <HAL_TIM_Base_Init+0x76>
 8002e46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002e4a:	428a      	cmp	r2, r1
 8002e4c:	d011      	beq.n	8002e72 <HAL_TIM_Base_Init+0x76>
 8002e4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002e52:	428a      	cmp	r2, r1
 8002e54:	d00d      	beq.n	8002e72 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e56:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e58:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e5e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002e60:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e62:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e64:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e66:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e68:	e010      	b.n	8002e8c <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8002e6a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e70:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e72:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e74:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e80:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e82:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002e84:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002e86:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e88:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e8a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e90:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e98:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002ea0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002eb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002eb8:	2000      	movs	r0, #0
}
 8002eba:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002ebc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ec0:	f7ff f802 	bl	8001ec8 <HAL_TIM_Base_MspInit>
 8002ec4:	e7a4      	b.n	8002e10 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002ec6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ece:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed6:	69a1      	ldr	r1, [r4, #24]
 8002ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002edc:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002ede:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee0:	68e3      	ldr	r3, [r4, #12]
 8002ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ee4:	6863      	ldr	r3, [r4, #4]
 8002ee6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee8:	6963      	ldr	r3, [r4, #20]
 8002eea:	6313      	str	r3, [r2, #48]	; 0x30
 8002eec:	e7ce      	b.n	8002e8c <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8002eee:	2001      	movs	r0, #1
}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40010000 	.word	0x40010000

08002ef8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	f000 808f 	beq.w	800301c <HAL_UART_Init+0x124>
{
 8002efe:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f00:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f04:	4604      	mov	r4, r0
 8002f06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8081 	beq.w	8003012 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f10:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f12:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8002f14:	2224      	movs	r2, #36	; 0x24
 8002f16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f20:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f22:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f24:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f26:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002f2a:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f2c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f2e:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f30:	4302      	orrs	r2, r0
 8002f32:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002f34:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f36:	4302      	orrs	r2, r0
 8002f38:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002f3a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002f3e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f42:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f4c:	4934      	ldr	r1, [pc, #208]	; (8003020 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f52:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f54:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f56:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f58:	d035      	beq.n	8002fc6 <HAL_UART_Init+0xce>
 8002f5a:	4a32      	ldr	r2, [pc, #200]	; (8003024 <HAL_UART_Init+0x12c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d032      	beq.n	8002fc6 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f60:	f7ff ff2c 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f64:	69e3      	ldr	r3, [r4, #28]
 8002f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6a:	d032      	beq.n	8002fd2 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f6c:	6863      	ldr	r3, [r4, #4]
 8002f6e:	2119      	movs	r1, #25
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	fba0 0101 	umull	r0, r1, r0, r1
 8002f76:	0f9b      	lsrs	r3, r3, #30
 8002f78:	f7fd f92e 	bl	80001d8 <__aeabi_uldivmod>
 8002f7c:	492a      	ldr	r1, [pc, #168]	; (8003028 <HAL_UART_Init+0x130>)
 8002f7e:	fba1 3200 	umull	r3, r2, r1, r0
 8002f82:	0952      	lsrs	r2, r2, #5
 8002f84:	2564      	movs	r5, #100	; 0x64
 8002f86:	fb05 0012 	mls	r0, r5, r2, r0
 8002f8a:	0100      	lsls	r0, r0, #4
 8002f8c:	3032      	adds	r0, #50	; 0x32
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	fba1 1000 	umull	r1, r0, r1, r0
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8002f9a:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002faa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002fac:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fae:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002fb0:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002fb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fba:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fbe:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8002fc2:	4628      	mov	r0, r5
}
 8002fc4:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fc6:	f7ff ff09 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fca:	69e3      	ldr	r3, [r4, #28]
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd0:	d1cc      	bne.n	8002f6c <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd2:	6862      	ldr	r2, [r4, #4]
 8002fd4:	2119      	movs	r1, #25
 8002fd6:	1892      	adds	r2, r2, r2
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	fba0 0101 	umull	r0, r1, r0, r1
 8002fe2:	f7fd f8f9 	bl	80001d8 <__aeabi_uldivmod>
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_UART_Init+0x130>)
 8002fe8:	fba3 2100 	umull	r2, r1, r3, r0
 8002fec:	094d      	lsrs	r5, r1, #5
 8002fee:	2264      	movs	r2, #100	; 0x64
 8002ff0:	fb02 0215 	mls	r2, r2, r5, r0
 8002ff4:	00d2      	lsls	r2, r2, #3
 8002ff6:	3232      	adds	r2, #50	; 0x32
 8002ff8:	fba3 3202 	umull	r3, r2, r3, r2
 8002ffc:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8003000:	0912      	lsrs	r2, r2, #4
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8003008:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800300c:	440a      	add	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	e7c4      	b.n	8002f9c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8003012:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003016:	f7fe ff6f 	bl	8001ef8 <HAL_UART_MspInit>
 800301a:	e779      	b.n	8002f10 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 800301c:	2001      	movs	r0, #1
}
 800301e:	4770      	bx	lr
 8003020:	40011000 	.word	0x40011000
 8003024:	40011400 	.word	0x40011400
 8003028:	51eb851f 	.word	0x51eb851f

0800302c <HAL_UART_Transmit>:
{
 800302c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003030:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003032:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8003036:	2820      	cmp	r0, #32
 8003038:	d177      	bne.n	800312a <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 800303a:	4689      	mov	r9, r1
 800303c:	2900      	cmp	r1, #0
 800303e:	d040      	beq.n	80030c2 <HAL_UART_Transmit+0x96>
 8003040:	4614      	mov	r4, r2
 8003042:	2a00      	cmp	r2, #0
 8003044:	d03d      	beq.n	80030c2 <HAL_UART_Transmit+0x96>
 8003046:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8003048:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800304c:	2b01      	cmp	r3, #1
 800304e:	d06c      	beq.n	800312a <HAL_UART_Transmit+0xfe>
 8003050:	2301      	movs	r3, #1
 8003052:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003056:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003060:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003064:	f7ff f842 	bl	80020ec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003068:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 800306a:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003070:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8003072:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003074:	d05c      	beq.n	8003130 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8003076:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8003078:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800307a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800307c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003080:	2b00      	cmp	r3, #0
 8003082:	d07e      	beq.n	8003182 <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003084:	682c      	ldr	r4, [r5, #0]
 8003086:	1c72      	adds	r2, r6, #1
 8003088:	d11e      	bne.n	80030c8 <HAL_UART_Transmit+0x9c>
 800308a:	6822      	ldr	r2, [r4, #0]
 800308c:	0613      	lsls	r3, r2, #24
 800308e:	d5fc      	bpl.n	800308a <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8003090:	f1b9 0f00 	cmp.w	r9, #0
 8003094:	d044      	beq.n	8003120 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003096:	f819 3b01 	ldrb.w	r3, [r9], #1
 800309a:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 800309c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a4:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ec      	bne.n	8003086 <HAL_UART_Transmit+0x5a>
 80030ac:	1c71      	adds	r1, r6, #1
 80030ae:	d145      	bne.n	800313c <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	065a      	lsls	r2, r3, #25
 80030b4:	d5fc      	bpl.n	80030b0 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80030b6:	2320      	movs	r3, #32
 80030b8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 80030bc:	2000      	movs	r0, #0
}
 80030be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80030c2:	2001      	movs	r0, #1
}
 80030c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	0618      	lsls	r0, r3, #24
 80030cc:	d4e0      	bmi.n	8003090 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030ce:	b12e      	cbz	r6, 80030dc <HAL_UART_Transmit+0xb0>
 80030d0:	f7ff f80c 	bl	80020ec <HAL_GetTick>
 80030d4:	1bc0      	subs	r0, r0, r7
 80030d6:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d8:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030da:	d2d4      	bcs.n	8003086 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	f104 030c 	add.w	r3, r4, #12
 80030e0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	f104 010c 	add.w	r1, r4, #12
 80030ec:	e841 3200 	strex	r2, r3, [r1]
 80030f0:	2a00      	cmp	r2, #0
 80030f2:	d1f3      	bne.n	80030dc <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	f104 0314 	add.w	r3, r4, #20
 80030f8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	f104 0114 	add.w	r1, r4, #20
 8003104:	e841 3200 	strex	r2, r3, [r1]
 8003108:	2a00      	cmp	r2, #0
 800310a:	d1f3      	bne.n	80030f4 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 800310c:	2320      	movs	r3, #32
 800310e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8003112:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8003116:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 800311a:	2003      	movs	r0, #3
}
 800311c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003120:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003128:	e7b7      	b.n	800309a <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 800312a:	2002      	movs	r0, #2
}
 800312c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003130:	692b      	ldr	r3, [r5, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d19f      	bne.n	8003076 <HAL_UART_Transmit+0x4a>
 8003136:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8003138:	4699      	mov	r9, r3
 800313a:	e79c      	b.n	8003076 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	065b      	lsls	r3, r3, #25
 8003140:	d4b9      	bmi.n	80030b6 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003142:	b12e      	cbz	r6, 8003150 <HAL_UART_Transmit+0x124>
 8003144:	f7fe ffd2 	bl	80020ec <HAL_GetTick>
 8003148:	1bc0      	subs	r0, r0, r7
 800314a:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800314c:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800314e:	d2ad      	bcs.n	80030ac <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	f104 030c 	add.w	r3, r4, #12
 8003154:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003158:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	f104 010c 	add.w	r1, r4, #12
 8003160:	e841 3200 	strex	r2, r3, [r1]
 8003164:	2a00      	cmp	r2, #0
 8003166:	d1f3      	bne.n	8003150 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	f104 0314 	add.w	r3, r4, #20
 800316c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003170:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003174:	f104 0114 	add.w	r1, r4, #20
 8003178:	e841 3200 	strex	r2, r3, [r1]
 800317c:	2a00      	cmp	r2, #0
 800317e:	d1f3      	bne.n	8003168 <HAL_UART_Transmit+0x13c>
 8003180:	e7c4      	b.n	800310c <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	682c      	ldr	r4, [r5, #0]
 8003184:	e792      	b.n	80030ac <HAL_UART_Transmit+0x80>
 8003186:	bf00      	nop

08003188 <HAL_UART_TxCpltCallback>:
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <HAL_UART_RxHalfCpltCallback>:
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop

08003190 <HAL_UART_ErrorCallback>:
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop

08003194 <UART_DMAError>:
{
 8003194:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003196:	6b80      	ldr	r0, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003198:	6803      	ldr	r3, [r0, #0]
 800319a:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800319c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80031a0:	2a21      	cmp	r2, #33	; 0x21
 80031a2:	d00b      	beq.n	80031bc <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031a4:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031a6:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80031aa:	2a22      	cmp	r2, #34	; 0x22
 80031ac:	d01e      	beq.n	80031ec <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80031ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031b0:	f043 0310 	orr.w	r3, r3, #16
 80031b4:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80031b6:	f7ff ffeb 	bl	8003190 <HAL_UART_ErrorCallback>
}
 80031ba:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80031bc:	0609      	lsls	r1, r1, #24
 80031be:	d5f1      	bpl.n	80031a4 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80031c0:	2200      	movs	r2, #0
 80031c2:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	f103 020c 	add.w	r2, r3, #12
 80031c8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80031cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	f103 0c0c 	add.w	ip, r3, #12
 80031d4:	e84c 2100 	strex	r1, r2, [ip]
 80031d8:	2900      	cmp	r1, #0
 80031da:	d1f3      	bne.n	80031c4 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 80031dc:	2220      	movs	r2, #32
 80031de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031e2:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031e4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80031e8:	2a22      	cmp	r2, #34	; 0x22
 80031ea:	d1e0      	bne.n	80031ae <UART_DMAError+0x1a>
 80031ec:	064a      	lsls	r2, r1, #25
 80031ee:	d5de      	bpl.n	80031ae <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 80031f0:	2200      	movs	r2, #0
 80031f2:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	f103 020c 	add.w	r2, r3, #12
 80031f8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	f103 0c0c 	add.w	ip, r3, #12
 8003204:	e84c 2100 	strex	r1, r2, [ip]
 8003208:	2900      	cmp	r1, #0
 800320a:	d1f3      	bne.n	80031f4 <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	f103 0214 	add.w	r2, r3, #20
 8003210:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003214:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	f103 0c14 	add.w	ip, r3, #20
 800321c:	e84c 2100 	strex	r1, r2, [ip]
 8003220:	2900      	cmp	r1, #0
 8003222:	d1f3      	bne.n	800320c <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003224:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003226:	2a01      	cmp	r2, #1
 8003228:	d005      	beq.n	8003236 <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 800322a:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800322e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003234:	e7bb      	b.n	80031ae <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	f103 020c 	add.w	r2, r3, #12
 800323a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800323e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	f103 0c0c 	add.w	ip, r3, #12
 8003246:	e84c 2100 	strex	r1, r2, [ip]
 800324a:	2900      	cmp	r1, #0
 800324c:	d1f3      	bne.n	8003236 <UART_DMAError+0xa2>
 800324e:	e7ec      	b.n	800322a <UART_DMAError+0x96>

08003250 <UART_DMAAbortOnError>:
{
 8003250:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003252:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003254:	2300      	movs	r3, #0
 8003256:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003258:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800325a:	f7ff ff99 	bl	8003190 <HAL_UART_ErrorCallback>
}
 800325e:	bd08      	pop	{r3, pc}

08003260 <HAL_UARTEx_RxEventCallback>:
}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop

08003264 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003264:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003266:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800326a:	2b01      	cmp	r3, #1
 800326c:	d002      	beq.n	8003274 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800326e:	f7ff ff8d 	bl	800318c <HAL_UART_RxHalfCpltCallback>
}
 8003272:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003274:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003276:	0849      	lsrs	r1, r1, #1
 8003278:	f7ff fff2 	bl	8003260 <HAL_UARTEx_RxEventCallback>
}
 800327c:	bd08      	pop	{r3, pc}
 800327e:	bf00      	nop

08003280 <UART_DMAReceiveCplt>:
{
 8003280:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003282:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003284:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800328c:	d12b      	bne.n	80032e6 <UART_DMAReceiveCplt+0x66>
    huart->RxXferCount = 0U;
 800328e:	6803      	ldr	r3, [r0, #0]
 8003290:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	f103 020c 	add.w	r2, r3, #12
 8003296:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800329a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	f103 0c0c 	add.w	ip, r3, #12
 80032a2:	e84c 2100 	strex	r1, r2, [ip]
 80032a6:	2900      	cmp	r1, #0
 80032a8:	d1f3      	bne.n	8003292 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	f103 0214 	add.w	r2, r3, #20
 80032ae:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	f103 0c14 	add.w	ip, r3, #20
 80032ba:	e84c 2100 	strex	r1, r2, [ip]
 80032be:	2900      	cmp	r1, #0
 80032c0:	d1f3      	bne.n	80032aa <UART_DMAReceiveCplt+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	f103 0214 	add.w	r2, r3, #20
 80032c6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	f103 0c14 	add.w	ip, r3, #20
 80032d2:	e84c 2100 	strex	r1, r2, [ip]
 80032d6:	2900      	cmp	r1, #0
 80032d8:	d1f3      	bne.n	80032c2 <UART_DMAReceiveCplt+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 80032da:	2220      	movs	r2, #32
 80032dc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80032e2:	2a01      	cmp	r2, #1
 80032e4:	d005      	beq.n	80032f2 <UART_DMAReceiveCplt+0x72>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d00f      	beq.n	800330c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80032ec:	f7fe fcbe 	bl	8001c6c <HAL_UART_RxCpltCallback>
}
 80032f0:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	f103 020c 	add.w	r2, r3, #12
 80032f6:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	f103 0c0c 	add.w	ip, r3, #12
 8003302:	e84c 2100 	strex	r1, r2, [ip]
 8003306:	2900      	cmp	r1, #0
 8003308:	d1f3      	bne.n	80032f2 <UART_DMAReceiveCplt+0x72>
 800330a:	e7ec      	b.n	80032e6 <UART_DMAReceiveCplt+0x66>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800330c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800330e:	f7ff ffa7 	bl	8003260 <HAL_UARTEx_RxEventCallback>
}
 8003312:	bd08      	pop	{r3, pc}

08003314 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003314:	6883      	ldr	r3, [r0, #8]
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d044      	beq.n	80033a6 <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800331c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800331e:	2b00      	cmp	r3, #0
 8003320:	d039      	beq.n	8003396 <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003322:	6803      	ldr	r3, [r0, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800332c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800332e:	3301      	adds	r3, #1
 8003330:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003332:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003334:	3b01      	subs	r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800333a:	2b00      	cmp	r3, #0
 800333c:	d132      	bne.n	80033a4 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800333e:	6802      	ldr	r2, [r0, #0]
 8003340:	68d1      	ldr	r1, [r2, #12]
 8003342:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003346:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003348:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800334a:	68d1      	ldr	r1, [r2, #12]
 800334c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003350:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003352:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003354:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003358:	f021 0101 	bic.w	r1, r1, #1
 800335c:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800335e:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003362:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003364:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003366:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003368:	d128      	bne.n	80033bc <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336a:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	f102 030c 	add.w	r3, r2, #12
 8003370:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003374:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	f102 0c0c 	add.w	ip, r2, #12
 800337c:	e84c 3100 	strex	r1, r3, [ip]
 8003380:	2900      	cmp	r1, #0
 8003382:	d1f3      	bne.n	800336c <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003384:	6813      	ldr	r3, [r2, #0]
 8003386:	06db      	lsls	r3, r3, #27
 8003388:	d422      	bmi.n	80033d0 <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800338a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800338c:	f7ff ff68 	bl	8003260 <HAL_UARTEx_RxEventCallback>
}
 8003390:	b003      	add	sp, #12
 8003392:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003396:	6903      	ldr	r3, [r0, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1c2      	bne.n	8003322 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800339c:	6803      	ldr	r3, [r0, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	7013      	strb	r3, [r2, #0]
 80033a2:	e7c3      	b.n	800332c <UART_Receive_IT.part.0.isra.0+0x18>
 80033a4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a6:	6903      	ldr	r3, [r0, #16]
 80033a8:	b96b      	cbnz	r3, 80033c6 <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033aa:	6802      	ldr	r2, [r0, #0]
 80033ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80033ae:	6852      	ldr	r2, [r2, #4]
 80033b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b4:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80033b8:	6283      	str	r3, [r0, #40]	; 0x28
 80033ba:	e7ba      	b.n	8003332 <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 80033bc:	f7fe fc56 	bl	8001c6c <HAL_UART_RxCpltCallback>
}
 80033c0:	b003      	add	sp, #12
 80033c2:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033c6:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	7013      	strb	r3, [r2, #0]
 80033ce:	e7ad      	b.n	800332c <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033d0:	2300      	movs	r3, #0
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	6853      	ldr	r3, [r2, #4]
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	9b01      	ldr	r3, [sp, #4]
 80033de:	e7d4      	b.n	800338a <UART_Receive_IT.part.0.isra.0+0x76>

080033e0 <HAL_UART_IRQHandler>:
{
 80033e0:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033e2:	6803      	ldr	r3, [r0, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033e6:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033e8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80033ea:	f012 0f0f 	tst.w	r2, #15
{
 80033ee:	b083      	sub	sp, #12
 80033f0:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80033f2:	d16e      	bne.n	80034d2 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033f4:	0695      	lsls	r5, r2, #26
 80033f6:	d502      	bpl.n	80033fe <HAL_UART_IRQHandler+0x1e>
 80033f8:	068d      	lsls	r5, r1, #26
 80033fa:	f100 80b1 	bmi.w	8003560 <HAL_UART_IRQHandler+0x180>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003400:	2801      	cmp	r0, #1
 8003402:	d00b      	beq.n	800341c <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003404:	0610      	lsls	r0, r2, #24
 8003406:	d502      	bpl.n	800340e <HAL_UART_IRQHandler+0x2e>
 8003408:	060d      	lsls	r5, r1, #24
 800340a:	f100 80b3 	bmi.w	8003574 <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800340e:	0650      	lsls	r0, r2, #25
 8003410:	d502      	bpl.n	8003418 <HAL_UART_IRQHandler+0x38>
 8003412:	064a      	lsls	r2, r1, #25
 8003414:	f100 80cd 	bmi.w	80035b2 <HAL_UART_IRQHandler+0x1d2>
}
 8003418:	b003      	add	sp, #12
 800341a:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 800341c:	06d5      	lsls	r5, r2, #27
 800341e:	d5f1      	bpl.n	8003404 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003420:	06c8      	lsls	r0, r1, #27
 8003422:	d5ef      	bpl.n	8003404 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003424:	2200      	movs	r2, #0
 8003426:	9201      	str	r2, [sp, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	9201      	str	r2, [sp, #4]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	9201      	str	r2, [sp, #4]
 8003430:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	0655      	lsls	r5, r2, #25
 8003436:	f140 8116 	bpl.w	8003666 <HAL_UART_IRQHandler+0x286>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800343a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800343c:	6802      	ldr	r2, [r0, #0]
 800343e:	6852      	ldr	r2, [r2, #4]
 8003440:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003442:	2a00      	cmp	r2, #0
 8003444:	d0e8      	beq.n	8003418 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003446:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003448:	4291      	cmp	r1, r2
 800344a:	d9e5      	bls.n	8003418 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800344c:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800344e:	69c2      	ldr	r2, [r0, #28]
 8003450:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003454:	d036      	beq.n	80034c4 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	f103 020c 	add.w	r2, r3, #12
 800345a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800345e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	f103 050c 	add.w	r5, r3, #12
 8003466:	e845 2100 	strex	r1, r2, [r5]
 800346a:	2900      	cmp	r1, #0
 800346c:	d1f3      	bne.n	8003456 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	f103 0214 	add.w	r2, r3, #20
 8003472:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003476:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	f103 0514 	add.w	r5, r3, #20
 800347e:	e845 2100 	strex	r1, r2, [r5]
 8003482:	2900      	cmp	r1, #0
 8003484:	d1f3      	bne.n	800346e <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	f103 0214 	add.w	r2, r3, #20
 800348a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	f103 0514 	add.w	r5, r3, #20
 8003496:	e845 2100 	strex	r1, r2, [r5]
 800349a:	2900      	cmp	r1, #0
 800349c:	d1f3      	bne.n	8003486 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 800349e:	2220      	movs	r2, #32
 80034a0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a4:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	f103 020c 	add.w	r2, r3, #12
 80034aa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	f103 050c 	add.w	r5, r3, #12
 80034b6:	e845 2100 	strex	r1, r2, [r5]
 80034ba:	2900      	cmp	r1, #0
 80034bc:	d1f3      	bne.n	80034a6 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034be:	f7fe ff7d 	bl	80023bc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034c2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80034c4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80034c6:	1ac9      	subs	r1, r1, r3
 80034c8:	4620      	mov	r0, r4
 80034ca:	b289      	uxth	r1, r1
 80034cc:	f7ff fec8 	bl	8003260 <HAL_UARTEx_RxEventCallback>
 80034d0:	e7a2      	b.n	8003418 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034d2:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034d6:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80034da:	4328      	orrs	r0, r5
 80034dc:	d08f      	beq.n	80033fe <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034de:	07d0      	lsls	r0, r2, #31
 80034e0:	d505      	bpl.n	80034ee <HAL_UART_IRQHandler+0x10e>
 80034e2:	05c8      	lsls	r0, r1, #23
 80034e4:	d503      	bpl.n	80034ee <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80034e8:	f040 0001 	orr.w	r0, r0, #1
 80034ec:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ee:	0750      	lsls	r0, r2, #29
 80034f0:	d531      	bpl.n	8003556 <HAL_UART_IRQHandler+0x176>
 80034f2:	b14d      	cbz	r5, 8003508 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80034f6:	f040 0002 	orr.w	r0, r0, #2
 80034fa:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034fc:	0790      	lsls	r0, r2, #30
 80034fe:	d503      	bpl.n	8003508 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003500:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003502:	f040 0004 	orr.w	r0, r0, #4
 8003506:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003508:	0710      	lsls	r0, r2, #28
 800350a:	d507      	bpl.n	800351c <HAL_UART_IRQHandler+0x13c>
 800350c:	f001 0020 	and.w	r0, r1, #32
 8003510:	4328      	orrs	r0, r5
 8003512:	d003      	beq.n	800351c <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003514:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003516:	f040 0008 	orr.w	r0, r0, #8
 800351a:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800351e:	2800      	cmp	r0, #0
 8003520:	f43f af7a 	beq.w	8003418 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003524:	0690      	lsls	r0, r2, #26
 8003526:	d509      	bpl.n	800353c <HAL_UART_IRQHandler+0x15c>
 8003528:	0689      	lsls	r1, r1, #26
 800352a:	d507      	bpl.n	800353c <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800352c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003530:	2a22      	cmp	r2, #34	; 0x22
 8003532:	d103      	bne.n	800353c <HAL_UART_IRQHandler+0x15c>
 8003534:	4620      	mov	r0, r4
 8003536:	f7ff feed 	bl	8003314 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800353e:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003540:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003544:	f005 0508 	and.w	r5, r5, #8
 8003548:	4315      	orrs	r5, r2
 800354a:	d13d      	bne.n	80035c8 <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 800354c:	4620      	mov	r0, r4
 800354e:	f7ff fe1f 	bl	8003190 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003552:	6425      	str	r5, [r4, #64]	; 0x40
 8003554:	e760      	b.n	8003418 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003556:	0790      	lsls	r0, r2, #30
 8003558:	d5d6      	bpl.n	8003508 <HAL_UART_IRQHandler+0x128>
 800355a:	2d00      	cmp	r5, #0
 800355c:	d1d0      	bne.n	8003500 <HAL_UART_IRQHandler+0x120>
 800355e:	e7d3      	b.n	8003508 <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003560:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003564:	2b22      	cmp	r3, #34	; 0x22
 8003566:	f47f af57 	bne.w	8003418 <HAL_UART_IRQHandler+0x38>
}
 800356a:	b003      	add	sp, #12
 800356c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003570:	f7ff bed0 	b.w	8003314 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003574:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003578:	2a21      	cmp	r2, #33	; 0x21
 800357a:	f47f af4d 	bne.w	8003418 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357e:	68a2      	ldr	r2, [r4, #8]
 8003580:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003584:	f000 80a8 	beq.w	80036d8 <HAL_UART_IRQHandler+0x2f8>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003588:	6a22      	ldr	r2, [r4, #32]
 800358a:	1c51      	adds	r1, r2, #1
 800358c:	6221      	str	r1, [r4, #32]
 800358e:	7812      	ldrb	r2, [r2, #0]
 8003590:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003592:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003594:	3a01      	subs	r2, #1
 8003596:	b292      	uxth	r2, r2
 8003598:	84e2      	strh	r2, [r4, #38]	; 0x26
 800359a:	2a00      	cmp	r2, #0
 800359c:	f47f af3c 	bne.w	8003418 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a6:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	e732      	b.n	8003418 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035b2:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80035b4:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ba:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80035bc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80035be:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80035c2:	f7ff fde1 	bl	8003188 <HAL_UART_TxCpltCallback>
    return;
 80035c6:	e727      	b.n	8003418 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	f103 020c 	add.w	r2, r3, #12
 80035cc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	f103 000c 	add.w	r0, r3, #12
 80035d8:	e840 2100 	strex	r1, r2, [r0]
 80035dc:	2900      	cmp	r1, #0
 80035de:	d1f3      	bne.n	80035c8 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	f103 0214 	add.w	r2, r3, #20
 80035e4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	f103 0014 	add.w	r0, r3, #20
 80035f0:	e840 2100 	strex	r1, r2, [r0]
 80035f4:	2900      	cmp	r1, #0
 80035f6:	d1f3      	bne.n	80035e0 <HAL_UART_IRQHandler+0x200>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035fa:	2a01      	cmp	r2, #1
 80035fc:	d022      	beq.n	8003644 <HAL_UART_IRQHandler+0x264>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fe:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003600:	2120      	movs	r1, #32
 8003602:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003606:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	0652      	lsls	r2, r2, #25
 800360c:	d527      	bpl.n	800365e <HAL_UART_IRQHandler+0x27e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	f103 0214 	add.w	r2, r3, #20
 8003612:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	f103 0014 	add.w	r0, r3, #20
 800361e:	e840 2100 	strex	r1, r2, [r0]
 8003622:	2900      	cmp	r1, #0
 8003624:	d1f3      	bne.n	800360e <HAL_UART_IRQHandler+0x22e>
          if (huart->hdmarx != NULL)
 8003626:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003628:	b1c8      	cbz	r0, 800365e <HAL_UART_IRQHandler+0x27e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <HAL_UART_IRQHandler+0x310>)
 800362c:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800362e:	f7fe ff0d 	bl	800244c <HAL_DMA_Abort_IT>
 8003632:	2800      	cmp	r0, #0
 8003634:	f43f aef0 	beq.w	8003418 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003638:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800363a:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 800363c:	b003      	add	sp, #12
 800363e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003642:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	f103 020c 	add.w	r2, r3, #12
 8003648:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	f103 000c 	add.w	r0, r3, #12
 8003654:	e840 2100 	strex	r1, r2, [r0]
 8003658:	2900      	cmp	r1, #0
 800365a:	d1f3      	bne.n	8003644 <HAL_UART_IRQHandler+0x264>
 800365c:	e7cf      	b.n	80035fe <HAL_UART_IRQHandler+0x21e>
            HAL_UART_ErrorCallback(huart);
 800365e:	4620      	mov	r0, r4
 8003660:	f7ff fd96 	bl	8003190 <HAL_UART_ErrorCallback>
 8003664:	e6d8      	b.n	8003418 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003666:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8003668:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800366a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800366c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800366e:	2a00      	cmp	r2, #0
 8003670:	f43f aed2 	beq.w	8003418 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003674:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003676:	1a51      	subs	r1, r2, r1
 8003678:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800367a:	2900      	cmp	r1, #0
 800367c:	f43f aecc 	beq.w	8003418 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	f103 020c 	add.w	r2, r3, #12
 8003684:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003688:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	f103 050c 	add.w	r5, r3, #12
 8003690:	e845 2000 	strex	r0, r2, [r5]
 8003694:	2800      	cmp	r0, #0
 8003696:	d1f3      	bne.n	8003680 <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	f103 0214 	add.w	r2, r3, #20
 800369c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	f103 0514 	add.w	r5, r3, #20
 80036a8:	e845 2000 	strex	r0, r2, [r5]
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d1f3      	bne.n	8003698 <HAL_UART_IRQHandler+0x2b8>
        huart->RxState = HAL_UART_STATE_READY;
 80036b0:	2220      	movs	r2, #32
 80036b2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b6:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	f103 020c 	add.w	r2, r3, #12
 80036bc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	f103 050c 	add.w	r5, r3, #12
 80036c8:	e845 2000 	strex	r0, r2, [r5]
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d1f3      	bne.n	80036b8 <HAL_UART_IRQHandler+0x2d8>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036d0:	4620      	mov	r0, r4
 80036d2:	f7ff fdc5 	bl	8003260 <HAL_UARTEx_RxEventCallback>
 80036d6:	e69f      	b.n	8003418 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d8:	6922      	ldr	r2, [r4, #16]
 80036da:	2a00      	cmp	r2, #0
 80036dc:	f47f af54 	bne.w	8003588 <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036e0:	6a22      	ldr	r2, [r4, #32]
 80036e2:	f832 1b02 	ldrh.w	r1, [r2], #2
 80036e6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80036ea:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036ec:	6222      	str	r2, [r4, #32]
 80036ee:	e750      	b.n	8003592 <HAL_UART_IRQHandler+0x1b2>
 80036f0:	08003251 	.word	0x08003251

080036f4 <UART_Start_Receive_DMA>:
{
 80036f4:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036f6:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	2500      	movs	r5, #0
{
 80036fa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	6405      	str	r5, [r0, #64]	; 0x40
  huart->pRxBuffPtr = pData;
 80036fe:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003700:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->RxXferSize = Size;
 8003704:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003706:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003708:	4e1f      	ldr	r6, [pc, #124]	; (8003788 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 800370a:	6505      	str	r5, [r0, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800370c:	4613      	mov	r3, r2
 800370e:	460a      	mov	r2, r1
 8003710:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003712:	63c6      	str	r6, [r0, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003714:	4e1d      	ldr	r6, [pc, #116]	; (800378c <UART_Start_Receive_DMA+0x98>)
 8003716:	6406      	str	r6, [r0, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003718:	4e1d      	ldr	r6, [pc, #116]	; (8003790 <UART_Start_Receive_DMA+0x9c>)
 800371a:	64c6      	str	r6, [r0, #76]	; 0x4c
{
 800371c:	b082      	sub	sp, #8
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800371e:	3104      	adds	r1, #4
 8003720:	f7fe fe0c 	bl	800233c <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	9501      	str	r5, [sp, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	9201      	str	r2, [sp, #4]
 800372c:	6859      	ldr	r1, [r3, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800372e:	6922      	ldr	r2, [r4, #16]
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003730:	9101      	str	r1, [sp, #4]
 8003732:	9901      	ldr	r1, [sp, #4]
  __HAL_UNLOCK(huart);
 8003734:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003738:	b15a      	cbz	r2, 8003752 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	f103 020c 	add.w	r2, r3, #12
 800373e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	f103 000c 	add.w	r0, r3, #12
 800374a:	e840 2100 	strex	r1, r2, [r0]
 800374e:	2900      	cmp	r1, #0
 8003750:	d1f3      	bne.n	800373a <UART_Start_Receive_DMA+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	f103 0214 	add.w	r2, r3, #20
 8003756:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375a:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	f103 0014 	add.w	r0, r3, #20
 8003762:	e840 2100 	strex	r1, r2, [r0]
 8003766:	2900      	cmp	r1, #0
 8003768:	d1f3      	bne.n	8003752 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	f103 0214 	add.w	r2, r3, #20
 800376e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	f103 0114 	add.w	r1, r3, #20
 800377a:	e841 2000 	strex	r0, r2, [r1]
 800377e:	2800      	cmp	r0, #0
 8003780:	d1f3      	bne.n	800376a <UART_Start_Receive_DMA+0x76>
}
 8003782:	b002      	add	sp, #8
 8003784:	bd70      	pop	{r4, r5, r6, pc}
 8003786:	bf00      	nop
 8003788:	08003281 	.word	0x08003281
 800378c:	08003265 	.word	0x08003265
 8003790:	08003195 	.word	0x08003195

08003794 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003794:	f890 c03e 	ldrb.w	ip, [r0, #62]	; 0x3e
 8003798:	f1bc 0f20 	cmp.w	ip, #32
 800379c:	d111      	bne.n	80037c2 <HAL_UART_Receive_DMA+0x2e>
{
 800379e:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 80037a0:	b161      	cbz	r1, 80037bc <HAL_UART_Receive_DMA+0x28>
 80037a2:	b15a      	cbz	r2, 80037bc <HAL_UART_Receive_DMA+0x28>
    __HAL_LOCK(huart);
 80037a4:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80037a8:	2c01      	cmp	r4, #1
 80037aa:	d00c      	beq.n	80037c6 <HAL_UART_Receive_DMA+0x32>
 80037ac:	2401      	movs	r4, #1
 80037ae:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	2400      	movs	r4, #0
 80037b4:	6304      	str	r4, [r0, #48]	; 0x30
}
 80037b6:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80037b8:	f7ff bf9c 	b.w	80036f4 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80037bc:	2001      	movs	r0, #1
}
 80037be:	bc30      	pop	{r4, r5}
 80037c0:	4770      	bx	lr
    return HAL_BUSY;
 80037c2:	2002      	movs	r0, #2
}
 80037c4:	4770      	bx	lr
    return HAL_BUSY;
 80037c6:	2002      	movs	r0, #2
}
 80037c8:	bc30      	pop	{r4, r5}
 80037ca:	4770      	bx	lr

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4d0d      	ldr	r5, [pc, #52]	; (8003804 <__libc_init_array+0x38>)
 80037d0:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	2600      	movs	r6, #0
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	4d0b      	ldr	r5, [pc, #44]	; (800380c <__libc_init_array+0x40>)
 80037de:	4c0c      	ldr	r4, [pc, #48]	; (8003810 <__libc_init_array+0x44>)
 80037e0:	f000 f820 	bl	8003824 <_init>
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	2600      	movs	r6, #0
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08003864 	.word	0x08003864
 8003808:	08003864 	.word	0x08003864
 800380c:	08003864 	.word	0x08003864
 8003810:	08003868 	.word	0x08003868

08003814 <memset>:
 8003814:	4402      	add	r2, r0
 8003816:	4603      	mov	r3, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
